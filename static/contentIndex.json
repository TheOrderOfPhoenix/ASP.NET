{"01-Introductory-Sessions/Roadmap/Roadmap":{"slug":"01-Introductory-Sessions/Roadmap/Roadmap","filePath":"01-Introductory-Sessions/Roadmap/Roadmap.md","title":"Roadmap","links":[],"tags":[],"content":"To teach the roadmap for Controllers, Routing, and Return Types in ASP.NET Core MVC, structuring your lessons effectively with examples will reinforce each concept and help students grasp how everything connects. Here’s a guideline with step-by-step instructions, examples, and activities to make your lessons engaging and informative.\n\nDetailed\n1. Start with the Basics: Understanding MVC Architecture\nGoal: Give a quick overview of the MVC pattern, focusing on the role of controllers.\n\n\n Explain MVC: Briefly explain the MVC architecture and the role of each component.\n\n Model: Manages data and business logic.\n View: Handles UI.\n Controller: Acts as the intermediary, processing requests and returning responses.\n\n\n\n Controller’s Role: Emphasize the controller’s job in handling requests, defining actions, and managing routing.\n\n\n Activity: Create a “Hello World” ASP.NET Core MVC app and show the default routing behavior (HomeController with Index action).\n\n\n\n2. Controllers: Structure, Naming, and Basics\nGoal: Help students understand how to structure and create controllers, and introduce them to actions.\n\n Creating a Simple Controller:\n\n Show students how to create a new controller in Visual Studio.\n Explain the naming convention (Controller suffix) and that controllers are public classes that inherit from Controller.\n\n\n Basic Action Methods:\n\n Introduce action methods (public IActionResult Index()).\n Discuss the default Index action and return type.\n\n\n Example:\n\n public class ProductController : Controller {     public IActionResult Index()     {         return View();     }      public IActionResult Details(int id)     {         var product = new Product { Id = id, Name = &quot;Sample Product&quot;, Price = 25.00m };         return View(product);     } }\n\n\n Activity: Have students create their own controller (e.g., CustomerController) with a few basic actions.\n\n\n3. Routing Basics: Default Routing and Attribute-Based Routing\nGoal: Teach students how routing works in ASP.NET Core, starting with the default route and moving to attribute-based routing.\n\n Explain Default Route Configuration:\n\n Walk through the default route in Program.cs.\n Show how {controller=Home}/{action=Index}/{id?} pattern works and introduce the optional parameter id?.\n\n\n Customizing Routes:\n\n Demonstrate how to customize the default route by setting different controller and action names as defaults.\n\n\n Attribute-Based Routing:\n\n Introduce attribute routing, explaining the flexibility it offers.\n Show how [Route] and HTTP-specific attributes like [HttpGet], [HttpPost] control the behavior of action methods.\n\n\n Examples:\n\n[Route(&quot;product&quot;)] public class ProductController : Controller {     [HttpGet(&quot;list&quot;)]     public IActionResult List() { /*...*/ }      [HttpGet(&quot;{id:int}&quot;)]     public IActionResult Details(int id) { /*...*/ } }\n\n Activity: Ask students to add custom routes to their CustomerController, like [HttpGet(&quot;all&quot;)] for a list of customers and [HttpGet(&quot;{id}&quot;)] for customer details.\n\n\n4. Controllers and Actions: Handling Different HTTP Requests\nGoal: Teach students to handle various HTTP requests using controllers and action methods.\n\n\nExplain HTTP Verbs:\n\nCover the main HTTP methods (GET, POST, PUT, DELETE).\nDescribe when to use each verb in the context of RESTful APIs.\n\n\n\nCreating Actions with HTTP-Specific Attributes:\n\nUse [HttpGet], [HttpPost], etc., to restrict action methods to specific HTTP methods.\nEmphasize how to secure data operations (like POST for creating data and DELETE for deleting data).\n\n\n\nExample:\npublic class ProductController : Controller {     [HttpGet]     public IActionResult List() { /*...*/ }      [HttpPost]     public IActionResult Create(Product product) { /*...*/ }      [HttpDelete(&quot;{id}&quot;)]     public IActionResult Delete(int id) { /*...*/ } }\n\n\nActivity: Have students create CRUD (Create, Read, Update, Delete) actions in their CustomerController and test using different HTTP methods.\n\n\n\n5. Return Types: Exploring Different Return Options in Controllers\nGoal: Familiarize students with various return types in ASP.NET Core MVC.\n\n\nIntroduce Basic Return Types:\n\nViewResult (View())\nJsonResult (Json())\nContentResult (Content())\n\n\n\nExplain When to Use Each:\n\nViewResult: When rendering a view.\nJsonResult: For returning JSON data in APIs.\nContentResult: For plain text or HTML responses.\n\n\n\nExamples:\npublic class ProductController : Controller {     public IActionResult Index() =&gt; View();     public JsonResult GetProductJson(int id) =&gt; Json(new { id, name = &quot;Product&quot; });     public ContentResult GetMessage() =&gt; Content(&quot;This is a simple text message.&quot;); }\n\n\nAdvanced Return Types:\n\nIntroduce RedirectToActionResult for redirection and StatusCodeResult for custom status codes.\nExplain file return types like FileResult for handling downloads.\n\n\n\nActivity: Challenge students to create an API-style action in their controller that returns JSON and another action that returns plain text.\n\n\n\n6. Real-World Application: Creating a Full Flow\nGoal: Show students how to build a real-world feature, passing data between controller, model, and view.\n\n\nCreate a Model:\n\nDefine a Product model with properties like Id, Name, and Price.\n\n\n\nController-Model Interaction:\n\n\nIn the controller, create methods that interact with the model and pass data to the view.\n\n\nExample:\ncsharp\nCopy code\npublic IActionResult Details(int id) {     var product = new Product { Id = id, Name = &quot;Laptop&quot;, Price = 1200.00m };     return View(product); }\n\n\n\n\nPass Data to the View:\n\nInstruct students to create a strongly-typed view that displays the Product details.\n\n\n\nActivity: Have students build a simple “Product Details” page where they:\n\nDefine a Product model.\nCreate a controller with Details and List actions.\nPass product data to a strongly-typed view.\n\n\n\n\n7. Practice and Review: Small Project Assignment\nGoal: Reinforce the concepts with a project that combines everything they’ve learned.\n\n\nProject Outline:\n\nCreate a “Product Management” app.\nImplement basic CRUD operations (Create, Read, Update, Delete) for products.\nUse default and custom routing.\nUse attribute-based routing for specific actions.\nInclude different return types, like JSON and view results.\n\n\n\nSuggested Workflow:\n\nDefine models (like Product).\nSet up routing configurations.\nCreate controllers with HTTP-specific actions.\nReturn JSON, redirect results, and HTML views based on the action.\n\n\n\nEncourage Questions and Discussions:\n\nEncourage students to ask questions about design choices or code structure.\nReview each part after completion, reinforcing key points and addressing any misunderstandings.\n\n\n\nThis structure gives a full overview while also providing practical, hands-on tasks, making it easier for students to build and connect concepts with code. Let me know if you’d like further specifics on any area or examples!\nGeneral\n1. Getting Started with MVC Projects\n\n • Directory Structure: Detailed explanation of the MVC directory\n (Controllers, Views, Models, wwwroot) and the role of Program.cs in\nconfiguration.\n ~~• Routing and Controllers: Custom routing, attribute routing, and~~ ~~handling various HTTP requests.~~\n • Actions in Controllers: Exploring different return types and handling\ndifferent HTTP requests.\n\n2. Controllers and Routing\n\n • Routing Basics: Attribute-based routing and custom route parameters.\n • Controller Actions: How to handle different return types like JSON, HTML, and redirect results.\n ~~• Routing and Controllers: Custom routing, attribute routing, and~~ ~~*handling various HTTP requests.\n Return Types in Controllers\n\n3. Views in MVC\n\n • Creating and Organizing Views: Using view models and best practices for organizing views.\n • _Layout.cshtml: Creating reusable layouts for consistent page structure.\n • Bootstrap Integration: Introduction to Bootstrap and using its grid system, forms, and navigation.\n • Razor View Engine: Using Razor for conditional content, loops, and strongly typed views.\n • HTML Helpers and Tag Helpers: Leveraging helpers to generate forms, links, and other elements\n\n4. OOP &amp; Design Archeticture\n\n[ ]\n\n5. Working with Models\n\n • Models and Data Annotations: Detailed use of data annotations like [Required], [StringLength], and creating custom validators.\n • View Models and Data Models: Mapping between data models and view models to separate business logic from UI.\n • Model Binding: Automatic model binding from form data to controller actions.\n\n6. Forms and Input\n\n • Form Creation with HTML Helpers: Build forms with @Html.BeginForm() and generate form elements like text boxes and dropdowns.\n • Form Validation: Server-side validation with data annotations and client-side validation using jQuery Validation.\n\n7. Dependency Injection\n• Service Lifetimes: Discuss how to choose between Scoped, Transient,\nand Singleton in dependency injection.\n• Repository Pattern: Abstraction of database operations with\nrepositories to separate business logic from data access.\n• Unit of Work Pattern: Manage transactions across multiple\nrepository operations.\n8. Database and Entity Framework (EF Core)\n• EF Core Setup: How to install EF Core and configure a connection\nstring for SQL Server.\n• Code First Migrations: Applying migrations to manage database\nschema updates.\n• Seeding the Database: Automatically populate the database with\ninitial data.\n• Entity Relationships: Define one-to-many and many-to-many\nrelationships using EF Core.\n• LINQ: Use LINQ for querying data in a readable way.\n• Tracking and Detaching Entities: Optimizing performance by\ndetaching entities when needed.\n9. CRUD Operations\n• Full CRUD Cycle: Create, Read, Update, and Delete operations for\nmanaging records.\n• Pagination and Filtering: Enable pagination and filtering for large\ndata sets.\n10. REST API Development\n• What is a REST API?: Introduce REST principles and why APIs are\nimportant in web development.\n• Creating a REST API: Use ASP.NET Core to create simple APIs using\ncontrollers and routing.\n• Returning JSON: Show how to return JSON responses from API\nendpoints.\n• Model Binding in APIs: Handle POST, PUT, and DELETE requests,\nincluding validation.\n• Swagger Integration: Demonstrate how to use Swagger for API\ndocumentation and testing.\n• API Versioning: Explain the need for versioning in APIs and how to\nimplement it.10. Authentication and Authorization\n• ASP.NET Core Identity: User registration, login, and managing user\nprofiles.\n• Role-Based Authorization: Restrict access to parts of the application\nbased on user roles.\n• External Authentication: Implement third-party login with Google,\nFacebook, etc.\n• JWT Authentication (Optional): For building APIs with token-based\nauthentication.\n11. Advanced Views and AJAX\n• Partial Views and View Components: Reusable components for\nmodularizing your views.\n• AJAX in ASP.NET Core: How to make asynchronous requests using\nAJAX without refreshing the page, and handling responses\ndynamically.\n• JavaScript Integration: Use JavaScript and jQuery for front-end\ninteractivity."},"01-Introductory-Sessions/Session00/Session00-Notes":{"slug":"01-Introductory-Sessions/Session00/Session00-Notes","filePath":"01-Introductory-Sessions/Session00/Session00 Notes.md","title":"Session00 Notes","links":[],"tags":[],"content":"Session 0: Controllers, Routing, and Return Types\n📝 Overview\nIn this session, we’ll cover the following concepts:\n\nMVC pattern in ASP.NET Core\nControllers and their structure\nDefault and attribute-based routing\nHandling various HTTP requests (GET, POST, DELETE)\nReturn types from controllers\nBuilding a real-world Product flow\nMini project assignment\n\n📚 Topics Covered\n✅ MVC Architecture\n\nLearn how the Model-View-Controller (MVC) architecture separates concerns in a web application.\n🔗 Microsoft Docs - MVC Pattern\n\n✅ Controllers and Actions\n\nUnderstand how to create controllers and action methods, follow naming conventions, and return data to views.\n🔗 w3schools - MVC Controllers\n\n✅ Routing in ASP.NET Core\n\nUnderstand how ASP.NET Core maps incoming requests to the appropriate controller and action using default and custom routing.\n🔗 Microsoft Docs - Routing\n\n✅ HTTP Methods in MVC\n\nLearn how to respond to different types of HTTP requests using attributes like [HttpGet], [HttpPost].\n🔗 HTTP Methods - MDN\n\n✅ Return Types\n\nExplore different return types like ViewResult, JsonResult, and more, and know when to use each one.\n🔗 Action Results in ASP.NET Core\n\n📌 Notes\n\nCollected from various sources including W3Schools, Microsoft Docs, and ChatGPT\n\n\n1. Start with the Basics: Understanding MVC Architecture\nGoal: Give a quick overview of the MVC pattern, focusing on the role of controllers.\n\n\n✅ Explain MVC:\n\nModel: Manages data and business logic.\nView: Handles UI.\nController: Acts as the intermediary, processing requests and returning responses.\n\n\n\n✅ Controller’s Role:\nHandles incoming HTTP requests, decides which logic to execute, and returns the appropriate result (usually a view or data).\n\n\n✅ Activity:\nCreate a “Hello World” ASP.NET Core MVC app and show the default routing behavior (HomeController with Index action).\n\n\n\n2. Controllers: Structure, Naming, and Basics\nGoal: Help students understand how to structure and create controllers, and introduce them to actions.\n\n\n✅ Creating a Simple Controller:\n\nUse Visual Studio to add a new controller.\nController classes must:\n\nBe public\nInherit from Controller\nHave Controller as a suffix in their name (e.g., ProductController).\n\n\n\n\n\n✅ Basic Action Methods:\n\nAction methods must be public.\nDefault return type is usually IActionResult.\n\n\n\npublic class ProductController : Controller {\n    public IActionResult Index() {\n        return View();\n    }\n \n    public IActionResult Details(int id) {\n        var product = new Product { Id = id, Name = &quot;Sample Product&quot;, Price = 25.00m };\n        return View(product);\n    }\n}\n \n- ✅ **Activity**:\n    Create your own `CustomerController` with an `Index` and a `Details` action.\n \n \n---\n \n### **3. Routing Basics: Default Routing and Attribute-Based Routing**\n \n**Goal**: Teach students how routing works in ASP.NET Core, from default routing to custom attribute routing.\n \n- ✅ **Default Route Configuration**:\n    Defined in `Program.cs`:\n \n \n```csharp\napp.MapControllerRoute(\n    name: &quot;default&quot;,\n    pattern: &quot;{controller=Home}/{action=Index}/{id?}&quot;);\n\n{controller=Home}: Default controller\n{action=Index}: Default action\n{id?}: Optional parameter\n✅ Customizing Routes:\n\nYou can modify the pattern in Program.cs.\nExample: Use &quot;{controller=Product}/{action=List}/{id?}&quot; to change defaults.\n\n\n✅ Attribute-Based Routing:\n\nUseful for APIs or when you want specific paths.\n\n\n\n[Route(&quot;product&quot;)]\npublic class ProductController : Controller {\n    [HttpGet(&quot;list&quot;)]\n    public IActionResult List() {\n        return View();\n    }\n \n    [HttpGet(&quot;{id:int}&quot;)]\n    public IActionResult Details(int id) {\n        return View();\n    }\n}\n\n🔲 Activity:\nAdd routes to your CustomerController:\n\n[HttpGet(&quot;all&quot;)] to show all customers\n[HttpGet(&quot;{id}&quot;)] to show customer details\n\n\n\n\n4. Controllers and Actions: Handling Different HTTP Requests\nGoal: Show how controllers handle various HTTP methods.\n\n✅ HTTP Verbs:\n\nGET: Retrieve data\nPOST: Submit data\nPUT: Update data\nDELETE: Remove data\n\n\n✅ HTTP-Specific Attributes:\n\nUse [HttpGet], [HttpPost], [HttpPut], [HttpDelete] to restrict access.\n\n\n\npublic class ProductController : Controller {\n    [HttpGet]\n    public IActionResult List() { return View(); }\n \n    [HttpPost]\n    public IActionResult Create(Product product) {\n        // Save to DB\n        return RedirectToAction(&quot;List&quot;);\n    }\n \n    [HttpDelete(&quot;{id}&quot;)]\n    public IActionResult Delete(int id) {\n        // Remove from DB\n        return NoContent();\n    }\n}\n\n🔲 Activity:\nAdd full CRUD actions to CustomerController, using appropriate HTTP verbs and routing.\n\n\n5. Return Types: Exploring Different Return Options in Controllers\nGoal: Familiarize students with different return types in ASP.NET Core.\n\n✅ Basic Return Types:\n\nViewResult → return View();\nJsonResult → return Json(data);\nContentResult → return Content(&quot;Text&quot;);\n\n\n✅ When to Use:\n\nUse View() when rendering pages.\nUse Json() for APIs or AJAX.\nUse Content() for simple text/plain responses.\n\n\n\npublic class ProductController : Controller {\n    public IActionResult Index() =&gt; View();\n \n    public JsonResult GetProductJson(int id) =&gt; Json(new { id, name = &quot;Product&quot; });\n \n    public ContentResult GetMessage() =&gt; Content(&quot;This is a simple text message.&quot;);\n}\n\n✅ Advanced Return Types:\n\nRedirectToAction(&quot;Index&quot;): Navigate to another action.\nStatusCode(404): Return HTTP status codes.\nFile(): Return downloadable content (e.g., PDF, image).\n\n\n🔲 Activity:\nAdd:\n\nOne action returning JSON\nOne returning text\nOne redirecting to another action\n\n\n\n\n6. Real-World Application: Creating a Full Flow\nGoal: Connect controllers, models, and views to build something meaningful.\n\n✅ Create a Model:\n\npublic class Product {\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n\n✅ Controller-Model Interaction:\n\npublic IActionResult Details(int id) {\n    var product = new Product {\n        Id = id,\n        Name = &quot;Laptop&quot;,\n        Price = 1200.00m\n    };\n    return View(product);\n}\n\n✅ Pass Data to View:\n\nUse a strongly typed view (@model Product)\nDisplay @Model.Name, @Model.Price, etc.\n\n\n🔲 Activity:\n\nCreate Product model\nCreate Details and List actions\nCreate strongly-typed Razor views\n\n\n\n\n7. Practice and Review: Small Project Assignment\nGoal: Reinforce everything learned.\n\n✅ Project: Product Management App\n\nCRUD: Create, Read, Update, Delete products\nUse default and attribute routing\nReturn different types (View, JSON, Redirect)\nInclude HTTP verb handling\n\n\n✅ Suggested Workflow:\n\nCreate the Product model\nBuild controller actions\nSet up routing\nImplement Razor views\nTest everything end-to-end\n\n\n✅ Encourage Discussion:\n\nWhy return JSON instead of HTML?\nWhen to use attribute routing?\nWhat’s the benefit of redirecting?\n\n\n\n\n🧪 Practice\n\nCreate a basic MVC Hello World app\nAdd ProductController with sample actions\nUse [Route] and [HttpGet] in CustomerController\nImplement full CRUD for customers or products\nAdd JSON, Content, and Redirect examples\nBuild a simple Product Detail View\nComplete mini-project: Product Management App\n\n🙏 Acknowledgments\nSources:\n\nw3schools.com\nMicrosoft Learn\nChatGPT conversations (2025 sessions)\n"},"01-Introductory-Sessions/Session01/Session01-Notes":{"slug":"01-Introductory-Sessions/Session01/Session01-Notes","filePath":"01-Introductory-Sessions/Session01/Session01 Notes.md","title":"Session01 Notes","links":[],"tags":[],"content":"Session 1: Working with Models and MVC Basics in ASP.NET Core\n📝 Overview\nIn this session, we’ll cover the following concepts:\n\nMVC project structure and configuration\nControllers and routing (including static segments and default page setting)\nIntroduction to Models in ASP.NET Core\nC# OOP essentials: properties, encapsulation, and access modifiers\nPassing models (single and list) from controllers to views\nStrongly-typed Razor views\n\n📚 Topics Covered\n✅ MVC Project Structure &amp; Routing\n\nLearn how ASP.NET Core organizes files and configures routes for handling web requests.\n🔗 Microsoft Docs - MVC Introduction\n\n✅ C# Properties &amp; OOP Essentials\n\nExplore object-oriented programming basics in C#, including properties and encapsulation.\n🔗 C# OOP Overview\n\n✅ Models and Views\n\nUnderstand how to define models and pass them to views in ASP.NET Core MVC.\n🔗 Microsoft Docs - Work with Data in MVC\n\n📌 Notes\n\nCollected from various sources including W3Schools, Microsoft Docs, and ChatGPT\n\n\n📍 Part 0: Roadmap of This Session\n✅ Getting Started with MVC Projects\n\n\n Directory Structure:\nLearn about the standard folders: Controllers, Views, Models, and wwwroot. Understand the role of Program.cs in bootstrapping and routing.\n\n\n Routing and Controllers:\n\nCustom routing using templates like {controller}/{action}/{id?}\nAttribute routing using [Route], [HttpGet], etc.\nStatic segments in routes:\nExample: [Route(&quot;products/all&quot;)] creates /products/all.\n\n\n\n Actions in Controllers:\n\nReturn types like ViewResult, JsonResult, ContentResult\nHandle multiple HTTP methods (GET, POST, etc.)\n\n\n\n🔲 How to Set Default Page in ASP.NET Core\n(To do: Discuss how to change the default route in Program.cs, e.g. set controller = Products, action = List)\n\n\n\n📍 Part 1: Understanding Models in ASP.NET Core MVC\nModels are a fundamental part of the MVC architecture, representing the data structure and logic of your application. They interact with the database and contain properties that hold data and methods that implement business logic.\n🧠 Model Structure and Purpose\n\nData Representation: Models reflect real-world data structures, often aligning with database tables.\nData Handling: Models encapsulate validation, relationships, and business logic.\nData Transport: Used to transfer data between controllers and views.\n\nIn ASP.NET Core MVC, models are typically stored in a Models folder, with one class per entity (Product, Customer, Order, etc.).\n\n📍 Part 2: Properties in Models &amp; C# OOP Concepts\n✅ Properties in C#\nProperties in C# provide a controlled way to access and modify private fields using get and set.\npublic class Product {\n    public int Id { get; set; } // Auto-property\n    public decimal Price { get; set; }\n}\n \n- **Auto-Implemented Properties**:\n    Simplify property declarations when no extra logic is needed.\n \n \n#### ✅ Encapsulation and Access Modifiers\n \nEncapsulation hides the internal workings of a class from the outside world.\n \n- **Access Modifiers**:\n \n    - `public`: Accessible from anywhere\n \n    - `private`: Only inside the class\n \n    - `protected`: Inside the class and derived classes\n \n    - `internal`: Only within the current assembly\n \n \n**MVC models typically use public properties** so they can be accessed in views and controllers.\n \n---\n \n### 📍 Part 3: Passing a Model to a View\n \n#### ✅ Step 1: Define the Model\n \n```csharp\npublic class Product {\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n✅ Step 2: Create a Controller Action\npublic class ProductsController : Controller {\n    public IActionResult Details() {\n        var product = new Product {\n            Id = 1,\n            Name = &quot;Laptop&quot;,\n            Price = 1500.00m\n        };\n        return View(product); // Passing model to view\n    }\n}\n✅ Step 3: Strongly-Typed View (Details.cshtml)\n@model Product\n \n&lt;h2&gt;Product Details&lt;/h2&gt;\n&lt;p&gt;Product Name: @Model.Name&lt;/p&gt;\n&lt;p&gt;Price: @Model.Price&lt;/p&gt;\n\n@model tells Razor this view receives a Product\n@Model gives access to passed data\n\n\n📍 Passing a List of Models to the View\n✅ Controller Action:\npublic IActionResult List() {\n    var products = new List&lt;Product&gt; {\n        new Product { Id = 1, Name = &quot;Laptop&quot;, Price = 1500.00m },\n        new Product { Id = 2, Name = &quot;Smartphone&quot;, Price = 800.00m }\n    };\n    return View(products);\n}\n✅ View (List.cshtml):\n@model IEnumerable&lt;Product&gt;\n \n&lt;h2&gt;Product List&lt;/h2&gt;\n&lt;ul&gt;\n@foreach (var product in Model) {\n    &lt;li&gt;@product.Name - @product.Price&lt;/li&gt;\n}\n&lt;/ul&gt;\n\nUse IEnumerable&lt;Product&gt; to pass lists\nRazor supports foreach directly on the Model\n\n\n🧪 Practice\n\nExplore and explain the MVC folder structure\nCreate a model class Product\nBuild a controller that returns a single model to a view\nCreate a strongly-typed Razor view using @model\nReturn a list of Product models and display them in a loop\nShow how to set the default controller and action in Program.cs\n\n🙏 Acknowledgments\nSources:\n\nw3schools.com\nMicrosoft Learn\nChatGPT sessions (2025)\n"},"01-Introductory-Sessions/Session02/Practices/Practice":{"slug":"01-Introductory-Sessions/Session02/Practices/Practice","filePath":"01-Introductory-Sessions/Session02/Practices/Practice.md","title":"Practice","links":[],"tags":[],"content":"Mock a website and create multiple pages with custom routings.\nFor example, create a mock github website and use customize the routing to have multiple pages."},"01-Introductory-Sessions/Session02/Session02-Notes":{"slug":"01-Introductory-Sessions/Session02/Session02-Notes","filePath":"01-Introductory-Sessions/Session02/Session02 Notes.md","title":"Session02 Notes","links":[],"tags":[],"content":"Session 2: Middleware, Routing, and Controllers in ASP.NET Core MVC\n📝 Overview\nIn this session, we’ll cover the following concepts:\n\nMiddleware and the ASP.NET Core request pipeline\nRouting structure: default, attribute-based, constraints, SEO-friendly\nCreating and structuring controllers\nHandling HTTP methods\nDependency Injection in controllers\nModel binding and action parameters\n\n📚 Topics Covered\n✅ Middleware and Request Pipeline\n\nVisual understanding of the middleware flow and pipeline order\n🖼️ See diagrams in original session notes\n\n🔗 ASP.NET Core Middleware Overview\n✅ Routing in ASP.NET Core\n\nLearn how incoming requests map to controller actions through routing.\n🔗 ASP.NET Core Routing Docs\n\n✅ Controllers\n\nUnderstand how to structure controllers and handle requests with actions.\n🔗 ASP.NET Core Controllers\n\n📌 Notes\n\nCollected from various sources including Microsoft Docs and ChatGPT\n\n\n📍 Part 0: Middleware and Request Pipeline\n🖼️ Diagrams:\n\n[](../../../Assets/Pasted image 20241105101014.png)\n[](../../../Assets/Pasted image 20241105111037.png)\n[](../../../Assets/Pasted image 20241105111022.png)\n\n\n📍 Part 1: Routing in ASP.NET Core MVC\nRouting maps incoming HTTP requests to controller actions.\n✅ Basic Routing Structure\nRouting is configured in Program.cs via app.MapControllerRoute.\napp.MapControllerRoute(\n    name: &quot;default&quot;,\n    pattern: &quot;{controller=Home}/{action=Index}/{id?}&quot;\n);\n \n- `{controller=Home}`: default controller\n \n- `{action=Index}`: default action\n \n- `{id?}`: optional URL parameter\n \n \n---\n \n### ✅ Attribute Routing\n \nDefine routes directly in the controller using attributes:\n \n```csharp\n[Route(&quot;products&quot;)]\npublic class ProductsController : Controller\n{\n    [HttpGet(&quot;all&quot;)]\n    public IActionResult GetAllProducts() { /*...*/ }\n \n    [HttpGet(&quot;{id}&quot;)]\n    public IActionResult GetProductById(int id) { /*...*/ }\n}\n\n✅ Route Parameters &amp; Constraints\nYou can enforce patterns and types using constraints:\napp.MapControllerRoute(\n    name: &quot;custom&quot;,\n    pattern: &quot;{controller=Products}/{action=List}/{id:int:min(1)}&quot;\n);\n\nint:min(1) means id must be an integer ≥ 1\nOther constraints: bool, datetime, guid, minlength(x), etc.\n\n\n✅ Per-Controller Default Routes\nYou can assign a default action to a specific controller:\napp.MapControllerRoute(\n    name: &quot;gallery&quot;,\n    pattern: &quot;Gallery/{action=Main}/{id?}&quot;,\n    defaults: new { controller = &quot;Gallery&quot; }\n);\n \napp.MapControllerRoute(\n    name: &quot;default&quot;,\n    pattern: &quot;{controller=Home}/{action=Index}/{id?}&quot;\n);\n\n✅ SEO-Friendly URLs\nUse descriptive URLs for readability and SEO:\napp.MapControllerRoute(\n    name: &quot;productDetail&quot;,\n    pattern: &quot;products/details/{id:int}/{name}&quot;\n);\n✅ Example output: /products/details/10/laptop\n\n📍 Part 2: Controllers in ASP.NET Core MVC\nControllers handle requests and return responses, acting as a bridge between models and views.\n✅ Creating a Basic Controller\npublic class HomeController : Controller\n{\n    public IActionResult Index()\n    {\n        return View();\n    }\n}\n\n✅ Handling HTTP Methods\nUse attributes to define the HTTP method an action should handle:\n[HttpPost]\npublic IActionResult CreateProduct(Product product)\n{\n    return RedirectToAction(&quot;Index&quot;);\n}\nOther attributes include:\n\n[HttpGet]\n[HttpPut]\n[HttpDelete]\n\n\n✅ Dependency Injection in Controllers\nInject services like repositories into controllers for better separation of concerns:\npublic class ProductsController : Controller\n{\n    private readonly IProductRepository _repository;\n \n    public ProductsController(IProductRepository repository)\n    {\n        _repository = repository;\n    }\n}\n\n✅ Action Parameters and Model Binding\nParameters are bound automatically from the URL, query string, or form body:\npublic IActionResult EditProduct(int id, string name)\n{\n    // id and name are bound from query or route\n}\nFor complex types, ASP.NET Core binds data from the request body (e.g., forms or JSON).\n\n🧪 Practice\n\nDefine multiple routes with custom constraints\nBuild an SEO-friendly route pattern\nCreate controller with basic actions (Index, Details, Create)\nAdd attribute-based routes to actions\nUse [HttpGet], [HttpPost] on appropriate methods\nInject a service into a controller via constructor\nBind parameters from query and route\n\n🙏 Acknowledgments\nSources:\n\nMicrosoft Docs\nChatGPT 2025 sessions\n"},"01-Introductory-Sessions/Session03/Practices/Practice":{"slug":"01-Introductory-Sessions/Session03/Practices/Practice","filePath":"01-Introductory-Sessions/Session03/Practices/Practice.md","title":"Practice","links":[],"tags":[],"content":"Mock a website and create multiple pages with custom routings.\nUse Partial Views to avoid repetition\nUse Bootstrap themes and classes to change the style\nUse Buttons and Links in your pages\n"},"01-Introductory-Sessions/Session03/Session03-Notes":{"slug":"01-Introductory-Sessions/Session03/Session03-Notes","filePath":"01-Introductory-Sessions/Session03/Session03 Notes.md","title":"Session03 Notes","links":[],"tags":[],"content":"Session 3: Views, Razor Syntax, Bootstrap, and Helpers\n📝 Overview\nIn this session, we covered the following concepts:\n\nCreating and Organizing Views in MVC\nRazor Syntax for dynamic content rendering\nBootstrap integration for responsive UI\nUsing Tag Helpers and HTML Helpers\n\n📚 Topics Covered\n✅ Creating and Organizing Views\n\nLearn how views are structured in ASP.NET Core MVC, how to use layouts and partials.\n\n✅ Razor Syntax\n\nUse C# inside HTML with Razor to build dynamic views\n⭐ Razor Docs\n\n✅ Bootstrap\n\nIntegrate responsive design into your app using Bootstrap\n⭐ Bootstrap W3Schools\n\n✅ Tag Helpers and HTML Helpers\n\nTools to simplify HTML generation in Razor views\n\n📌 Notes\n\nCollected from various sources including Microsoft Learn, W3Schools, and ChatGPT\n\nPart 1: Introduction to Views\n\nViews (.cshtml files) are templates that render HTML with Razor syntax.\nViews are organized in Views/ControllerName/ViewName.cshtml.\nThe View() method in a controller renders the corresponding view.\nLayouts (_Layout.cshtml) allow reuse of common HTML structure like headers/footers.\nPartial Views help modularize repeated sections (like a profile box).\n\nPart 2: Razor Syntax\n\nUse @ to enter C# in HTML.\nImplicit: @Model.Name, Explicit: @(Model.Name + &quot;!&quot;)\nCode blocks: @{ var msg = &quot;Hello&quot;; }\nLoops and conditionals are supported: @if, @for, @foreach, @switch\nRazor supports local functions in code blocks for reusability\n\nPart 3: Bootstrap\n\nBootstrap helps in building responsive UI components.\nGrid system, forms, buttons, navbars, modals etc. are supported.\nIntegration involves adding Bootstrap CSS/JS in layout or view.\n\nPart 4: Tag Helpers and HTML Helpers\nTag Helpers:\n\nLooks like HTML with asp-* attributes\nExample: &lt;a asp-controller=&quot;Home&quot; asp-action=&quot;About&quot;&gt;Link&lt;/a&gt;\nRequires @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers in _ViewImports.cshtml\n\nHTML Helpers:\n\nUse C# syntax like @Html.TextBoxFor(...), @Html.BeginForm()\nMore verbose but offers fine control with C# expressions\n\nComparison:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatureTag HelpersHTML HelpersSyntaxHTML-likeC# methodsReadabilityHighModerateUseasp-*@Html.*\n🧪 Practice\n\nCreate a view with a layout and partial\nUse Razor syntax to display dynamic data\nBuild a form with Tag Helpers\nRefactor a view using HTML Helpers\n\n🙏 Acknowledgments\nSources:\n\nMicrosoft Learn - Razor\nMicrosoft Learn - Views\nW3Schools - Bootstrap\nChatGPT Assistance (2025 sessions)\n"},"01-Introductory-Sessions/Session04/Session04-Notes":{"slug":"01-Introductory-Sessions/Session04/Session04-Notes","filePath":"01-Introductory-Sessions/Session04/Session04 Notes.md","title":"Session04 Notes","links":[],"tags":[],"content":"Session 4: Views, Razor Syntax, Bootstrap, and Helpers\n📝 Overview\nIn this session, we covered the following concepts:\n\nCreating and Organizing Views in MVC\nRazor Syntax for dynamic content rendering\nBootstrap integration for responsive UI\nUsing Tag Helpers and HTML Helpers\nView Components\nViewImports and ViewStart\nViewData vs ViewBag\nOOP Concepts in MVC: Encapsulation, Inheritance, Polymorphism, Abstraction, DTO\n\n📚 Topics Covered\n✅ Creating and Organizing Views\n\nLearn how views are structured in ASP.NET Core MVC, how to use layouts and partials.\n\n✅ Razor Syntax\n\nUse C# inside HTML with Razor to build dynamic views\n⭐ Razor Docs\n\n✅ Bootstrap\n\nIntegrate responsive design into your app using Bootstrap\n⭐ Bootstrap W3Schools\n\n✅ Tag Helpers and HTML Helpers\n\nTools to simplify HTML generation in Razor views\n\n📌 Notes\n\nCollected from various sources including Microsoft Learn, W3Schools, and ChatGPT\n\nPart 1: Introduction to Views\n\nViews (.cshtml files) are templates that render HTML with Razor syntax.\nViews are organized in Views/ControllerName/ViewName.cshtml.\nThe View() method in a controller renders the corresponding view.\nLayouts (_Layout.cshtml) allow reuse of common HTML structure like headers/footers.\nPartial Views help modularize repeated sections (like a profile box).\n\nPart 2: Razor Syntax\n\nUse @ to enter C# in HTML.\nImplicit: @Model.Name, Explicit: @(Model.Name + &quot;!&quot;)\nCode blocks: @{ var msg = &quot;Hello&quot;; }\nLoops and conditionals are supported: @if, @for, @foreach, @switch\nRazor supports local functions in code blocks for reusability\n\nPart 3: Bootstrap\n\nBootstrap helps in building responsive UI components.\nGrid system, forms, buttons, navbars, modals etc. are supported.\nIntegration involves adding Bootstrap CSS/JS in layout or view.\n\nPart 4: Tag Helpers and HTML Helpers\nTag Helpers:\n\nLooks like HTML with asp-* attributes\nExample: &lt;a asp-controller=&quot;Home&quot; asp-action=&quot;About&quot;&gt;Link&lt;/a&gt;\nRequires @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers in _ViewImports.cshtml\n\nHTML Helpers:\n\nUse C# syntax like @Html.TextBoxFor(...), @Html.BeginForm()\nMore verbose but offers fine control with C# expressions\n\nComparison:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatureTag HelpersHTML HelpersSyntaxHTML-likeC# methodsReadabilityHighModerateUseasp-*@Html.*\nPart 5: View Components\n\nView components are reusable UI elements with server-side logic.\nSimilar to partial views but support code execution (e.g., DB queries).\nSuitable for dynamic parts like shopping carts or recent posts.\n\nPart 6: ViewImports and ViewStart\n\n_ViewStart.cshtml sets the layout for Razor Pages. Placing one in a folder affects all views inside it.\n_ViewImports.cshtml adds namespaces, tag helpers, etc.\nHierarchical: Local files override root-level ones.\n\nPart 7: ViewData vs ViewBag\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatureViewDataViewBagTypeDictionaryDynamicAccessViewData[&quot;Key&quot;]ViewBag.KeyCompile-time check❌❌Shared storage✅✅\n\nUse ViewBag for simpler, cleaner access; ViewData for explicit key-value access.\nBoth are weakly typed and best avoided in favor of ViewModels in large apps.\n\nPart 8: OOP Concepts in MVC\nEncapsulation\n\nUse private fields with public get/set properties.\nPrevents external access to internal data structures.\n\nDTO (Data Transfer Object)\n\nUsed to carry data between layers.\nReduces coupling and increases control over exposed data.\n\nInheritance\n\nShare common logic between base and derived classes.\nEnables better reuse and organization.\n\nPolymorphism\n\nCompile-time: Method overloading.\nRuntime: Method overriding.\nOne interface, many implementations.\n\nAbstraction\n\nHides complex implementation from the user.\nAchieved via abstract classes or interfaces.\n\n🧪 Practice\n\nCreate a view with a layout and partial\nUse Razor syntax to display dynamic data\nBuild a form with Tag Helpers\nRefactor a view using HTML Helpers\nCreate and render a View Component\nUse _ViewStart.cshtml and _ViewImports.cshtml for configuration\n\n🙏 Acknowledgments\nSources:\n\nMicrosoft Learn - Razor\nMicrosoft Learn - Views\nW3Schools - Bootstrap\nGeeksforGeeks - OOP in C#\nChatGPT Assistance (2025 sessions)\n"},"01-Introductory-Sessions/Session05/Session05-Notes":{"slug":"01-Introductory-Sessions/Session05/Session05-Notes","filePath":"01-Introductory-Sessions/Session05/Session05 Notes.md","title":"Session05 Notes","links":[],"tags":[],"content":"Session 5: Interfaces and Object-Oriented Relationships\n📝 Overview\nIn this session, we explored:\n\nThe concept and syntax of Interfaces in C#\nImplementation of interfaces in real scenarios\nComparison of Abstract Classes vs Interfaces\nKey OOP relationships: Inheritance, Composition, Aggregation, Association, and Dependency\nApplying these relationships in a Library Management System\n\n📚 Topics Covered\nInterfaces in C#\n\nInterfaces define contracts that classes must fulfill. They enable loose coupling and multiple inheritance in C#.\n\n\nSyntax: interface IMyInterface { void Method(); }\nImplementation: class MyClass : IMyInterface\nAll members are public and abstract by default\nCannot contain fields\nSupports multiple inheritance\n\nInterface Example\ninterface IDisplayer { void Display(); }\n \nclass Test : IDisplayer {\n    public void Display() =&gt; Console.WriteLine(&quot;Hello from interface!&quot;);\n}\n \n### Abstract Class vs Interface\n \n|Feature|Abstract Class|Interface|\n|---|---|---|\n|Implementation Allowed?|Yes|No|\n|Multiple Inheritance|No|Yes|\n|Constructors|Yes|No|\n|Fields|Yes|No|\n|Use Case|Partial abstraction|Full abstraction|\n \n### OOP Relationships\n \n#### Inheritance (IS-A)\n \n- A class inherits members from another class.\n \n- Promotes reusability.\n \n \n```c#\nclass Person { }\nclass Student : Person { }\nComposition (PART-OF)\n\nObjects are composed of other objects.\nStrong lifecycle dependency.\n\nclass Engine { }\nclass Car { Engine engine = new Engine(); }\nAssociation (HAS-A)\n\nLoose relationship between objects.\nBoth can exist independently.\n\nclass Teacher { }\nclass School {\n    public void AddTeacher(Teacher t) { }\n}\nAggregation (WEAK-PART-OF)\n\nSpecial association where one object “owns” another but the owned object can exist independently.\n\nclass Address { }\nclass Student {\n    public Address address;\n}\nDependency\n\nTemporary usage of one class by another.\n\nclass Printer { void Print(string msg) =&gt; Console.WriteLine(msg); }\nclass Report { void Generate(Printer p) =&gt; p.Print(&quot;Report&quot;); }\nApplied Example: Library Management System\nA real-world example combining all relationships:\n\nPerson → Member/Librarian (Inheritance)\nLibrary → Bookshelf → Book (Composition)\nMember ↔ LibraryCard (Association)\nMember → Address (Aggregation)\nReport.Generate(Printer) (Dependency)\n\n✔ See full code snippet here or review it during the live session.\n🧪 Practice Tasks\n\nImplement an IVehicle interface in two different classes.\nUse composition to build a Computer with CPU, RAM, and HardDrive.\nDemonstrate aggregation with Employee and Address.\nCreate an association between Doctor and Patient.\nWrite a class Order that depends on PaymentProcessor.\n\n🙏 Acknowledgments\nSources:\n\nStackOverflow\nGeeksforGeeks\nC# Corner\nMedium\nChatGPT Assistance (2025 sessions)\n"},"01-Introductory-Sessions/Session06/Session06-Notes":{"slug":"01-Introductory-Sessions/Session06/Session06-Notes","filePath":"01-Introductory-Sessions/Session06/Session06 Notes.md","title":"Session06 Notes","links":[],"tags":[],"content":"Session 6: SOLID Principles and Dependency Injection (DI)\n📝 Overview\nIn this session, we will learn two foundational concepts for writing clean, maintainable, and scalable software:\n\nSOLID Principles: Five key design principles that help create better object-oriented designs.\nDependency Injection (DI): A design pattern to manage class dependencies, improve modularity, and facilitate testing.\n\n\n📚 Topics Covered\n✅ SOLID Principles\n\nSingle Responsibility Principle (SRP)\nOpen/Closed Principle (OCP)\nLiskov Substitution Principle (LSP)\nInterface Segregation Principle (ISP)\nDependency Inversion Principle (DIP)\n\n✅ Dependency Injection (DI)\n\nWhat is DI and why use it\nTypes of DI: Constructor, Setter, Interface injection\nBenefits of DI\nReal-life analogy\nDetailed examples in C#\nDI frameworks overview\n\n\n📌 Notes\nPart 3: SOLID Principles\nSOLID is an acronym for five design principles aimed at improving code quality:\n\n1. Single Responsibility Principle (SRP)\n\nA class should have only one reason to change.\nMeaning: Each class should only do one thing or handle one responsibility.\n\nExample:\nclass Invoice {\n    public void CalculateTotal() { /* calculation code */ }\n    public void PrintInvoice() { /* printing code */ } // Violates SRP\n}\nBetter to separate:\nclass InvoiceCalculator {\n    public void CalculateTotal() { /* calculation code */ }\n}\n \nclass InvoicePrinter {\n    public void PrintInvoice() { /* printing code */ }\n}\n\n2. Open/Closed Principle (OCP)\n\nSoftware entities (classes, modules, functions) should be open for extension but closed for modification.\nYou should be able to add new features without changing existing code.\n\nExample:\nabstract class Shape {\n    public abstract double Area();\n}\n \nclass Rectangle : Shape {\n    public double Width, Height;\n    public override double Area() =&gt; Width * Height;\n}\n \nclass Circle : Shape {\n    public double Radius;\n    public override double Area() =&gt; Math.PI * Radius * Radius;\n}\nYou can add new shapes without modifying existing ones.\n\n3. Liskov Substitution Principle (LSP)\n\nObjects of a superclass should be replaceable with objects of subclasses without affecting the correctness of the program.\n\nExample Violation:\nclass Bird {\n    public virtual void Fly() { }\n}\n \nclass Ostrich : Bird {\n    public override void Fly() {\n        throw new Exception(&quot;Ostriches can&#039;t fly!&quot;);\n    }\n}\nBetter to redesign so Ostrich is not forced to implement unsupported behavior.\n\n4. Interface Segregation Principle (ISP)\n\nClients should not be forced to depend on interfaces they do not use.\nSplit large interfaces into smaller, more specific ones.\n\nExample:\ninterface IWorker {\n    void Work();\n    void Eat();\n}\n \nclass Robot : IWorker {\n    public void Work() { /* working */ }\n    public void Eat() { throw new NotImplementedException(); } // Violation\n}\nBetter to split:\ninterface IWorkable {\n    void Work();\n}\n \ninterface IFeedable {\n    void Eat();\n}\n \nclass Robot : IWorkable {\n    public void Work() { /* working */ }\n}\n\n5. Dependency Inversion Principle (DIP)\n\nHigh-level modules should not depend on low-level modules; both should depend on abstractions.\nAbstractions should not depend on details; details should depend on abstractions.\n\nExample:\nInstead of:\nclass BackendDeveloper {\n    public void Develop() { /* backend code */ }\n}\n \nclass FrontendDeveloper {\n    public void Develop() { /* frontend code */ }\n}\n \nclass Project {\n    BackendDeveloper backend = new BackendDeveloper();\n    FrontendDeveloper frontend = new FrontendDeveloper();\n \n    public void DevelopProject() {\n        backend.Develop();\n        frontend.Develop();\n    }\n}\nUse abstraction:\ninterface IDeveloper {\n    void Develop();\n}\n \nclass BackendDeveloper : IDeveloper { public void Develop() { } }\nclass FrontendDeveloper : IDeveloper { public void Develop() { } }\n \nclass Project {\n    private IDeveloper _developer1;\n    private IDeveloper _developer2;\n \n    public Project(IDeveloper dev1, IDeveloper dev2) {\n        _developer1 = dev1;\n        _developer2 = dev2;\n    }\n \n    public void DevelopProject() {\n        _developer1.Develop();\n        _developer2.Develop();\n    }\n}\n\nPart 4: Dependency Injection (DI)\n\nWhat is Dependency Injection?\nDependency Injection is a design pattern where an object receives the objects it depends on, rather than creating them itself.\nAnalogy: Ordering coffee from a cafe instead of growing coffee beans yourself.\n\nTypes of Dependency Injection\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTypeDescriptionExample UsageConstructor InjectionDependencies passed via constructor parameterspublic Car(IEngine engine) { ... }Setter InjectionDependencies set via properties or setterscar.Engine = new DieselEngine();Interface InjectionDependencies injected via interface methodsvoid SetEngine(IEngine engine);\n\nBenefits of DI\n\nLoosely coupled code\nEasier testing (mock dependencies)\nClear dependency declaration\nEasier maintenance and flexibility\nSupports Inversion of Control (IoC)\n\n\nExamples\nConstructor Injection:\npublic interface IEngine {\n    void Start();\n}\n \npublic class DieselEngine : IEngine {\n    public void Start() { Console.WriteLine(&quot;Diesel engine started.&quot;); }\n}\n \npublic class Car {\n    private IEngine _engine;\n \n    public Car(IEngine engine) { _engine = engine; }\n \n    public void StartCar() { _engine.Start(); }\n}\n \n// Usage:\nIEngine engine = new DieselEngine();\nCar car = new Car(engine);\ncar.StartCar();\n\nSetter Injection:\npublic class Car {\n    private IEngine _engine;\n \n    public IEngine Engine {\n        set { _engine = value; }\n    }\n \n    public void StartCar() {\n        if (_engine == null) Console.WriteLine(&quot;Engine not set!&quot;);\n        else _engine.Start();\n    }\n}\n \n// Usage:\nCar car = new Car();\ncar.Engine = new DieselEngine();\ncar.StartCar();\n\nInterface Injection:\npublic interface IEngineSetter {\n    void SetEngine(IEngine engine);\n}\n \npublic class Car : IEngineSetter {\n    private IEngine _engine;\n \n    public void SetEngine(IEngine engine) {\n        _engine = engine;\n    }\n \n    public void StartCar() { _engine?.Start(); }\n}\n \n// Usage:\nCar car = new Car();\ncar.SetEngine(new DieselEngine());\ncar.StartCar();\n\nDI Frameworks &amp; Containers\n\nManual injection can be tedious.\nFrameworks automate dependency management.\nPopular .NET DI frameworks:\n\nMicrosoft.Extensions.DependencyInjection (built-in ASP.NET Core)\nAutofac\nNinject\nUnity\n\n\n\nExample in ASP.NET Core:\n// Startup.cs or Program.cs\nservices.AddTransient&lt;IEngine, DieselEngine&gt;();\nservices.AddTransient&lt;Car&gt;();\n \n// Usage in constructor\npublic class MyController {\n    private readonly Car _car;\n \n    public MyController(Car car) {\n        _car = car;\n    }\n \n    public void Drive() {\n        _car.StartCar();\n    }\n}\n\n🧪 Practice\n\nRefactor a tightly coupled class using constructor injection.\nCreate multiple implementations of a service interface and switch between them using DI.\nImplement setter injection and observe behavior when dependency is missing.\nExplore ASP.NET Core built-in DI container: register services and inject them in controllers.\n\n\n🙏 References\n\nSOLID Principles - GeeksforGeeks\nDependency Injection (DI) - GeeksforGeeks\nMicrosoft Docs: Dependency Injection in ASP.NET Core\nRefactoring Guru: Dependency Injection\n"},"01-Introductory-Sessions/Session07/Session07-Notes":{"slug":"01-Introductory-Sessions/Session07/Session07-Notes","filePath":"01-Introductory-Sessions/Session07/Session07 Notes.md","title":"Session07 Notes","links":[],"tags":[],"content":"Session 7: Dependency Injection, EF Core, and Abstract Classes vs Interfaces in OOP\n📝 Overview\nThis session covers key concepts of Dependency Injection (DI), Entity Framework Core (EF Core), and the differences between Abstract Classes and Interfaces in object-oriented programming.\n\n📚 Topics Covered\n✅ Dependency Injection (DI)\n\nWhat is DI and why it matters in OOP\nKey components: Service, Client, Interface, Injector\nAdvantages and disadvantages of DI\nTypes of DI: Constructor, Setter, Method, Interface injection\nRelationship to the Dependency Inversion Principle\n\n✅ Entity Framework Core (EF Core)\n\nCross-platform capabilities\nModeling with POCO classes and EDM\nQuerying using LINQ and raw SQL\nChange tracking and concurrency\nTransactions and caching\nConfiguration and migrations\n\n✅ Abstract Classes vs Interfaces\n\nDefining interfaces and abstract base classes\nCode reuse and shared functionality with abstract classes\nFlexibility and multiple inheritance with interfaces\nWhen to use interfaces, abstract classes, or a combination\nReal C# example demonstrating both\n\n\n📌 Notes\nDependency Injection (DI)\n\nDI reduces hardcoded dependencies by injecting required services into classes rather than creating them internally.\nPromotes loose coupling, better maintainability, and testability.\nKey players:\n\nService: Provides functionality\nClient: Uses the service\nInterface: Abstracts service implementation\nInjector: Injects service instances into clients\n\n\nDI supports the Dependency Inversion Principle by decoupling high-level modules from low-level implementations.\nCommon types:\n\nConstructor injection: Dependencies passed via constructor parameters\nSetter injection: Dependencies passed via public setter methods\nMethod injection: Dependencies passed through methods implementing an interface\nInterface injection: Client implements interface with a method to accept dependency\n\n\nBenefits: Easier mocking/testing, centralized config, modular development\nDrawbacks: Harder debugging, potential performance impact with reflection-based DI frameworks\n\nEntity Framework Core (EF Core)\n\nEF Core is a cross-platform ORM for .NET to interact with databases using .NET objects.\nSupports LINQ queries which translate to SQL behind the scenes.\nTracks changes to objects for efficient updates.\nUses optimistic concurrency control to avoid overwriting data accidentally.\nSupports transactions automatically and provides first-level caching.\nOffers configuration via conventions, annotations, or Fluent API.\nIncludes migration tools to evolve database schema alongside code changes.\n\nAbstract Classes vs Interfaces\n\nInterfaces define contracts without implementation, supporting multiple inheritance and maximum flexibility.\nAbstract classes allow shared code with some method implementations and force subclasses to implement abstract methods.\nAbstract classes cannot be multiply inherited in C# but reduce code duplication when shared behavior exists.\nUse interfaces when implementations differ widely or multiple inheritance is needed.\nUse abstract classes when shared logic reduces repetition.\nCombining both gives flexibility (interface for DI) and code reuse (abstract base class).\nExample provided demonstrates IService interface, BaseService abstract class with a Log() method, and concrete service classes overriding Execute().\n\n\n🧪 Practice\n\nImplement a small ASP.NET Core project demonstrating constructor-based DI.\nCreate POCO entities and perform CRUD operations using EF Core.\nDesign and implement an interface and abstract class hierarchy with shared functionality and test the differences.\nExplore swapping implementations using DI containers.\n\n\n🙏 References\n\nDependency Injection - GeeksforGeeks\nA Quick Intro to Dependency Injection - FreeCodeCamp\nEF Core Features - StackOverflow\n"},"02-Project-Based/Session00/Session00-Architecture":{"slug":"02-Project-Based/Session00/Session00-Architecture","filePath":"02-Project-Based/Session00/Session00 Architecture.md","title":"Session00 Architecture","links":[],"tags":[],"content":"Overview of Clean Architecture\nClean Architecture is a software design pattern that promotes separation of concerns, testability, and maintainability. It structures an application into layers, ensuring dependencies flow inwards (towards business logic) and that the core logic is independent of frameworks and external dependencies.\n\nClean Architecture Layers\nClean Architecture consists of four main layers:\n\nDomain Layer (Core Business Rules)\nApplication Layer (Use Cases)\nInfrastructure Layer (External Services &amp; Data Access)\nPresentation Layer (UI &amp; API)\n\n1. Domain Layer (Enterprise Business Rules)\n\n\nPurpose: Contains core business logic and rules that should be independent of frameworks and external systems.\n\n\nKey Components:\n\nEntities (Aggregates, Value Objects) → Represent business models.\nDomain Events → Events triggered by business logic.\nDomain Services → Logic that spans multiple entities.\n\n\n\nDependencies: No external dependencies (completely independent).\n\n\nExample:\npublic class Product\n{\n    public int Id { get; private set; }\n    public string Name { get; private set; }\n    public decimal Price { get; private set; }\n \n    public Product(string name, decimal price)\n    {\n        Name = name;\n        Price = price;\n    }\n}\n\n\n\n2. Application Layer (Use Cases &amp; Business Logic)\n\n\nPurpose: Implements application-specific business logic, coordinating workflows, and executing use cases.\n\n\nKey Components:\n\nUse Cases (Application Services) → Define what the application does.\nCommands &amp; Queries → For operations (CQRS pattern).\nDTOs (Data Transfer Objects) → Pass data without exposing domain models.\nInterfaces for Repositories &amp; Services → Abstract dependencies (repositories, external APIs).\n\n\n\nDependencies:\n\nCan reference Domain Layer.\nNo dependency on Infrastructure or Presentation layers.\n\n\n\nExample (Use Case):\npublic class CreateProductCommand\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n \npublic class ProductService\n{\n    private readonly IProductRepository _productRepository;\n    \n    public ProductService(IProductRepository productRepository)\n    {\n        _productRepository = productRepository;\n    }\n \n    public async Task&lt;int&gt; CreateProduct(CreateProductCommand command)\n    {\n        var product = new Product(command.Name, command.Price);\n        await _productRepository.AddAsync(product);\n        return product.Id;\n    }\n}\n\n\n\n3. Infrastructure Layer (Data &amp; External Services)\n\n\nPurpose: Provides implementations for repositories, external APIs, database access, logging, and file storage.\n\n\nKey Components:\n\nRepositories (EF Core, Dapper, etc.) → Implement database operations.\nExternal Service Integrations → Calls to third-party APIs.\nLogging, Email, File Storage → External services.\n\n\n\nDependencies:\n\nReferences Application Layer (implementing interfaces).\nNo direct reference to Presentation Layer.\n\n\n\nExample (EF Core Repository):\npublic class ProductRepository : IProductRepository\n{\n    private readonly ApplicationDbContext _context;\n \n    public ProductRepository(ApplicationDbContext context)\n    {\n        _context = context;\n    }\n \n    public async Task AddAsync(Product product)\n    {\n        _context.Products.Add(product);\n        await _context.SaveChangesAsync();\n    }\n}\n\n\n\n4. Presentation Layer (UI &amp; API)\n\n\nPurpose: Handles HTTP requests, user interactions, and returns responses.\n\n\nKey Components:\n\nControllers (Web API in ASP.NET Core) → Handle HTTP requests.\nViews (Razor Pages, React, Blazor, etc.) → UI rendering.\nDTO Mapping (AutoMapper, MediatR, etc.) → Maps domain models to response objects.\n\n\n\nDependencies:\n\nReferences Application Layer (calls use cases).\nShould not directly reference Infrastructure Layer.\n\n\n\nExample (Controller in ASP.NET Core):\n[ApiController]\n[Route(&quot;api/products&quot;)]\npublic class ProductController : ControllerBase\n{\n    private readonly ProductService _productService;\n \n    public ProductController(ProductService productService)\n    {\n        _productService = productService;\n    }\n \n    [HttpPost]\n    public async Task&lt;IActionResult&gt; CreateProduct([FromBody] CreateProductCommand command)\n    {\n        var productId = await _productService.CreateProduct(command);\n        return CreatedAtAction(nameof(CreateProduct), new { id = productId });\n    }\n}\n\n\n\nDependencies Flow\n\nPresentation Layer depends on Application Layer.\nApplication Layer depends on Domain Layer.\nInfrastructure Layer depends on Application Layer.\nDomain Layer has NO dependencies.\n\nThis ensures the business logic is central and not coupled to frameworks, databases, or UI.\n\nExample ASP.NET Core Clean Architecture Folder Structure\n/src\n  /Domain\n    /Entities\n    /ValueObjects\n    /DomainServices\n  /Application\n    /Interfaces\n    /Services\n    /DTOs\n    /UseCases\n  /Infrastructure\n    /Persistence\n      /Repositories\n    /ExternalServices\n  /Presentation\n    /Controllers\n    /Views (if MVC)\n    /ReactApp (if using React)\n\n\nBackend Project Structure\nSolution Name: MyApp\n📂 MyApp.sln (Solution file)\n1. Presentation Layer (📂 MyApp.WebAPI)\n\nProject Type: ASP .NET Core Web API - with default settings\nPurpose: Exposes the application via a web API.\n\n📂 MyApp.WebAPI\n\n📂 Controllers – Defines API endpoints.\n📂 Middlewares – Implements custom middleware (logging, exception handling).\n\nDependencies:\n\nProjects:\n\nApplication Project\nDomain Project\n\n\nPackages:\n\nAutoMapper\nMicrosoft.AspNetCore.Authentication.JwtBearer\nSystem.IdentityModel.Tokens.Jwt\nMicrosoft.EntityFrameworkCore.Design\nMicrosoft.EntityFrameworkCore.SqlServer\nMicrosoft.EntityFrameworkCore.Tools\nNewtonsoft.Json\n\n\n\n\n2. Application Layer (📂 MyApp.Application)\n\nProject Type: C# Class Library - with default settings\nPurpose: Contains the application logic, use cases, and service abstractions.\n\n📂 MyApp.Application\n\n📂 Interfaces – Defines services like IUserService, IOrderService, etc.\n📂 Services – Defines services like IUserService, IOrderService, etc.\n📂 DTOs – Data Transfer Objects for input/output models.\n📂 Mappers – Maps domain models to DTOs (using AutoMapper or manual mapping).\n📂 Validators – Contains validation rules using FluentValidation.\n\nDependencies:\n\nProjects\n\nDomain Project\n\n\nPackages:\n\nAutoMapper\nMicrosoft.Extensions.DependencyInjection\n\n\n\n\n3. Core Domain Layer (📂 MyApp.Domain)\n\nProject Type: C# Class Library - with default settings\nPurpose: Represents the core business logic and entities without dependencies on infrastructure or frameworks.\n\n📂 MyApp.Domain\n\n📂 Aggregates – Groups related entities following DDD principles.\n📂 Framework - Interfaces  – Contains domain-level abstractions like repository interfaces and entity interface.\n📂 Framework - Interfaces  – Repositories\n📂 Framework - Base\n📂 Enums – Defines domain-specific enumerations.\n📂 Factories\n\nDependencies:\n\nPackages:\n\nMicrosoft.Extensions.DependencyInjection\n\n\n\n\n4. Infrastructure Layer (📂 MyApp.Infrastructure)\n\nProject Type: C# Class Library - with default settings\nPurpose: Implements external dependencies such as databases, logging, APIs, and caching.\n\n📂 MyApp.Infrastructure\n\n📂 Framework - Base – Implements IRepository&lt;TEntity&gt; for data access.\n📂 Configurations – Stores EF Core entity configurations.\n📂 Services - Repositories\n📂 Migrations - Auto Created\nDB-Context\n\nDependencies:\n\nProjects:\n\nDomain Project\n\n\nPackages:\n\nMicrosoft.EntityFrameworkCore.SqlServer\nMicrosoft.EntityFrameworkCore.Design\nMicrosoft.EntityFrameworkCore.Proxies\nMicrosoft.EntityFrameworkCore.Tools\n\n\n\n\nAdditional Projects (Optional)\n\n📂 MyApp.Tests – Unit and integration tests.\n📂 MyApp.Shared – Shared utilities (cross-cutting concerns like constants, helpers).\n\nAcknowledgements\n\nChatGPT for snippet refinement and explanations\n"},"02-Project-Based/Session01/Session01-Additional-Info":{"slug":"02-Project-Based/Session01/Session01-Additional-Info","filePath":"02-Project-Based/Session01/Session01 Additional Info.md","title":"Session01 Additional Info","links":[],"tags":[],"content":"Choosing the right datatype for integer values, specially IDs (Chat GPT):\n1 Integer Data Types (int, short, long) in C# and SQL Server\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC# TypeSQL Server TypeSizeRangebyteTINYINT1 byte0 to 255shortSMALLINT2 bytes-32,768 to 32,767intINT4 bytes-2,147,483,648 to 2,147,483,647longBIGINT8 bytes-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n❗ Important Notes:\n\nThe ranges are the same in C# and SQL Server because both use the same underlying storage.\nSMALLINT and TINYINT save space, but be careful about hitting the limit.\nBIGINT is needed only if you expect billions of records.\n\n\n2 What to Use for User ID, Ticket ID, Gender ID? (Some examples)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFieldRecommended C# TypeSQL Server TypeWhy?UserIdint or longINT or BIGINTINT is usually enough unless expecting billions of users.TicketIdint or longINT or BIGINTUse BIGINT if expecting massive ticket volumes.GenderIdbyte or shortTINYINT or SMALLINTGender options are limited, so TINYINT is sufficient.CompanyIdintINTCompanies are limited, INT is fine.VehicleIdintINTUse INT, as vehicle count is manageable.Pricedecimal(18,2)DECIMAL(18,2)Avoid float/double due to rounding issues.\n\n3 Should I Use GUIDs for User IDs or Ticket IDs?\n\nUse GUID (UNIQUEIDENTIFIER) for IDs only if:\n\nData is distributed across multiple databases.\nSecurity is critical (e.g., preventing sequential guessing of IDs).\n\n\nOtherwise, stick with int or long for performance.\n\n📌 Example in C# (EF Core Model):\npublic class Ticket\n{\n    public int TicketId { get; set; }  // Primary key\n    public int UserId { get; set; }    // Foreign key\n    public decimal Price { get; set; } // Use decimal for money\n    public DateTime PurchaseDate { get; set; }\n}\n📌 Fluent API (SQL Mapping)\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    modelBuilder.Entity&lt;Ticket&gt;()\n        .Property(t =&gt; t.Price)\n        .HasColumnType(&quot;DECIMAL(18,2)&quot;);\n}\n**required keyword (Chat GPT) :\nC# IntelliSense suggests adding required to string properties because of nullable reference types (NRT) introduced in C# 8.0+.\n2 What Does required Do?\n\nrequired forces initialization of the property when creating an object.\nIt is not a data annotation (like [Required] in EF Core), but a C# keyword that affects compile-time checks.\n\n📌 Example Without required\npublic class User\n{\n    public string Name { get; set; }  // Warning: &quot;Non-nullable property &#039;Name&#039; is uninitialized&quot;\n}\n🔴 Problem: The compiler warns that Name is not initialized.\n✅ Fix: Add required or initialize the property.\n📌 Example With required\npublic class User\n{\n    public required string Name { get; set; }  // No warning\n}\n✅ Effect: You must provide Name when creating a User object.\nvar user = new User { Name = &quot;Mehrdad&quot; }; // ✅ Works\nvar invalidUser = new User(); // ❌ Compilation Error: Name is required\nA note about strings in C# (Chat GPT) :\nstring is nullable in C#, but in nullable reference types (C# 8+), string is treated as non-nullable unless explicitly marked string?.\n\nstring → Default behavior (non-nullable by default in nullable context).\nstring? → Explicitly nullable.\n\nWhy virtual navigation properties? (Chat GPT):\n\nIf you mark a navigation property as virtual, EF Core creates a proxy class at runtime that overrides the property and loads related data only when accessed.\nThis is called Lazy Loading, meaning data is not fetched until needed.\nIf you don’t mark it as virtual, you must load relationships using .Include() (Eager Loading).\n\nWhat Type Should Navigation Properties Be?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScenarioRecommended TypeWhy?Single reference (e.g., Ticket → Transportation)virtual TransportationRepresents a one-to-one or many-to-one relationship.Collection of related entities (e.g., Transportation → Tickets)virtual ICollection&lt;Ticket&gt;Best for one-to-many relationships, supports lazy loading.Alternative for collectionsvirtual List&lt;Ticket&gt;Works the same, but EF prefers ICollection&lt;T&gt;.Using IEnumerable&lt;T&gt;❌ AvoidEF does not recognize IEnumerable&lt;T&gt; for navigation properties.\nOne Scenario to look after if using lazy loading:\nWhat is the N+1 Query Problem?\nThe N+1 query problem happens when EF Core makes too many separate database queries instead of loading data efficiently.\nExample Scenario\nLet’s say you have 100 tickets, and each ticket has a related Transportation entity.\nYou run this code:\nvar tickets = context.Tickets.ToList(); // Loads all tickets foreach (var ticket in tickets) \n{     \n\tConsole.WriteLine(ticket.Transportation.Name); // Lazy loads Transportation for each ticket \n}\nWhat Happens?\n\n1 Query: EF Core first loads all Tickets.\nN Queries: Then, for each Ticket, EF Core makes a separate query to fetch Transportation (so 100 additional queries).\nTotal Queries: 1 + 100 = 101 queries! 🚨 Bad performance!\n\n"},"02-Project-Based/Session01/Session01-Backend":{"slug":"02-Project-Based/Session01/Session01-Backend","filePath":"02-Project-Based/Session01/Session01 Backend.md","title":"Session01 Backend","links":["tags/","02-Project-Based/Session01/Session01-Additional-Info"],"tags":[""],"content":"🛠️ Task Checklist\nPreparation\nEF Core Code First\n\n Watch this video\n\n🚧 Branching\n\n Create the develop branch\n Create the feature/domain-entities branch based on develop\n\nIEntity.cs\n\n Create the IEntity interface\n📂 Suggested Folder: Domain/Framework/Interfaces\n\npublic interface IEntity&lt;TKey&gt;\n{\n    public TKey Id { get; set; }\n}\nEntity.cs\n\n Create the Entity class\n📂 Suggested Folder: Domain/Framework/Base\n\npublic class Entity&lt;TKey&gt; : IEntity&lt;TKey&gt;\n{\n    public TKey Id{ get; set; }\n}\nCreate Entities\n📂 Suggested Folder: Domain/Aggregates/[RelatedFolder]\nEntities represent the core business objects in our domain model. By defining them explicitly and consistently, we ensure that:\n\nOur domain logic remains clear and maintainable.\nWe follow Domain-Driven Design (DDD) principles, keeping the business rules close to the data they govern.\nAll developers have a standardized structure to follow, improving code readability and collaboration.\n\nGuidelines\n\nBase Class\n\nAll entities (except join tables) must inherit from Entity and explicitly specify the datatype of their Id.\n\n\nProperties\n\nUse the latest version of the ERD to define properties and relationships.\n\n\nReference Project\n\nFor implementation details, you can refer to this project:\n👉 AlibabaClone-Backend Domain Layer\n\n\nERD Reference\n\nLatest ERD available here:\n👉 Project ERD One Example:\n\n\n\nExample\npublic class Account : Entity&lt;long&gt;\n{\n    public required string PhoneNumber { get; set; }\n    public required string Password { set; get; }\n    public string? Email { get; set; }\n    public long? PersonId { get; set; }\n    //...\n}\nAdd Navigation Properties\nNavigation properties in Entity Framework Core (EF Core) represent relationships between entities. They allow you to navigate (follow) the relationships between different tables using C# objects instead of writing SQL joins manually.\nAdd the needed navigation properties inside entities\n\n Figure out what navigation properties are needed based on the ERD, and use this project as a reference:\ngithub.com/MehrdadShirvani/AlibabaClone-Backend/tree/develop/AlibabaClone.Domain/Aggregates\n Don’t forget to mark all the navigation properties as virtual\n\n🔹 Examples of Defining Navigation Properties\n\nThese are just examples, and not how the project should look like\n\n🔹 One-to-Many Example\nA Buyer can have multiple Tickets, but each Ticket belongs to one Buyer.\npublic class Buyer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n \n    // Navigation Property (One Buyer → Many Tickets)\n    public virtual ICollection&lt;Ticket&gt; Tickets { get; set; } = new List&lt;Ticket&gt;();\n}\n \npublic class Ticket\n{\n    public int Id { get; set; }\n    public int BuyerId { get; set; }\n \n    // Navigation Property (Many Tickets → One Buyer)\n    public virtual Buyer Buyer { get; set; }\n}\n🔹 One-to-One Example\nA Ticket can have only one Transaction, and a Transaction belongs to exactly one Ticket.\npublic class Ticket\n{\n    public int Id { get; set; }\n \n    // One-to-One Navigation Property\n    public virtual Transaction Transaction { get; set; }\n}\n \npublic class Transaction\n{\n    public int Id { get; set; }\n    public int TicketId { get; set; }\n \n    // One-to-One Navigation Property\n    public virtual Ticket Ticket { get; set; }\n}\n🔹 Many-to-Many Example\nA Buyer can buy many Tickets, and each Ticket can be bought by many Buyers (if resale is allowed).\npublic class Buyer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n \n    // Many-to-Many Navigation Property\n    public virtual ICollection&lt;Ticket&gt; Tickets { get; set; } = new List&lt;Ticket&gt;();\n}\n \npublic class Ticket\n{\n    public int Id { get; set; }\n \n    // Many-to-Many Navigation Property\n    public virtual ICollection&lt;Buyer&gt; Buyers { get; set; } = new List&lt;Buyer&gt;();\n}\nAdd Packages to Infrastructure Project\n\n Add Microsoft.EntityFrameworkCore.Proxies to Infrastructure Project\n\n🚧 Merge\n\n Create a PR and merge the current branch with develop\n\n🧠 Hints &amp; Notes\n\nMark navigation properties virtual\n\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References\nSession01 Additional Info"},"02-Project-Based/Session02/Session02-Additional-Info":{"slug":"02-Project-Based/Session02/Session02-Additional-Info","filePath":"02-Project-Based/Session02/Session02 Additional Info.md","title":"Session02 Additional Info","links":[],"tags":[],"content":"Cardinality\nCardinality in Database Relationships\nCardinality in databases refers to the number of relationships between records in two tables. It defines how many instances of one entity can be associated with instances of another entity. Cardinality is a crucial concept in database design because it ensures data integrity and optimizes query performance.\n\nTypes of Cardinality\n\n\nOne-to-One (1:1)\n\nEach record in Table A is related to exactly one record in Table B, and vice versa.\nExample: A person has one passport, and a passport belongs to only one person.\nImplementation: Typically enforced with a unique foreign key.\n\n\n\nOne-to-Many (1:M)\n\nA record in Table A can have multiple related records in Table B, but a record in Table B is linked to only one record in Table A.\nExample: A customer can place multiple orders, but each order is placed by only one customer.\nImplementation: A foreign key in Table B referring to the primary key in Table A.\n\n\n\nMany-to-Many (M:M)\n\nMultiple records in Table A can relate to multiple records in Table B.\nExample: Students enroll in multiple courses, and each course has multiple students.\nImplementation: A junction (bridge) table with foreign keys referencing both tables.\n\n\n\n\nCardinality Constraints\nCardinality can be further specified using minimum and maximum constraints:\n\n(0,1): Optional One → A record may or may not be related.\n(1,1): Mandatory One → A record must always be related to exactly one record.\n(0,N): Optional Many → A record may have many related records or none.\n(1,N): Mandatory Many → A record must have at least one related record.\n\n\nPractical Example\nConsider a database with Students and Courses:\n\nOne-to-Many: A teacher teaches multiple courses, but each course has only one teacher.\nMany-to-Many: Students enroll in multiple courses, and courses have multiple students. This is implemented using a StudentCourses junction table.\n\nUsing GUIDs That Should Be Auto-Generated\nGUIDs (Globally Unique Identifiers) can be used as primary keys in your entities. In EF Core, you can configure them to auto-generate when a new entity is created.\nExample Entity Using GUID\npublic class SomeEntity\n{\n    public Guid Id { get; set; } = Guid.NewGuid(); // Auto-generate GUID\n    public string Name { get; set; }\n}\nConfiguration for GUID\nWhen configuring an entity with a GUID as the primary key, you don’t need a specific setup in the configuration, but you can enforce that the Id is generated on addition.\nbuilder.Property(e =&gt; e.Id)\n    .ValueGeneratedOnAdd()\n    .HasDefaultValueSql(&quot;NEWSEQUENTIALID()&quot;); // Optionally use NEWID() for random GUID\nHow It Works\n\nGuid.NewGuid() generates a new GUID when a new entity instance is created.\nDatabase: If you use NEWSEQUENTIALID() in SQL Server, it generates sequential GUIDs, which can improve indexing performance.\n\nExample Configuration in DbContext\nHere’s how you might define an entity with GUIDs in your DbContext:\npublic class ApplicationDbContext : DbContext\n{\n    public DbSet&lt;SomeEntity&gt; SomeEntities { get; set; }\n \n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity&lt;SomeEntity&gt;(builder =&gt;\n        {\n            builder.HasKey(e =&gt; e.Id);\n            builder.Property(e =&gt; e.Id)\n                .ValueGeneratedOnAdd()\n                .HasDefaultValueSql(&quot;NEWSEQUENTIALID()&quot;);\n        });\n    }\n}\n\nAccountRole\nThe accountRole table is a many-to-many join table with only two foreign keys (AccountId, RoleId) and no extra fields. Since it’s just linking Accounts and Roles, you might not need a repository for it. Let’s explore the best approach.\nOption 1: No Separate Repository (Preferred)\nSince EF Core automatically manages many-to-many relationships using DbSet&lt;Account&gt; and DbSet&lt;Role&gt;, you usually don’t need a repository for the join table.\nYou can simply work with navigation properties in AccountRepository and RoleRepository:\nExample: Adding a Role to an Account\npublic async Task AssignRoleToAccountAsync(int accountId, int roleId)\n{\n    var account = await _context.Accounts\n        .Include(a =&gt; a.Roles) // Load roles\n        .FirstOrDefaultAsync(a =&gt; a.Id == accountId);\n \n    var role = await _context.Roles.FindAsync(roleId);\n \n    if (account != null &amp;&amp; role != null)\n    {\n        account.Roles.Add(role);\n        await _context.SaveChangesAsync();\n    }\n}\nEF Core automatically inserts into the join table when you modify the Roles collection.\n\nOption 2: Create a Repository for the Join Table (If Needed)\nIf you need direct control over the join table (e.g., custom queries, logging, performance tuning), then a repository may be useful.\nInterface for AccountRole Repository\nSince the join table doesn’t behave like a typical entity, we can define a custom repository:\npublic interface IAccountRoleRepository\n{\n    Task AddAsync(int accountId, int roleId);\n    Task RemoveAsync(int accountId, int roleId);\n    Task&lt;bool&gt; ExistsAsync(int accountId, int roleId);\n}\nImplementation\npublic class AccountRoleRepository : IAccountRoleRepository\n{\n    private readonly AppDbContext _context;\n \n    public AccountRoleRepository(AppDbContext context)\n    {\n        _context = context;\n    }\n \n    public async Task AddAsync(int accountId, int roleId)\n    {\n        var accountRole = new AccountRole { AccountId = accountId, RoleId = roleId };\n        _context.AccountRoles.Add(accountRole);\n        await _context.SaveChangesAsync();\n    }\n \n    public async Task RemoveAsync(int accountId, int roleId)\n    {\n        var accountRole = await _context.AccountRoles\n            .FirstOrDefaultAsync(ar =&gt; ar.AccountId == accountId &amp;&amp; ar.RoleId == roleId);\n \n        if (accountRole != null)\n        {\n            _context.AccountRoles.Remove(accountRole);\n            await _context.SaveChangesAsync();\n        }\n    }\n \n    public async Task&lt;bool&gt; ExistsAsync(int accountId, int roleId)\n    {\n        return await _context.AccountRoles\n            .AnyAsync(ar =&gt; ar.AccountId == accountId &amp;&amp; ar.RoleId == roleId);\n    }\n}\n\nWhen Should You Use a Repository for the Join Table?\n✔ If you need to execute custom queries (e.g., checking if an account has a role).\n✔ If you need to add business logic when assigning/removing roles.\n✔ If the join table will have extra fields (e.g., DateAssigned, IsActive).\n🚀 If the join table is purely a linking table, let EF Core handle it automatically through navigation properties. Otherwise, use a repository for more control.\n"},"02-Project-Based/Session02/Session02-Backend":{"slug":"02-Project-Based/Session02/Session02-Backend","filePath":"02-Project-Based/Session02/Session02 Backend.md","title":"Session02 Backend","links":["02-Project-Based/Session02/Session02-Additional-Info"],"tags":[],"content":"🛠️ Task Checklist\n🚧 Branching (Configurations)\n\n Create the feature/entity-configurations branch based on develop\n\nPreparation\n\n Read the documentation:\n\nCreate configuration classes\n📂 Suggested Folder: Infrastructure/Configurations\n\n Create the classes with this format: [Entity]Configutaion.cs\n The class should implement the IEntityTypeConfiguration&lt;[Entity]&gt;\n\nWhere Should You Place Configuration Files?\n✅ Best Practice: Place all configuration files in the Infrastructure layer.\nReason:\n\nThe Domain layer should be clean (only entities, no database-related logic).\nThe Infrastructure layer handles database interactions, so configurations belong here.\n\nUse this as a reference:\nreference\nExplanations and Details\nHow to Define Keys (Primary Keys &amp; Identity)\nYou don’t need to explicitly define the primary key (PK) if you follow EF Core conventions (Id or EntityNameId). However, if you want to be explicit:\npublic class TicketConfiguration : IEntityTypeConfiguration&lt;Ticket&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Ticket&gt; builder)\n    {\n        builder.HasKey(t =&gt; t.Id); // Explicitly defining PK (optional)\n \n        builder.Property(t =&gt; t.Id)\n               .ValueGeneratedOnAdd(); // Sets Identity (auto-increment)\n    }\n}\n\n🛑 NOTE: If you’re using a GUID as the ID, you might need .ValueGeneratedNever() instead.\n\n\nHow to Define Foreign Keys?\nUse HasOne() and WithMany() for one-to-many relationships.\npublic class TicketConfiguration : IEntityTypeConfiguration&lt;Ticket&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Ticket&gt; builder)\n    {\n        builder.HasKey(t =&gt; t.Id);\n \n        // Foreign Key - Ticket to Transportation\n        builder.HasOne(t =&gt; t.Transportation) \n               .WithMany(tr =&gt; tr.Tickets)   \n               .HasForeignKey(t =&gt; t.TransportationId)\n               .OnDelete(DeleteBehavior.Restrict); // Optional: No cascade delete\n    }\n}\n\nHow to Introduce Navigation Properties with Different Names?\nIf your navigation property doesn’t match the entity name, you should explicitly specify it using HasOne() and WithMany().\nExample: Ticket has a Buyer (which is an Account)\nbuilder.HasOne(t =&gt; t.Buyer)  // Navigation property (Ticket → Account)\n       .WithMany(a =&gt; a.TicketsBought) // Corresponding collection in Account\n       .HasForeignKey(t =&gt; t.BuyerId);\n\nTip: If your navigation property names don’t match table names, always define them explicitly in the Fluent API.\n\n\nHow to Configure Column Types? (nvarchar, date, etc.)\nYou can manually specify column types using .HasColumnType().\nAll Strings Should Be nvarchar with Specific Lengths\nbuilder.Property(t =&gt; t.TicketNumber)\n       .IsRequired()\n       .HasMaxLength(20) // Limits nvarchar length\n       .HasColumnType(&quot;nvarchar(20)&quot;);\nStore Some DateTime Fields as SQL DATE Instead of DATETIME2\nbuilder.Property(t =&gt; t.PurchaseDate)\n       .HasColumnType(&quot;date&quot;);  // Instead of default &quot;datetime2&quot;\n\nHow to Define Constraints? (Not Null, Length, etc.)\nUse .IsRequired() for NOT NULL and .HasMaxLength() for length constraints.\nExample: Ticket Number Must Be Unique &amp; Required\nbuilder.Property(t =&gt; t.TicketNumber)\n       .IsRequired() // NOT NULL\n       .HasMaxLength(20);\n \nbuilder.HasIndex(t =&gt; t.TicketNumber)\n       .IsUnique();  // Unique constraint\n\nJoin Tables with Multiple IDs\nIn many-to-many relationships, a join table is created to link two entities. This join table typically contains foreign keys referencing the primary keys of the two entities involved in the relationship.\nSuppose we have two entities, Student and Course, and we want to create a many-to-many relationship between them. We’ll create a join table called StudentCourses.\nEntities\npublic class Student : Entity&lt;long&gt;\n{\n    public required string Name { get; set; }\n    public virtual ICollection&lt;StudentCourse&gt; StudentCourses { get; set; }\n}\n \npublic class Course : Entity&lt;long&gt;\n{\n    public required string Title { get; set; }\n    public virtual ICollection&lt;StudentCourse&gt; StudentCourses { get; set; }\n}\n \npublic class StudentCourse\n{\n    public long StudentId { get; set; }\n    public virtual Student Student { get; set; }\n \n    public long CourseId { get; set; }\n    public virtual Course Course { get; set; }\n}\nConfiguration for Join Table\nYou would configure the join table using the Fluent API:\npublic class StudentCourseConfiguration : IEntityTypeConfiguration&lt;StudentCourse&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;StudentCourse&gt; builder)\n    {\n        // Composite Primary Key\n        builder.HasKey(sc =&gt; new { sc.StudentId, sc.CourseId });\n \n        // Foreign Key Relationships\n        builder.HasOne(sc =&gt; sc.Student)\n            .WithMany(s =&gt; s.StudentCourses)\n            .HasForeignKey(sc =&gt; sc.StudentId);\n \n        builder.HasOne(sc =&gt; sc.Course)\n            .WithMany(c =&gt; c.StudentCourses)\n            .HasForeignKey(sc =&gt; sc.CourseId);\n    }\n}\nFinal Configuration File Example (TicketConfiguration.cs)\nHere’s an example of a configuration file:\npublic class TicketConfiguration : IEntityTypeConfiguration&lt;Ticket&gt;\n{\n    public void Configure(EntityTypeBuilder&lt;Ticket&gt; builder)\n    {\n        builder.HasKey(t =&gt; t.Id);\n        builder.Property(a =&gt; a.Id)\n            .ValueGeneratedOnAdd();\n \n        builder.Property(t =&gt; t.TicketOrderId)\n            .IsRequired();\n \n        builder.Property(t =&gt; t.SeatId)\n            .IsRequired();\n \n        builder.Property(t =&gt; t.TravelerId)\n            .IsRequired();\n \n        builder.Property(t =&gt; t.CreatedAt)\n            .IsRequired();\n \n        builder.Property(t =&gt; t.CanceledAt)\n            .IsRequired(false);\n \n        builder.Property(t =&gt; t.CompanionId)\n            .IsRequired(false);\n \n        builder.Property(t =&gt; t.TicketStatusId)\n            .IsRequired();\n \n        builder.Property(t =&gt; t.SerialNumber)\n            .IsRequired()\n            .HasMaxLength(50)\n            .IsUnicode(false);\n        builder.HasIndex(x =&gt; x.SerialNumber).IsUnique();\n \n \n        builder.Property(t =&gt; t.Description)\n            .HasMaxLength(200)\n            .IsUnicode(false);\n \n        // Relationships\n        builder.HasOne(t =&gt; t.TicketOrder)\n            .WithMany(t =&gt; t.Tickets)\n            .HasForeignKey(t =&gt; t.TicketOrderId)\n            .OnDelete(DeleteBehavior.Restrict);\n \n        builder.HasOne(t =&gt; t.Seat)\n            .WithMany(s =&gt; s.Tickets)\n            .HasForeignKey(t =&gt; t.SeatId)\n            .OnDelete(DeleteBehavior.Restrict);\n \n        builder.HasOne(t =&gt; t.Traveler)\n            .WithMany(p =&gt; p.TraveledTickets)\n            .HasForeignKey(t =&gt; t.TravelerId)\n            .OnDelete(DeleteBehavior.Restrict);\n \n        builder.HasOne(t =&gt; t.Companion)\n            .WithMany()\n            .HasForeignKey(t =&gt; t.CompanionId)\n            .OnDelete(DeleteBehavior.Restrict);\n \n        builder.HasOne(t =&gt; t.TicketStatus)\n            .WithMany()\n            .HasForeignKey(t =&gt; t.TicketStatusId)\n            .OnDelete(DeleteBehavior.Restrict);\n    }\n}\n🚧  Merge\n\n Create a PR and merge the current branch with develop\n\n🚧 Branching (Application DBContext and Connection String Configurations)\nPreparation\n\n Read the documentation:\n\nBranching\n\n Create the feature/setup-dbContext branch based on develop\n\nDatabase Context\n📂 Suggested Folder: `Infrastructure/ApplicationDbContext.cs\n\n Create ApplicationDBContext\n\n Inherits DbContext\n Create the constructor like the code below\n Add the necessary DbSets\n Override OnModelCreating and OnConfiguring as below\n\n\n\npublic class ApplicationDBContext : DbContext\n{\n    public ApplicationDBContext(DbContextOptions&lt;ApplicationDBContext&gt; options) : base(options)\n    {\n \n    }\n \n    public DbSet&lt;Account&gt; Accounts { get; set; }\n    public DbSet&lt;AccountRole&gt; AccountRoles { get; set; }\n    public DbSet&lt;Gender&gt; Genders{ get; set; }\n    public DbSet&lt;BankAccountDetail&gt; BankAccountDetails{ get; set; }\n    public DbSet&lt;Person&gt; People { get; set; }\n    public DbSet&lt;Role&gt; Roles { get; set; }\n \n    public DbSet&lt;Company&gt; Companies { get; set; }\n \n    public DbSet&lt;City&gt; Cities { get; set; }\n    public DbSet&lt;Location&gt; Locations { get; set; }\n    public DbSet&lt;LocationType&gt; LocationTypes{ get; set; }\n \n    public DbSet&lt;Transaction&gt; Transactions { get; set; }\n    public DbSet&lt;Coupon&gt; Coupons{ get; set; }\n    public DbSet&lt;TransactionType&gt; TransactionTypes { get; set; }\n \n    public DbSet&lt;Ticket&gt; Tickets { get; set; }\n    public DbSet&lt;TicketOrder&gt; TicketOrders { get; set; }\n    public DbSet&lt;TicketStatus&gt; TicketStatuses { get; set; }\n    public DbSet&lt;Transportation&gt; Transportations { get; set; }\n \n    public DbSet&lt;Seat&gt; Seats { get; set; }\n    public DbSet&lt;Vehicle&gt; Vehicles { get; set; }\n    public DbSet&lt;VehicleType&gt; VehicleTypes { get; set; }\n \n \n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.UseCollation(&quot;Persian_100_CI_AI&quot;);\n        modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationDBContext).Assembly);\n        base.OnModelCreating(modelBuilder);\n    }\n \n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        optionsBuilder.UseLazyLoadingProxies();\n    }\n}\n\nConfiguring the Database in ASP.NET Core\n📌 Connection String\n\n Modify appsettings.json and add the following.\n Adjust the Connection String to meet your needs\n\nOption 1:\n{\n  &quot;ConnectionStrings&quot;: {\n  &quot;DefaultConnection&quot;: &quot;Server=YOUR_SERVER;Database=YourDb;User Id=USERNAME;Password=PASSWORD;TrustServerCertificate=True;&quot;\n  }\n}\nOption 2:\n{\n  &quot;ConnectionStrings&quot;: {\n  &quot;DefaultConnection&quot;: &quot;Server=YOUR_SERVER;Database=YourDb;Integrated Security=True;TrustServerCertificate=True;&quot;\n\t}\n}\n\n Put this appsettings.json in gitignore\n\nRegistering EF Core in Program.cs\n\n Modify Program.cs\n\nusing Infrastructure.Persistence;\nusing Microsoft.EntityFrameworkCore;\n \nvar builder = WebApplication.CreateBuilder(args);\n \nbuilder.Services.AddDbContext&lt;AppDbContext&gt;(options =&gt;\n    options.UseSqlServer(builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;)));\n \nvar app = builder.Build();\napp.Run();\n🚧  Merge\n\n Create a PR and merge the current branch with develop\n\n\n🚧Branching (Migrations and Database Setup)\n\n Create the feature/migrations branch based on develop\n\nUsing Package Manager Console\n\n Make sure to set the project to Infrastructure\n Make sure you have installed Microsoft.EntityFrameworkCore.Tools\n Run the following command\n\nAdd-Migration InitialCreate\n\n\n In case of succus:\n\nUpdate-Database\n\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References\nSession02 Additional Info"},"02-Project-Based/Session03/Session03-Additional-Info":{"slug":"02-Project-Based/Session03/Session03-Additional-Info","filePath":"02-Project-Based/Session03/Session03 Additional Info.md","title":"Session03 Additional Info","links":[],"tags":[],"content":"Introduction to Repository Pattern (Chat GPT):\nThe Repository Pattern in ASP.NET Core is a design pattern used to separate business logic from data access logic by providing an abstraction layer over database operations. This pattern improves maintainability, testability, and flexibility in applications by encapsulating database operations in dedicated repository classes.\n\nWhy Use the Repository Pattern?\nPros:\n\nAbstraction from ORM (Entity Framework Core)\n\nPrevents direct dependency on EF Core, making it easier to swap out the data access layer in the future.\n\n\nBetter Code Organization\n\nSeparates concerns by keeping data logic in repositories and business logic in services/controllers.\n\n\nImproved Testability\n\nMakes it easier to mock repositories in unit tests.\n\n\nEncapsulation of Queries\n\nCommon queries can be abstracted, reducing repetition.\n\n\nCentralized Data Access Logic\n\nEnsures a single location for handling CRUD operations.\n\n\n\n\nComparison: Repository Pattern vs. Direct DbSet Operations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatureUsing Repository PatternUsing DbSet Directly in ControllersSeparation of Concerns✅ Maintains separation❌ Business and data access logic mixedTestability✅ Easy to mock and test❌ Harder to mock DbContextCode Reusability✅ Common operations are encapsulated❌ Repetitive DbSet callsFlexibility✅ Can switch database providers easily❌ Tightly coupled to EF Core\n\nIntroduction to Unit of Work Pattern  (Chat GPT):\nWhat is the Unit of Work Pattern?\nThe Unit of Work (UoW) pattern is a centralized mechanism to manage database transactions and ensure that multiple repository operations are treated as a single unit of execution. It acts as a wrapper around multiple repositories to coordinate their changes and commit them in one go.\n\nAdvantages of Unit of Work\n1. Single Transaction for Multiple Operations\n\nIf you’re performing multiple database operations across different repositories, Unit of Work ensures atomicity.\nIf one operation fails, everything is rolled back (when using explicit transactions).\n\n2. Better Performance\n\nWithout UoW: Every repository would call SaveChangesAsync() separately, causing multiple round trips to the database.\nWith UoW: All changes are saved at once, reducing the number of database calls.\n\n3. Maintains Consistency\n\nWhen multiple repositories modify related entities, UoW ensures that all changes are either committed or discarded together.\n\n4. Improves Testability\n\nUnit of Work allows you to mock database changes and write unit tests efficiently without worrying about inconsistent data states.\n\n5. Prevents Partial Updates\n\nIf multiple repositories handle different entities in the same operation, calling SaveChangesAsync() in individual repositories could lead to partial updates if one operation succeeds and another fails.\n\n\nWhy Should SaveChanges() NOT Be in the Repository?\n1. Each Repository Should Not Control Transactions\nIf each repository calls SaveChangesAsync(), you lose control over transactions.\nExample Problem (Without UoW)\nImagine you have two repositories: CustomerRepository and OrderRepository.\nIf you try to add a customer and add an order separately, each calling SaveChangesAsync():\nvar customer = new Customer { Name = &quot;John Doe&quot; };\nawait _customerRepository.AddAsync(customer);\nawait _customerRepository.SaveChangesAsync(); // ❌ First database call\n \nvar order = new Order { CustomerId = customer.Id, TotalAmount = 100 };\nawait _orderRepository.AddAsync(order);\nawait _orderRepository.SaveChangesAsync(); // ❌ Second database call\nWhat happens if the second SaveChangesAsync() fails?\n\nThe customer has already been saved, but the order is missing.\nYour database is left in an inconsistent state!\n\n2. Database Round Trips (Performance Issue)\nIf each repository calls SaveChangesAsync(), you end up with multiple database calls instead of batching them into a single transaction.\nawait _customerRepository.SaveChangesAsync(); // ❌ DB call\nawait _orderRepository.SaveChangesAsync(); // ❌ Another DB call\nUsing Unit of Work, all changes can be saved in one go:\nawait _unitOfWork.SaveChangesAsync(); // ✅ One database call\nThis reduces network latency and improves database performance.\n3. Promotes Separation of Concerns\n\nRepositories should focus on CRUD operations (data retrieval and manipulation).\nUnit of Work should manage transactions.\nThis makes the code cleaner and easier to maintain.\n\n\nKey Takeaways\n✔ Unit of Work ensures all database operations are part of a single transaction.\n✔ Repositories should NOT call SaveChangesAsync() to avoid multiple transactions.\n✔ EF Core tracks changes, so calling SaveChangesAsync() once is enough.\n✔ Using UoW improves performance, consistency, and maintainability."},"02-Project-Based/Session03/Session03-Backend":{"slug":"02-Project-Based/Session03/Session03-Backend","filePath":"02-Project-Based/Session03/Session03 Backend.md","title":"Session03 Backend","links":["02-Project-Based/Session03/Session03-Additional-Info"],"tags":[],"content":"🛠️ Task Checklist\nRepository Pattern Preparation\n\n Watch video 1 (Brief Introduction &amp; video 2 (More Detailed Introduction)\n\nPurpose:\nMeditates between the domain and data mapping layers, acting like an in-memory collection of domain objects\nBenefits\n\nMinimizes duplicate query logic\nDecouples your application from persistence frameworks\nPromotes testability\n\n\nRepository should not have methods like Update and Save\n\nUnit of Work Preparation\nKeeps track of changes and coordinates the writings and savings\nImplementation:\n\n Watch video\n\n🚧Branching (Implementing Repository Pattern)\n\n Create the feature/repositories branch based on develop\n\nCreating IRepository in Domain\n\n Create the interface and add the following code\n📂 Suggested Folder: Domain/Framework/Interfaces/Respositories\n\npublic interface IRepository&lt;T_Entity, U_PrimaryKey&gt; where T_Entity : class\n{\n    Task&lt;T_Entity?&gt; GetByIdAsync(U_PrimaryKey id); \n    Task&lt;IEnumerable&lt;T_Entity&gt;&gt; GetAllAsync();\n    Task&lt;IEnumerable&lt;T_Entity&gt;&gt; FindAsync(Expression&lt;Func&lt;T_Entity, bool&gt;&gt; predicate);\n    Task AddAsync(T_Entity entity);\n    void Update(T_Entity entity);\n    void Remove(T_Entity entity);\n}\nCreating a class implementing IRepository\n\n create a class named BaseRepository or Repository (choose one) in Infrastructure and implement IRepository\n\n📂 Suggested Folder: Infrastructure/Framework/Base\n\n provide method definitions for the methods\n\npublic class BaseRepository&lt;K_DbContext, T_Entity, U_PrimaryKey&gt; : IRepository&lt;T_Entity, U_PrimaryKey&gt;\n                                                                      where T_Entity : class\n                                                                      where K_DbContext : DbContext\n{\n    public virtual K_DbContext DbContext { get; set; }\n    public virtual DbSet&lt;T_Entity&gt; DBSet{ get; set; }\n    \n    public BaseRepository(K_DbContext dbContext)\n    {\n        DbContext = dbContext;\n        DBSet = dbContext.Set&lt;T_Entity&gt;();\n    }\n    \n    public async Task AddAsync(T_Entity entity)\n    {\n        await DBSet.AddAsync(entity);\n    }\n    \n    public async Task&lt;T_Entity?&gt; GetByIdAsync(U_PrimaryKey id)\n    {\n        return await DBSet.FindAsync(id);\n    }\n    public async Task&lt;IEnumerable&lt;T_Entity&gt;&gt; GetAllAsync()\n    {\n        var entityList = DBSet.ToListAsync();\n        return await entityList;\n    }\n    public void Update(T_Entity entity)\n    {\n        DBSet.Update(entity);\n    }\n    public void Remove(T_Entity entity)\n    {\n        DBSet.Remove(entity);\n    }\n \n    public async Task&lt;IEnumerable&lt;T_Entity&gt;&gt; FindAsync(Expression&lt;Func&lt;T_Entity, bool&gt;&gt; predicate)\n    {\n        return await DBSet.Where(predicate).ToListAsync();\n    }\n}\nCreating an interface for each entity\n\n(not for the join tables)\n\n\n For each entity, create an interface that inherits IRepository\n (Optional): Add method definitions as you deem needed for that entity (not recommended right now. We will come back to this part later)\n\n📂 Suggested Folder: Domain/Framework/Base/Interfaces/[Related Folder]`\nfor example:\npublic interface IAccountRepository : IRepository&lt;Account, long&gt;\n{\n \n}\nReference Project:\nReference\nImplementing each I[Entity]Repository\n📂 Suggested Folder: Infrastructure/Services/[Related Folder]\n\n For each entity, create an class named [Entity]Repository that implements I[Entity]Repository and inherits BaseRepository\n\nfor example:\npublic class AccountRepository :\n    BaseRepository&lt;ApplicationDBContext, Account, long&gt;,\n    IAccountRepository\n{\n    public AccountRepository(ApplicationDBContext dbContext) : base(dbContext)\n    {\n \n    }\n}\nReference Project:\nReference\nRegistering Services\n\n Modify Program.cs in Presentation, and register for each I[Entity]Repository the related [Entity]Repository\n\n//some code\n//Register Repositories\nbuilder.Services.AddScoped&lt;IAccountRepository, AccountRepository&gt;();\nbuilder.Services.AddScoped&lt;IGenderRepository, GenderRepository&gt;();\nbuilder.Services.AddScoped&lt;IPersonRepository, PersonRepository&gt;();\nbuilder.Services.AddScoped&lt;IRoleRepository, RoleRepository&gt;();\n//...\n \n//some code\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n\n🚧Branching\n\n Create the feature/UnitOfWork branch based on develop\n\npublic interface IUnitOfWork : IDisposable\n{\n    Task&lt;int&gt; SaveChangesAsync();\n}\nCreating IUnitOfWork\n\n Create the interface that inherits IDisposable and add the following code\n\n📂 Suggested Folder: Domain/Framework/Interfaces\npublic interface IUnitOfWork : IDisposable\n{\n    Task&lt;int&gt; SaveChangesAsync();\n}\nImplementing IUnitOfWork\n\n create a class named UnitOfWork  in Infrastructure and implement IUnitOfWork\n\n📂 Suggested Folder: Infrastructure/Framework/Base\n\n provide method definitions for the methods\n\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly ApplicationDBContext _context;\n    \n    public UnitOfWork(ApplicationDBContext context)\n    {\n        _context = context;\n    }\n \n    public void Dispose()\n    {\n        _context.Dispose();\n    }\n \n    public async Task&lt;int&gt; SaveChangesAsync()\n    {\n        return await _context.SaveChangesAsync();\n    }\n}\nRegistering Services\n\n Modify Program.cs in Presentation, and register the UnitOfWork Service\n\n//some code\n//Register Repositories\nbuilder.Services.AddScoped&lt;IUnitOfWork, UnitOfWork&gt;();\n//some code\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References\nSession03 Additional Info"},"02-Project-Based/Session04/Session04-Additional-Info":{"slug":"02-Project-Based/Session04/Session04-Additional-Info","filePath":"02-Project-Based/Session04/Session04 Additional Info.md","title":"Session04 Additional Info","links":[],"tags":[],"content":"Should I have an IEntityService and then EntityService for each of my entities?*\nNot necessarily for every entity — only if it makes sense.\n\nThe Application Layer should expose use cases — not just CRUD logic for each entity.\nIf an entity has business logic or interactions that need orchestration (e.g., validations, aggregations, calling repositories, etc.), then yes, create a service.\nOtherwise, for basic operations, directly using a repository (via a unit of work or interface) from the use case handler might be fine.\n\nIs it OK to have services not related to a specific entity?\nAbsolutely, yes. In fact, that’s expected in a Clean Architecture setup.\nExamples:\n\nA ReportGenerationService that combines bookings, customers, and payments.\nA TokenService for authentication tokens.\nA CurrencyConversionService that hits an external API.\nA NotificationService that sends emails or SMS.\n\n👉 As long as these services live in the Application Layer and follow dependency inversion (i.e., they depend only on interfaces, not implementations), you’re doing great.\nIs it necessary to have an interface for each service?\nWhat’s the Difference Between Services and Repositories?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAspectServiceRepositoryLayerApplication LayerDomain Layer (interface), Infrastructure Layer (implementation)ResponsibilityOrchestrates business logic / use casesData access abstractionFocusCoordinates multiple domain/repo operations, validation, business flowFetching/storing data for a specific entityExamplePlaceOrderService, ReportServiceICustomerRepository, IOrderRepository\nWhat does init mean?\ninit is an access modifier for properties that allows you to set a property only during object initialization, but not after.\nShould I use class or record for DTOs in Clean Architecture?\n🔵 Short answer:\n\nUse record for DTOs when possible — it’s clean, immutable by default, and semantically perfect for data transfer.\n\n\n🔍 Why record is a great fit for DTOs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeaturerecordclassImmutable by default✅ (with init)❌ (need manual setup)Value-based equality✅❌ (ref-based by default)Concise syntax✅❌ (more boilerplate)Use for data containers✅ (perfect fit)✅ (but more verbose)Custom behavior/logic❌ (less suitable)✅ (better for rich behavior)\nBut when should you prefer class?\nUse class if your DTO or model:\n\nNeeds to be mutable after creation\nHas to interact with legacy APIs/libraries\nNeeds inheritance or polymorphism (not well supported in record)\nHas rich behavior (logic, methods, validation, etc.)\n\n\nFor example, in the Domain Layer (Entities, ValueObjects), you’ll usually stick to class — because that’s where behavior lives.\n\nRESTful APIs:\nread more\nWhat Conditions Make an API RESTful?\nKey Principles of REST:\n\n\nStatelessness:\n\nEach API call must contain all the information the server needs to fulfill the request (no session state). Each request is independent.\n\n\n\nResource Identification:\n\nResources (e.g., customers, orders) should be identified using URIs. Use nouns in URIs, not verbs.\n\n\n\nHTTP Methods:\n\n\nUse standard HTTP methods to represent actions:\n\n\nGET: Retrieve a resource.\n\n\nPOST: Create a new resource.\n\n\nPUT: Update a resource entirely.\n\n\nPATCH: Update a resource partially.\n\n\nDELETE: Remove a resource.\n\n\n\n\n\n\nUse of Standard Status Codes:\n\nReturn appropriate HTTP status codes (e.g., 200 OK, 201 Created, 404 Not Found, 500 Internal Server Error).\n\n\n\nHATEOAS:\n\n(Hypermedia as the Engine of Application State) - Provide links to related resources within the responses.\n\n\n\nMultiple GET Methods in One Controller:\n\n\nYes, you can have multiple GET methods in one controller. The key is to differentiate them based on routes and parameters.\n\n\nFor example:\n\n\n[ApiController] \n[Route(&quot;api/[controller]&quot;)] \npublic class CustomerController : ControllerBase {     \n\t\n\t[HttpGet(&quot;{id}&quot;)]     \n\tpublic IActionResult GetCustomerById(int id) { /*...*/ }      \n\t\n\t[HttpGet]     \n\tpublic IActionResult GetAllCustomers() { /*...*/ }      \n\t\n\t[HttpGet(&quot;{id}/orders&quot;)]     \n\tpublic IActionResult GetCustomerOrders(int id) { /*...*/ } \n}\n\nRouting: ASP.NET Core uses route templates to differentiate these actions. The combination of route parameters, query strings, and action names can help separate the GET requests.\n\nList-like stuff in C#\nThey all serve similar purposes—holding multiple items—but differ in functionality, performance, and use cases. Here’s a detailed breakdown:\n🔷 1. IEnumerable\n\nNamespace: System.Collections.Generic\nMost basic “list-like” abstraction.\nRead-only (forward-only iteration).\nYou can use foreach on it.\nDoesn’t support indexing (no .Count, no [i]).\nOften used as the return type to expose a stream of data without giving full collection control.\n\nExample:\nIEnumerable&lt;int&gt; numbers = GetNumbers(); // Lazy-loaded maybe\nforeach (var num in numbers)\n    Console.WriteLine(num);\n💡 Ideal when:\n\nYou want to return a sequence without exposing modification.\nYou’re using LINQ chains.\nYou’re returning data from a database query.\n\n\n🔷 2. ICollection\n\nExtends IEnumerable.\nAdds Count and Add/Remove/Clear methods.\nStill abstract—List and HashSet implement it.\n\n💡 Useful when:\n\nYou want to expose a collection that can be modified (e.g. Add or Remove).\nYou care about the Count.\n\n\n🔷 3. IList\n\nExtends ICollection and IEnumerable.\nAdds index access: list[0] etc.\nThink of it like a mutable array with dynamic size.\n\n💡 Use when:\n\n\nYou want ordered collection with indexing.\n\n\nYou need to insert, remove, or replace items at specific positions.\n\n\n\n🔷 4. List\n\nA concrete class (not interface).\nImplements IList, ICollection, IEnumerable.\nBacked by an array (auto-resizes).\nFast read and write.\nSupports Add, Remove, Insert, IndexOf, etc.\n\nExample:\nvar list = new List&lt;string&gt;();\nlist.Add(&quot;One&quot;);\nlist.Add(&quot;Two&quot;);\nvar second = list[1]; // &quot;Two&quot;\n💡 Go-to general purpose collection.\n\n🔷 5. IReadOnlyCollection &amp; IReadOnlyList\n\nIReadOnlyCollection: Just Count and IEnumerable.\nIReadOnlyList: Adds indexing without modification.\nUsed to expose lists safely (read-only).\n\n💡 Used when:\n\nYou want to return a list, but prevent any changes.\n\n\n🔷 6. Array(T[])\n\nFixed-size.\nFastest for indexing.\nCannot change size.\nImplements IList (via Array).\n\nExample:\nint[] numbers = new int[5];\nnumbers[0] = 42;\n💡 Great for performance-sensitive or fixed-size data.\n\n🔷 7. ObservableCollection\n\nFor WPF/Blazor/WinForms data-binding.\nNotifies UI when items are added/removed.\nImplements IList.\n\n💡 Use in UI apps when the view needs to react to collection changes.\n\n🔷 8. HashSet\n\nUnordered, no duplicates.\nImplements ICollection, not IList.\nNo index access.\n\n💡 Best for fast membership checking (contains x).\n\n🔷 Summary Table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTypeIndexingModifiableOrderedDuplicatesUse CaseIEnumerable❌❌✔️✔️Basic read-only stream or LINQ chainingICollection❌✔️✔️✔️Expose modifiable group of itemsIList✔️✔️✔️✔️Full-featured list abstractionList✔️✔️✔️✔️Standard go-to collectionIReadOnlyList✔️❌✔️✔️Return data safely from service or repoArray (T[])✔️✔️✔️✔️Fixed-size, performant indexingObservableCollection✔️✔️✔️✔️UI binding for collectionsHashSet❌✔️❌❌Fast lookup, uniqueness enforcement"},"02-Project-Based/Session04/Session04-Backend":{"slug":"02-Project-Based/Session04/Session04-Backend","filePath":"02-Project-Based/Session04/Session04 Backend.md","title":"Session04 Backend","links":[],"tags":[],"content":"🛠️ Task Checklist\nPreparation:\nThe unedited conversation with Chat GPT, concerning almost all of the aspects of this session:\n(optional): read this to get a better understanding of the topic:\nchatgpt.com/share/67f18460-1c1c-8010-bc57-9f3b683ec87a\n🚧Branching\n\n  Create the feature/transportation-search branch based on develop\n\nDTO\nIn order to develop transportation search flow, three DTOs need to be created in the application layer.\n\n  Create DTOs related to transportation search flow\n📂 Suggested Folder: Application/DTOs/City`\n\npublic class CityDto\n{\n    public int Id { get; init; }\n    public required string Title { get; init; }\n}\n📂 Suggested Folder: Application/DTOs/Transportation\npublic class TransportationSearchRequestDto\n{\n     public short? VehicleTypeId { get; init; }\npublic int? FromCityId { get; init; }\npublic int? ToCityId { get; init; }\npublic DateTime? StartDate { get; init; }\npublic DateTime? EndDate { get; init; }\npublic class TransportationSearchResultDto\n{\n    public long Id { get; init; }\npublic int VehicleTypeId { get; init; }   \npublic string? VehicleTitle { get; init; }   \npublic required string CompanyTitle { get; init; }   \npublic required string FromLocationTitle { get; init; }\npublic required string ToLocationTitle { get; init; }\npublic required string FromCityTitle { get; init; }\npublic required string ToCityTitle { get; init; }\npublic DateTime StartDateTime { get; init; }\npublic DateTime? EndDateTime { get; init; }\npublic decimal Price { get; init; }\npublic int RemainingCapacity { get; init; }\n \nRepository\nThere are a few things to be add to some repositories for transportation search flow.\n\n Create DTOs related to transportation search flow\n\n📂 Suggested Folder: Domain/Framework/Interfaces/Repositories/\nTransportationRepositories\npublic interface ITransportationRepository : IRepository&lt;Transportation, long&gt;\n{\n    Task&lt;IEnumerable&lt;Transportation&gt;&gt; SearchTransportationsAsync(\n\t    short? vehicleTypeId,\n        int? fromCityId,\n        int? toCityId, \n        DateTime? startDate, \n        DateTime? endDate);\n}\n📂 Suggested Folder: Infrastructure/Services/Services/TransportationRepositories\npublic class TransportationRepository :\n        BaseRepository&lt;ApplicationDBContext, Transportation, long&gt;,\n        ITransportationRepository\n    {\n        public TransportationRepository(ApplicationDBContext dbContext) : base(dbContext)\n        {\n \n        }\n \n        public async Task&lt;IEnumerable&lt;Transportation&gt;&gt; SearchTransportationsAsync(\n            short? vehicleTypeId,\n            int? fromCityId,\n            int? toCityId,\n            DateTime? startDate,\n            DateTime? endDate)\n        {\n            var query = DbContext.Transportations\n                .Include(x =&gt; x.Vehicle)\n                .Include(x =&gt; x.FromLocation).ThenInclude(x =&gt; x.City)\n                .Include(x =&gt; x.ToLocation).ThenInclude(x =&gt; x.City)\n                .Include(x =&gt; x.Company)\n                .AsQueryable();\n            query = query.Where(x =&gt; vehicleTypeId == null || x.Vehicle.VehicleTypeId == vehicleTypeId.Value);\n            query = query.Where(x =&gt; fromCityId == null || x.FromLocation.CityId == fromCityId.Value);\n            query = query.Where(x =&gt; toCityId == null || x.ToLocation.CityId == toCityId.Value);\n            query = query.Where(x =&gt; startDate == null || x.StartDateTime.Date == startDate.Value.Date);\n            query = query.Where(x =&gt; endDate == null || (x.EndDateTime.HasValue &amp;&amp; x.EndDateTime.Value == endDate.Value.Date));\n            \n            return await query.ToListAsync();\n        }\n    }\nAuto Mapper\nAuto Mapper simplifies mapping between aggregates and DTOs in both directions.\n\n Create a MappingProfile that inherits Profile, and use it to add configurations for mappings\n\n📂 Suggested Folder: Application/Mappers/Profiles\npublic class MappingProfile : Profile\n{\n    public MappingProfile()\n    {\n        CreateMap&lt;Transportation, TransportationSearchResultDto&gt;()\n            .ForMember(dest =&gt; dest.CompanyTitle, \n            opt =&gt; opt.MapFrom(src =&gt; src.Company.Title))\n            \n            .ForMember(dest =&gt; dest.FromLocationTitle, \n            opt =&gt; opt.MapFrom(src =&gt; src.FromLocation.Title))\n            \n            .ForMember(dest =&gt; dest.ToLocationTitle, \n            opt =&gt; opt.MapFrom(src =&gt; src.ToLocation.Title))\n            \n            .ForMember(dest =&gt; dest.FromCityTitle, \n            opt =&gt; opt.MapFrom(src =&gt; src.FromLocation.City.Title))\n            \n             .ForMember(dest =&gt; dest.ToCityTitle, \n             opt =&gt; opt.MapFrom(src =&gt; src.ToLocation.City.Title));\n \n        CreateMap&lt;City, CityDto&gt;();\n        }\n    }\n\n Register AutoMapper config file in Program.cs\n\n .\n .\n .\n \n builder.Services.AddAutoMapper(typeof(MappingProfile));\n \n var app = builder.Build();\n \n .\n .\n .\nResult &amp; Result Status\n\n Create ResultStatus enum and Result class\n📂 Suggested Folder: Application/Result\n\nResult is a template to transfer data between services and controllers (in backend), so will use a generic type\npublic class Result&lt;T&gt;\n{\n\tpublic ResultStatus Status { get; set; }\n\tpublic string? ErrorMessage { get; set; }\n\tpublic T? Data { get; set; }\n\tpublic bool IsSuccess =&gt; Status == ResultStatus.Success;\n \n\tpublic static Result&lt;T&gt; Success(T data)\n\t{\n\t\treturn new Result&lt;T&gt;\n\t\t{\n\t\t\tStatus = ResultStatus.Success,\n\t\t\tData = data\n\t\t};\n\t}\n \n\tpublic static Result&lt;T&gt; Error(T data)\n\t{\n\t\treturn new Result&lt;T&gt;\n\t\t{\n\t\t\tStatus = ResultStatus.Error,\n\t\t\tData = data\n\t\t};\n\t}\n \n\tpublic static Result&lt;T&gt; NotFound(T data)\n\t{\n\t\treturn new Result&lt;T&gt;\n\t\t{\n\t\t\tStatus = ResultStatus.NotFound,\n\t\t\tData = data\n\t\t};\n\t}\n}\nAs you can see, there’s a property of type ResultStatus, which is a enum for status of request\npublic enum ResultStatus\n{\n\tSuccess,\n\tNotFound,\n\tValidationError,\n\tConflict,\n\tUnauthorized,\n\tForbidden,\n\tError\n}\nYou can read more about enums: W3Schools\nIService &amp; Service\nNow, use I[Entity]Repositry and IUnitOfWork in services to implement business logic\n\n Create I[Entity]Service and [Entity]Service which implements it\n\n📂 Suggested Folder for I[Entity]Service: Application/Interfaces\n📂 Suggested Folder for Services: Application/Services\n\nexistence of an interface for each service class is optional\nservices can have multiple repositories in them → logic-based structure\n\nAn example of I[Entity]Service:\npublic interface ITransportationService\n{\n    Task&lt;Result&lt;IEnumerable&lt;TransportationSearchResultDto&gt;&gt;&gt; SearchTransportationsAsync(TransportationSearchRequestDto searchRequest);\n}\nAn example of [Entity]Service:\npublic class TransportationService : ITransportationService\n{\n\tprivate readonly ITransportationRepository _transportationRepository;\n\tprivate readonly IMapper _mapper;\n\tprivate readonly IUnitOfWork _unitOfWork;\n \n\tpublic TransportationService(ITransportationRepository transportationRepository, IMapper mapper, IUnitOfWork unitOfWork)\n\t{\n\t\t_transportationRepository = transportationRepository;\n\t\t_mapper = mapper;\n\t\t_unitOfWork = unitOfWork;\n\t}\n \n\tpublic async Task&lt;Result&lt;IEnumerable&lt;TransportationSearchResultDto&gt;&gt;&gt; SearchTransportationsAsync(TransportationSearchRequestDto requestDto)\n\t{\n\t\tvar result = await _transportationRepository.SearchTransportationsAsync(\n\t\t\tvehicleTypeId: requestDto.VehicleTypeId,\n\t\t\tfromCityId: requestDto.FromCityId,\n\t\t\ttoCityId: requestDto.ToCityId,\n\t\t\tstartDateTime: requestDto.StartDate,\n\t\t\tendDateTime: requestDto.EndDate);\n \n\t\tif (result.Any())\n\t\t{\n\t\t\tvar dto = _mapper.Map&lt;IEnumerable&lt;TransportationSearchResultDto&gt;&gt;(result);\n\t\t\treturn Result&lt;IEnumerable&lt;TransportationSearchResultDto&gt;&gt;.Success(dto);\n\t\t}\n \n\t\treturn Result&lt;IEnumerable&lt;TransportationSearchResultDto&gt;&gt;.NotFound(null);\n\t}\n}\n\n Register services in Program.cs:\n\n.\n.\n.\nbuilder.Services.AddScoped&lt;ITransportationService, TransportationService&gt;();\nbuilder.Services.AddScoped&lt;ICityService, CityService&gt;();\n.\n.\n.\nController\nNow we’re getting to endpoints, you should communicate with client side through web-api. So every controller uses Services in Application layer to receive requests and send responses with DTOs.\n\n Create an APIController (right click on the folder, and then under Add, select Controller, and then make sure to select the APIController type)\n📂 Suggested Folder: WebAPI/Controller\n\nYou should use [ApiController] attribute on top of them, route them and handle different status codes. TransportationController:\n[ApiController]\n[Route(&quot;api/[controller]&quot;)]\npublic class TransportationController : ControllerBase\n{\n\tprivate readonly ITransportationService _transportationService;\n \n\tpublic TransportationController(ITransportationService transportationService)\n\t{\n\t\t_transportationService = transportationService;\n\t}\n \n\t[HttpGet(&quot;search&quot;)]\n\tpublic async Task&lt;IActionResult&gt; SearchTransportations([FromQuery] TransportationSearchRequestDto searchRequest)\n\t{\n\t\tif (searchRequest == null)\n\t\t{\n\t\t\treturn BadRequest(&quot;Invalid search request&quot;);\n\t\t}\n \n\t\tvar result = await _transportationService.SearchTransportationsAsync(searchRequest);\n\t\tif (result.IsSuccess)\n\t\t{\n\t\t\treturn Ok(result);\n\t\t}\n \n\t\t// any unsuccessful status\n\t\treturn result.Status switch\n\t\t{\n\t\t\tResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n\t\t\tResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n\t\t\t_ =&gt; StatusCode(500, result.ErrorMessage),\n\t\t};\n\t}\n}\n\nHttpGet: handles a GET request from client → important for routing\nOk, BadRequest, NotFound and StatusCode are json results to send through API\nUse TransportationService to communicate with Application\n\nInserting Sample Data\nFor testing purposes, add some data into the related tables.\nYou are provided with a SQL script, that adds some sample data into the following tables\nImportant Notes: Note that different database names, and different table names will produce errors while executing the script. Consider adjusting these names before executing the script\n\n\nCities\n\n\nCompanies\n\n\nLocationTypes\n\n\nLocations\n\n\nVehicleTypes\n\n\nVehicles\n\n\nTransportation\n\n\n Open TransportationRelatedSampleData.sql with SSMS, and execute the query\n\n\n\nNote: there has been changes in database structure since this note and this file has been written.\n\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References"},"02-Project-Based/Session05/Session05-Additional-Info":{"slug":"02-Project-Based/Session05/Session05-Additional-Info","filePath":"02-Project-Based/Session05/Session05 Additional Info.md","title":"Session05 Additional Info","links":[],"tags":[],"content":"What is CORS? (Chat GPT)\nCORS (Cross-Origin Resource Sharing)\nWhat it is: CORS is a browser security feature that blocks requests to a different domain unless explicitly allowed by the server.\n🔐 What is CORS really for?\nCORS is not about protecting the backend server.\nIt’s about protecting users from malicious websites using their browser as a weapon.\n\n🧠 Imagine this attack:\nYou’re logged into your bank in one browser tab (bank.com).\nNow, you visit a shady website in another tab (evil.com). That site has JavaScript that tries to send this:\nfetch(&#039;bank.com/api/transfer#039;, {\n  credentials: &#039;include&#039;  // it sends your bank cookies!\n});\n➡️ If the browser allowed this freely, the request would go through using your login session, and you’d lose money.\n\n💥 Enter CORS\nSo the browser says:\n\n“Hold on. This JavaScript is from evil.com, and it’s trying to talk to bank.com. I won’t let that happen unless bank.com says it’s okay.”\n\nThat’s why the backend server must respond with something like:\nAccess-Control-Allow-Origin: mytrusteddomain.com\nOnly then will the browser say, “Okay, go ahead.”\n\nSo the purpose of CORS is:\n✅ To restrict browsers from sending or accepting responses from cross-origin sources\n❌ Not to protect the backend\n❌ Not to restrict Postman, curl, servers, or mobile apps\n\n🔄 In Dev Work (like your React + API case):\n\nYou’re running React at http://localhost:5173\nYou’re running ASP.NET Core API at https://localhost:7001\nThe browser sees this as two different origins → blocks the request unless CORS is enabled on the API.\n\n\n🧪 Why Postman works:\n\nPostman isn’t a browser\nPostman doesn’t care about same-origin policy\nPostman just sends requests like your backend would\n\n\n✅ Conclusion:\n\nCORS is a browser feature to protect users\nIt restricts frontend JavaScript from calling other domains unless explicitly allowed\nYou must configure your server to say “Yes, I allow your frontend to talk to me”\n\nFeature-based Folder Structure\n\n\nExplanation of the agent.ts\n\n\nReact.FC\nwhat is React.FC?\n\n\nReact.FC (or React.FunctionComponent) is a TypeScript type that you can use to type your functional React components.\n\n\nIt tells TypeScript that:\n\nThis component is a function\nIt receives props (in your case, Props)\nIt returns JSX (it returns something React can render)\n\n\n\n\nWhy use it?\nHere’s what you get when you use React.FC:\n\n✅ Prop typing — You get auto-complete and error checking for props.\n✅ Children are automatically included. (More on this below.)\n✅ Cleaner code because TypeScript understands the shape of the component.\n\n\nWithout React.FC\nYou could just write:\nconst TransportationCard = ({ transportation }: Props) =&gt; { ... }\nYou lose some “extra typing safety” like automatic children typing.\n\nSmall Detail: children\nWhen you use React.FC, TypeScript automatically allows your component to accept children too — even if you didn’t define it in your Props.\nFor example:\n&lt;TransportationCard transportation={t}&gt;\n  &lt;p&gt;Hello&lt;/p&gt;   // This would be valid automatically\n&lt;/TransportationCard&gt;\nBecause children is always part of a React.FC.\n👉 If you don’t use React.FC, and you want to accept children, you have to manually add it to your props.\n\nSome developers today…\nSome people (even in big companies) prefer NOT to use React.FC anymore because:\n\nIt forces children even when you don’t want children.\nIt’s a little bit redundant — you can already just type props without it.\n\n\nSo in modern codebases, both styles are OK — it’s just a preference.\n\n\nQuick Summary:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing React.FCNot using React.FCGood for simple, typed functional componentsGood if you want full manual control over propsAuto-includes children propYou must manually add children if neededEasy and quickMore customizable\n\nCityDropdown Component:\n1. State Variables\nconst [cities, setCities] = useState&lt;City[]&gt;([]);\nconst [selectedCity, setSelectedCity] = useState&lt;number | undefined&gt;();\n\ncities: holds the list of cities retrieved from the backend (starts empty []).\nselectedCity: holds the currently selected city’s ID (number) or undefined if nothing is selected yet.\n\n\n2. Fetching Cities on Mount\nuseEffect(() =&gt; {\n  agent.Cities.list()\n    .then(setCities)\n    .catch((err) =&gt; console.error(&quot;error loading cities&quot;, err));\n}, []);\n\nWhen the component mounts ([] dependency array = run once), it calls agent.Cities.list().\nagent.Cities.list() presumably returns a promise that resolves to an array of City objects.\nOn success → setCities updates the cities state.\nOn failure → logs an error to the console.\n\n\n3. Rendering the Dropdown\n&lt;select\n  value={selectedCity}\n  onChange={(e) =&gt; setSelectedCity(Number(e.target.value))}\n&gt;\n  &lt;option value=&quot;&quot;&gt;Select a City&lt;/option&gt;\n  {cities.map((city) =&gt; (\n    &lt;option key={city.id} value={city.id}&gt;\n      {city.title}\n    &lt;/option&gt;\n  ))}\n&lt;/select&gt;\n\nRenders a &lt;select&gt; (dropdown).\nIts value is bound to selectedCity.\nWhen the user changes the selection (onChange), it updates selectedCity by converting the selected value from a string to a number (Number(e.target.value)).\nThe dropdown always starts with a placeholder option: “Select a City”.\nIt dynamically creates an &lt;option&gt; for each city in the cities array:\n\nkey and value are the city’s id.\nDisplayed text is the city’s title.\n\n\n\n\nWhat is useEffect?\n🔹 useEffect is a React Hook.\nIt tells React to run some code after the component renders.\nIn code:\nuseEffect(() =&gt; {\n  agent.Cities.list()\n    .then(setCities)\n    .catch((err) =&gt; console.error(&quot;error loading cities&quot;, err));\n}, []);\n\nThis function (() =&gt; { ... }) runs right after the component is first shown (because of [] — the empty array).\nInside it, you are calling your API (agent.Cities.list()) to get the cities.\nWhen the server responds with a list of cities, you save them into your component’s memory (state) by calling setCities(data).\n\n\nWhat is useState?\n🔹 useState is another React Hook.\nIt creates a piece of memory for your component.\nIn code:\nconst [cities, setCities] = useState&lt;City[]&gt;([]);\nconst [selectedCity, setSelectedCity] = useState&lt;number | undefined&gt;();\nHere’s what is happening:\n\ncities is a variable that starts as an empty array ([]).\nsetCities is a function you use to change the value of cities.\n\nSame with selectedCity:\n\nselectedCity starts as undefined (nothing selected yet).\nsetSelectedCity lets you update which city is selected.\n\n\nTransportationCard Component\n1. The Component Function\nconst TransportationCard: React.FC&lt;Props&gt; = ({ transportation }) =&gt; {\n\nThis is a React Functional Component.\nIt takes transportation from props (destructured directly).\nIt returns JSX that shows the transportation info in a styled card.\n\n\n2. Inside the JSX\n2.1 Left Side — Price and Button\n&lt;div className=&quot;flex flex-col items-center&quot;&gt;\n  &lt;div className=&quot;text-blue-600 font-bold text-lg&quot;&gt;\n    {transportation.price} Toman\n  &lt;/div&gt;\n  &lt;button className=&quot;bg-blue-500 text-white px-4 py-2 rounded-md mt-2 hover:bg-blue-600&quot;&gt;\n    Select Ticket\n  &lt;/button&gt;\n&lt;/div&gt;\n\nShows the price (price field) styled with blue, bold text.\nHas a Select Ticket button — blue, rounded, changes shade on hover.\n\n\n2.2 Middle — Trip Info\n&lt;div className=&quot;flex-1 mx-4 text-center&quot;&gt;\n  &lt;div className=&quot;font-semibold text-gray-700&quot;&gt;\n    {transportation.companyTitle}\n  &lt;/div&gt;\n  &lt;div className=&quot;flex items-center justify-center mt-2&quot;&gt;\n    &lt;div className=&quot;mx-2&quot;&gt;{transportation.fromCityTitle}&lt;/div&gt;\n    &lt;span className=&quot;text-gray-400&quot;&gt;→&lt;/span&gt;\n    &lt;div className=&quot;mx-2&quot;&gt;{transportation.toCityTitle}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div className=&quot;text-sm text-gray-500 mt-1&quot;&gt;\n    {new Date(transportation.startDateTime).toLocaleDateString(&quot;en&quot;, {\n      hour: &quot;2-digit&quot;,\n      minute: &quot;2-digit&quot;,\n    })}\n  &lt;/div&gt;\n&lt;/div&gt;\n\nShows the company name.\nShows From → To cities in a neat way with an arrow (→) between them.\nShows the departure time:\n\nstartDateTime is parsed using new Date(...).\ntoLocaleDateString(&quot;en&quot;, { hour: &quot;2-digit&quot;, minute: &quot;2-digit&quot; }) formats it to show just hours and minutes.\n\n\n\n\n2.3 Right Side — Company Logo\n&lt;div className=&quot;w-12 h-12&quot;&gt;\n  &lt;img\n    src=&quot;/images/company-placeholder.png&quot;\n    alt=&quot;company&quot;\n    className=&quot;w-full h-full object-contain&quot;\n  /&gt;\n&lt;/div&gt;\n\nDisplays a small company logo image (placeholder image for now).\nobject-contain keeps the image inside the box without stretching.\n\nTrasnportationSearchForm Component\n🧠 Main Concepts Used:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeaturePurposeuseStateTo store and manage the form inputs, cities, results, and loading statususeEffectTo load the list of cities once when the component appearsTyping with modelsCity, TransportationSearchRequest, TransportationSearchResultEvent handlingTo update form values and trigger the searchConditional renderingShow “Loading”, “No results”, or “Results” dynamically\n\n📦 Let’s break down the code:\n1. ✍️ States\nconst [searchResults, setSearchResults] = useState&lt;TransportationSearchResult[]&gt;([]);\nconst [loading, setLoading] = useState(false);\nconst [cities, setCities] = useState&lt;City[]&gt;([]);\nconst [form, setForm] = useState&lt;TransportationSearchRequest&gt;({\n  fromCityId: undefined,\n  toCityId: undefined,\n  startDate: null,\n  endDate: null,\n  vehicleTypeId: undefined,\n});\nYou define 4 states:\n\nsearchResults: List of found transportations\nloading: True/false if waiting for API\ncities: List of available cities\nform: The form input values the user is selecting\n\nAll typed properly ✅\n\n2. 📡 Fetch cities automatically (useEffect)\nuseEffect(() =&gt; {\n  agent.Cities.list().then(setCities);\n}, []);\nMeaning:\n\nWhen the page first loads, it calls the API to get cities.\nagent.Cities.list() calls your backend, and when it gets the cities, it puts them into cities state.\nThe empty [] dependency array means this happens only once, not every time anything changes.\n\n\n3. ✏️ Handle input changes\nconst handleChange = (e: React.ChangeEvent&lt;HTMLSelectElement | HTMLInputElement&gt;) =&gt; { ... }\nWhenever a user types/selects:\n\nYou detect which field (name) and what value (value) they changed\nUpdate the form state accordingly:\n\nfromCityId and toCityId are converted to numbers (parseInt)\nstartDate and endDate allow null\nOther fields (if any) are copied directly\n\n\n\n\n4. 🔍 Handle Search button\nconst handleSearch = () =&gt; { ... }\nWhen the user clicks Search:\n\nSet loading to true\nCall the backend API agent.TransportationSearch.search(form)\nWhen the result comes back:\n\nSave it into searchResults\n\n\nIf error: log it\nFinally, set loading to false again\n\n\n5. 🖥️ Return (render) JSX\nYou build a UI:\n\nVehicle Types (Bus, Train, Airplane) selectable with a click → sets vehicleTypeId\nFrom City and To City dropdowns\nStart and End Date inputs\nSearch Button to trigger the search\nResult area that shows:\n\nIf loading: “Loading…”\nIf no results: “No results found”\nIf results: List of TransportationCard components for each found item.\n\n\n\n"},"02-Project-Based/Session05/Session05-Backend":{"slug":"02-Project-Based/Session05/Session05-Backend","filePath":"02-Project-Based/Session05/Session05 Backend.md","title":"Session05 Backend","links":[],"tags":[],"content":"🛠️ Task Checklist\nCORS (Backend Repository)\n\n open program.cs and add the following lines\n\nbuilder.Services.AddCors(options =&gt;\n{\n    options.AddPolicy(&quot;Frontend&quot;, policy =&gt;\n    {\n        policy.WithOrigins(&quot;http://localhost:5173&quot;)\n        .AllowAnyHeader()\n        .AllowAnyMethod();\n    });\n});\n \n...\n \napp.UseCors(&quot;Frontend&quot;);\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References"},"02-Project-Based/Session05/Session05-Frontend":{"slug":"02-Project-Based/Session05/Session05-Frontend","filePath":"02-Project-Based/Session05/Session05 Frontend.md","title":"Session05 Frontend","links":["02-Project-Based/Session05/Session05-Additional-Info"],"tags":[],"content":"🛠️ Task Checklist\nPreparation\n\n Watch www.youtube.com/watch\n\n🚧Branching (Project Setup)\n\n Create the develop branch\n Create the feature/project-setup branch based on develop\n\nCreating a project (using Vite)\nnpm create vite@latest alibabaclone-frontend --template react-ts\n\nReact Folder Structure\n\n Create the folders as shown in the picture below\n\n move App.tsx and App.css to ‘shared/layout/’\n adjust the dependencies in these files and index.html\n\nInstalling packages\n\n run this command to install these packages: uuid, react-router-dom, and axios\n\nnpm install uuid react-router-dom axios\n\n run this command to install redux\n\nnpm install @reduxjs/toolkit react-redux\nCSS/Component Library\nThere are different ways to handle CSS styling when creating components.\nYou can choose any approach you prefer:\n\nPlain CSS\n\nWrite regular .css files and import them into your components.\n\n\nCSS Modules\n\nCreate component-specific .module.css files to automatically scope styles.\n\n\n**TailwindCSS**\n\nA utility-first CSS framework where you apply classes directly in your HTML/JSX.\n\n\nSass / SCSS\n\nAn extension of CSS with variables, nesting, and more features. Can be used alone or with modules.\n\n\nPostCSS\n\nA tool for transforming CSS with JavaScript plugins (often used behind the scenes).\n\n\nFramework-Specific UI Libraries (which come with their own styles)\n\nExample: Material-UI (MUI), Ant Design, Chakra UI, etc.\nThese often include ready-made components with built-in styling.\n\n\n\n\n install the css/component library of your choice\n\nTailwind\nIf you use tailwind with ShadCN, use this link (skip the first step)\nTailwind with ShadCN\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n🚧Branching\n\n Create the feature/transportation-search branch based on develop\n\nCreating Models\n\n Create models for the DTOs that are used to convey data between backend and frontend\n📂 Suggested Folder: shared/models/[RelatedFolder]\n\nExample:\nexport interface TransportationSearchRequest{\n    vehicleTypeId ?: number;\n    fromCityId ?: number;\n    toCityId ?: number;\n    startDate ?: Date | null;\n    endDate ?: Date | null;\n}\nHandling API Calls\n\n  Create agent.ts to handle API calls using axios\n📂 Suggested Folder: shared/api/\n\n\nNote: the name and the location of this file has changed since writing this note\n\n\n Adjust the baseURL to address your web API port\n\nimport axios, { AxiosResponse } from &#039;axios&#039;;\n \nimport { TransportationSearchRequest } from &#039;../models/transportation/transportationSearchRequest&#039;;\nimport { TransportationSearchResult } from &#039;../models/transportation/transportationSearchResult&#039;;\n \nimport { City } from &#039;../models/location/city&#039;;\n \naxios.defaults.baseURL = &#039;https://localhost:[REPLACE THIS WITH YOUR BACKEND WEB API PORT]/api&#039;;\n \nconst responseBody = &lt;T&gt;(response: AxiosResponse&lt;T&gt;) =&gt; response.data;\n \nconst request = {\n    get: &lt;T&gt;(url: string) =&gt; axios.get&lt;T&gt;(url).then(responseBody),\n    post: &lt;T&gt;(url: string, body: {}) =&gt; axios.post&lt;T&gt;(url, body).then(responseBody),\n    put: &lt;T&gt;(url: string, body: {}) =&gt; axios.put&lt;T&gt;(url, body).then(responseBody),\n    delete: &lt;T&gt;(url: string) =&gt; axios.delete&lt;T&gt;(url).then(responseBody)\n}\n \nconst TransportationSearch = {\n    search: (data: TransportationSearchRequest) =&gt; request.post&lt;TransportationSearchResult[]&gt;(&#039;/transportation/search&#039;, data),\n}\n \nconst Cities = {\n    list: () =&gt; request.get&lt;City[]&gt;(&#039;/city&#039;),\n}\n  \n \nconst agent = {\n    TransportationSearch,\n    Cities\n}\n \nexport default agent;\nCreating CityDropdown Component\n📂 Suggested Folder: features/city/\n\n Create components for the parts of the UI you need\n\nimport agent from &quot;@/shared/api/agent&quot;;\nimport { City } from &quot;@/shared/models/location/city&quot;;\nimport { useEffect, useState } from &quot;react&quot;;\n \nconst CityDropdown = () =&gt; {\n  const [cities, setCities] = useState&lt;City[]&gt;([]);\n  const [selectedCity, setSelectedCity] = useState&lt;number | undefined&gt;();\n \n  useEffect(() =&gt; {\n    agent.Cities.list()\n      .then(setCities)\n      .catch((err) =&gt; console.error(&quot;error loading cities&quot;, err));\n  }, []);\n \n  return (\n    &lt;select\n      value={selectedCity}\n      onChange={(e) =&gt; setSelectedCity(Number(e.target.value))}\n    &gt;\n \n      &lt;option value=&quot;&quot;&gt;Select a City&lt;/option&gt;\n      {cities.map((city) =&gt; (\n        &lt;option key={city.id} value={city.id}&gt;\n          {city.title}\n        &lt;/option&gt;\n      ))}\n    &lt;/select&gt;\n  );\n};\n \nexport default CityDropdown;\n\n See the analysis of CityDropdown component code in the additional info\n\nCreating transportationCard Component\nimport { TransportationSearchResult } from &quot;@/shared/models/transportation/transportationSearchResult&quot;;\nimport React from &quot;react&quot;;\n \ninterface Props {\n  transportation: TransportationSearchResult;\n}\n \nconst TransportationCard: React.FC&lt;Props&gt; = ({ transportation }) =&gt; {\n  return (\n    &lt;div className=&quot;flex items-center justify-between p-4 border rounded-md shadow-md mb-4&quot;&gt;\n      {/* Price and Select Button */}\n      &lt;div className=&quot;flex flex-col items-center&quot;&gt;\n        &lt;div className=&quot;text-blue-600 font-bold text-lg&quot;&gt;\n          {transportation.price} Toman\n        &lt;/div&gt;\n        &lt;button className=&quot;bg-blue-500 text-white px-4 py-2 rounded-md mt-2 hover:bg-blue-600&quot;&gt;\n          Select Ticket\n        &lt;/button&gt;\n      &lt;/div&gt;\n      {/* Trip Info */}\n      &lt;div className=&quot;flex-1 mx-4 text-center&quot;&gt;\n        &lt;div className=&quot;font-semibold text-gray-700&quot;&gt;\n          {transportation.companyTitle}\n        &lt;/div&gt;\n        &lt;div className=&quot;flex items-center justify-center mt-2&quot;&gt;\n          &lt;div className=&quot;mx-2&quot;&gt;{transportation.fromCityTitle}&lt;/div&gt;\n          &lt;span className=&quot;text-gray-400&quot;&gt;→&lt;/span&gt;\n          &lt;div className=&quot;mx-2&quot;&gt;{transportation.toCityTitle}&lt;/div&gt;\n        &lt;/div&gt;\n \n        &lt;div className=&quot;text-sm text-gray-500 mt-1&quot;&gt;\n          {new Date(transportation.startDateTime).toLocaleDateString(&quot;en&quot;, {\n            hour: &quot;2-digit&quot;,\n            minute: &quot;2-digit&quot;,\n          })}\n        &lt;/div&gt;\n      &lt;/div&gt;\n \n      {/* Company Logo or Placeholder */}\n      &lt;div className=&quot;w-12 h-12&quot;&gt;\n        &lt;img\n          src=&quot;/images/company-placeholder.png&quot;\n          alt=&quot;company&quot;\n          className=&quot;w-full h-full object-contain&quot;\n        /&gt;\n \n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n \nexport default TransportationCard;\nCreating transportationSearchForm Component\nSee the code from:\ngithub.com/MehrdadShirvani/AlibabaClone-Frontend/tree/develop/alibabaclone-frontend/src/features/transportation\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References\n\n Check out Session05 Additional Info\n Watch for React\n"},"02-Project-Based/Session06/Session06-Additional-Info":{"slug":"02-Project-Based/Session06/Session06-Additional-Info","filePath":"02-Project-Based/Session06/Session06 Additional Info.md","title":"Session06 Additional Info","links":[],"tags":[],"content":"SearchResultsPage\nThis page is responsible for:\n\nReading route parameters and query strings from the URL\nSending those values as a form to the backend\nShowing the result (or loading/error message)\n\n\n✅ 1. Route Parameters\nWhen you define this route in App.jsx:\n&lt;Route path=&quot;/:vehicleId/:fromCityId/:toCityId&quot; element={&lt;SearchResultsPage /&gt;} /&gt;\nIt means the URL will look like:\n/1/21/45\n\nThose values are extracted using:\nconst { vehicleId, fromCityId, toCityId } = useParams();\n🔹 useParams() comes from React Router and gives you access to the dynamic parts of the URL.\n\n✅ 2. Query String Parameters\nSuppose your full URL is:\n/1/21/45?departing=2025-06-01&amp;arriving=2025-06-10\n\nThese extra values after the ? are query string parameters. They’re accessed using:\nconst query = useQuery(); // Custom helper\nconst departing = query.get(&quot;departing&quot;);\nconst arriving = query.get(&quot;arriving&quot;);\nThe helper useQuery() is:\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nThis uses React Router’s useLocation() to access the full URL, and then parses the query string.\n\n✅ 3. Parsing and Converting Values\nReact Router gives you everything as strings. So:\nconst vehicleTypeId = vehicleId ? parseInt(vehicleId, 10) : 1;\nconst fromId = fromCityId ? parseInt(fromCityId, 10) : undefined;\nconst toId = toCityId ? parseInt(toCityId, 10) : undefined;\nThis ensures you have numbers, not strings, when building your form object.\n\n✅ 4. Building the Search Form and Fetching Data\nNow all data is combined into one form object:\nconst form = {\n  vehicleTypeId,\n  fromCityId: fromId,\n  toCityId: toId,\n  startDate: departing || null,\n  endDate: arriving || null,\n};\nThen it sends that to the backend:\nagent.TransportationSearch.search(form)\n  .then(setResults)\n  .catch(err =&gt; console.error(err))\n  .finally(() =&gt; setLoading(false));"},"02-Project-Based/Session06/Session06-Frontend":{"slug":"02-Project-Based/Session06/Session06-Frontend","filePath":"02-Project-Based/Session06/Session06 Frontend.md","title":"Session06 Frontend","links":["02-Project-Based/Session06/Session06-Additional-Info"],"tags":[],"content":"🛠️ Task Checklist\n🚧Branching\n\n  Create the feature/navbar branch based on develop\n\nAdding a Navbar\n🔹 What Is a Navbar?\n\n\nA navigation bar (navbar) is a UI element typically placed at the top or side of a web app.\n\n\n Use a &lt;nav&gt; with flex, justify-between, items-center.\n\n\n Add buttons or links like Home, Search, About. (the links can be empty now)\n\n\nuse this as a reference: link\n📂 Suggested Folder for navbar component: src/shared/components/Navbar\n📂 Suggested Folder for images: public/images/\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n🚧Branching\n\n  Create the feature/routing branch based on develop\n\nConverting Search Functionality From Single Component to Routed Pages\nOriginally, transportation search logic and UI may have all been inside one component — which quickly becomes messy and hard to manage as your app grows.\nNow we’ve split the logic into two proper pages:\n✅ SearchPage.jsx\n\nResponsible only for showing the search form.\nClean and minimal.\nUses the reusable TransportationSearchForm component.\nUse this as a reference: link\n\n✅ SearchResultsPage.jsx\n\nResponsible for fetching and showing results.\nReads route parameters and query strings.\nCalls the backend using agent.\nShows a loading state, handles empty results, and renders cards.\nUse this as a reference: link\n\nThis separation improves:\n\nRouting and navigation\nCode readability and maintainability\nReusability of components like the search form and result cards\n\n\nCreate Pages into a Pages Folder\n📂 Suggested Folder for navbar component\nInside your features/transportation folder:\npages/\n├── SearchPage.jsx\n├── SearchResultsPage.jsx\ncomponents/\n├── TransportationSearchForm.jsx\n├── TransportationCard.jsx\n\n\n Create SearchPage\n\nimport TransportationSearchForm from &quot;@/features/transportation/transportationSearchForm&quot;;\n \nconst SearchPage = () =&gt; {\n  return (\n    &lt;div className=&quot;container mx-auto py-6&quot;&gt;\n      &lt;TransportationSearchForm /&gt;\n    &lt;/div&gt;\n  );\n};\n \nexport default SearchPage;\n\nKeep the form clean and layout minimal.\n\n\n Create SearchResultsPage\nUse useParams() for URL parameters (vehicleId, fromCityId, toCityId)\nUse useLocation() and URLSearchParams to read query strings (departing, arriving)\nFetch data from backend using a shared agent\nDisplay a loading state, empty message, and the result list\n\nCode Example:\nimport { useEffect, useState } from &quot;react&quot;;\nimport { useLocation, useParams } from &quot;react-router-dom&quot;;\nimport agent from &quot;@/shared/api/agent&quot;;\nimport { TransportationSearchResult } from &quot;@/shared/models/transportation/transportationSearchResult&quot;;\nimport TransportationCard from &quot;@/features/transportation/transportationCard&quot;;\n \nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n \nconst SearchResultsPage = () =&gt; {\n  const { vehicleId, fromCityId, toCityId } = useParams();\n  const vehicleTypeId = vehicleId ? parseInt(vehicleId, 1) : 1;\n  const fromId = fromCityId ? parseInt(fromCityId, 1) : undefined;\n  const toId = toCityId ? parseInt(toCityId, 1) : undefined;\n \n  const query = useQuery();\n \n  const departing = query.get(&quot;departing&quot;);\n  const arriving = query.get(&quot;arriving&quot;);\n \n \n  const [results, setResults] = useState&lt;TransportationSearchResult[]&gt;([]);\n  const [loading, setLoading] = useState(true);\n \n  \n \n  useEffect(() =&gt; {\n \n    const form = {\n      vehicleTypeId,\n      fromCityId: fromId,\n      toCityId: toId,\n      startDate: departing || null,\n      endDate: arriving || null,\n    };\n \n  \n \n    agent.TransportationSearch.search(form)\n      .then(setResults)\n      .catch((err) =&gt; console.error(err))\n      .finally(() =&gt; setLoading(false));\n  }, [vehicleId, fromCityId, toCityId, departing, arriving]);\n \n \n  return (\n    &lt;div className=&quot;container mx-auto py-6&quot;&gt;\n      &lt;h2 className=&quot;text-2xl font-bold mb-4&quot;&gt;Search Results&lt;/h2&gt;\n      {loading ? (\n        &lt;p&gt;Loading...&lt;/p&gt;\n      ) : results.length === 0 ? (\n        &lt;p&gt;No results found.&lt;/p&gt;\n      ) : (\n        &lt;div className=&quot;space-y-4&quot;&gt;\n          {results.map((r) =&gt; (\n            &lt;TransportationCard key={r.id} transportation={r} /&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n \n    &lt;/div&gt;\n  );\n};\n \n  \n \nexport default SearchResultsPage;\n🔍 SearchResultsPage – Understanding Parameters and Arguments\n\n Check out Session06 Additional Info\n\n\nModifying TransportationSearchForm:\n\nUse this as a reference: link\n\n\n Remove Search Result fetching from inside the component\n Update handleSearch to Navigate with Parameters\n\nconst handleSearch = () =&gt; {\n  if (!form.fromCityId || !form.toCityId || !form.startDate || !form.vehicleTypeId)\n    return;\n \n  const params = new URLSearchParams();\n \n  if (form.startDate instanceof Date)\n    params.append(&quot;departing&quot;, form.startDate.toISOString());\n  else if (typeof form.startDate === &quot;string&quot;)\n    params.append(&quot;departing&quot;, form.startDate);\n \n  if (form.endDate instanceof Date)\n    params.append(&quot;arriving&quot;, form.endDate.toISOString());\n  else if (typeof form.endDate === &quot;string&quot;)\n    params.append(&quot;arriving&quot;, form.endDate);\n \n  navigate(\n    `/${form.vehicleTypeId}/${form.fromCityId}/${form.toCityId}?${params.toString()}`\n  );\n};\nChanges made:\n\nIt checks form validity first.\nThen it builds a URL using URLSearchParams for departing and arriving dates.\nThen it calls navigate(...) to go to a route like:\n/1/2/3?departing=2025-06-15T00%3A00%3A00.000Z&amp;arriving=2025-06-18T00%3A00%3A00.000Z\n\n\n\n\nThat route (/vehicleTypeId/fromCityId/toCityId) will be handled by your SearchResultPage via react-router.\n\n\n\n Used useNavigate from react-router-dom\n\nimport { useNavigate } from &quot;react-router-dom&quot;;\n\n Removed Result Display Section\n\nAdd Routing\n\n Change App.tsx as the following:\n\nimport Navbar from &quot;@/shared/components/navbar&quot;;\nimport &quot;./App.css&quot;;\n  \nimport { BrowserRouter as Router, Routes, Route } from &quot;react-router-dom&quot;;\nimport SearchPage from &quot;@/features/transportation/pages/SearchPage&quot;;\nimport SearchResultsPage from &quot;@/features/transportation/pages/SearchResultsPage&quot;;\n \nfunction App() {\n  return (\n    &lt;Router&gt;\n      &lt;Navbar /&gt; {/* Navbar will show on all pages */}\n      &lt;div className=&quot;pt-16&quot;&gt;\n        {&quot; &quot;}\n        {/* padding top if navbar is fixed */}\n        &lt;Routes&gt;\n          &lt;Route path=&quot;/&quot; element={&lt;SearchPage /&gt;} /&gt;\n          &lt;Route\n            path=&quot;/:vehicleId/:fromCityId/:toCityId&quot;\n            element={&lt;SearchResultsPage /&gt;}\n          /&gt;\n        &lt;/Routes&gt;\n      &lt;/div&gt;\n    &lt;/Router&gt;\n  );\n}\n \nexport default App;\nExplanation of App.jsx\n🔁 Router &amp; Routes:\n\nWraps the entire app in &lt;Router&gt; so that React Router can manage navigation.\n&lt;Routes&gt; contains all the individual page routes.\n\n\n📌 Routes:\n\n/: Loads SearchPage. This is your home/search form.\n/:vehicleId/:fromCityId/:toCityId: Loads SearchResultsPage. This URL carries parameters to display results based on user input.\n\n\n🎯 Navbar Placement:\n\nPlaced outside &lt;Routes&gt;, so it shows on all pages.\n\n\nSetting Up Routing\n\n Install React Router (If you haven’t already)\n\nnpm install react-router-dom\n\n Wrap Your App in Router\n\n&lt;Router&gt;\n  &lt;Navbar /&gt;\n  &lt;Routes&gt;\n    {/* your routes here */}\n  &lt;/Routes&gt;\n&lt;/Router&gt;\n\n Define Routes\n\n&lt;Route path=&quot;/&quot; element={&lt;SearchPage /&gt;} /&gt;\n&lt;Route path=&quot;/:vehicleId/:fromCityId/:toCityId&quot; element={&lt;SearchResultsPage /&gt;} /&gt;\n🚧Merge\n\n Create a PR and merge the current branch with develop\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References"},"02-Project-Based/Session07/Session07-Additional-Info":{"slug":"02-Project-Based/Session07/Session07-Additional-Info","filePath":"02-Project-Based/Session07/Session07 Additional Info.md","title":"Session07 Additional Info","links":[],"tags":[],"content":"AUTHENTICATION METHODS FOR ASP.NET CORE WEB API\n1. JWT (JSON Web Token) Authentication\nMost common for SPAs (like your React frontend)\n\n\n✅ Stateless: No session stored on the server.\n\n\n🔐 Token structure: Header + Payload (including roles) + Signature.\n\n\n🎯 Good for: SPAs, mobile apps, APIs.\n\n\n📦 Libraries: Microsoft.AspNetCore.Authentication.JwtBearer.\n\n\nSetup Highlights:\n\n\nClient sends credentials → API generates token with user roles → Client stores token → Client sends token in Authorization header (Bearer &lt;token&gt;).\n\n\nServer verifies signature and extracts user identity and roles from the token.\n\n\nRole support:\n\n\nYou embed roles inside the JWT (&quot;roles&quot;: [&quot;Admin&quot;, &quot;User&quot;]).\n\n\nUse [Authorize(Roles = &quot;Admin&quot;)].\n\n\n\n2. Cookie-Based Authentication\nTraditional approach for server-rendered apps (not ideal for APIs)\n\n\n🛑 Not recommended for APIs due to CSRF vulnerability and session overhead.\n\n\n🗂 Stores session identifier in browser cookie.\n\n\nUseful when using ASP.NET Core MVC or Razor Pages (not Web API).\n\n\n\n3. OAuth2 + OpenID Connect (OIDC)\nBest for federated login, single sign-on (SSO), or external providers\n\n\n🔗 Integrates with Identity Providers (IDPs) like:\n\n\nAzure AD\n\n\nGoogle, Facebook, GitHub\n\n\nAuth0, Okta, Duende IdentityServer\n\n\n\n\n📦 Library: Microsoft.AspNetCore.Authentication.OpenIdConnect\n\n\nUses access tokens (JWT) issued by an authority.\n\n\nRole support:\n\n\nRoles/claims provided by the Identity Provider.\n\n\nYou map these claims to roles in the API.\n\n\n[Authorize(Roles = &quot;Admin&quot;)] still works.\n\n\n\n4. API Key Authentication\nLightweight alternative (not ideal for user-based roles)\n\n\nClient includes a static API key in headers or query string.\n\n\n🔐 No user context → ❌ no role-based support unless you map API keys to roles in a custom way.\n\n\n🔧 Implemented manually in middleware or filters.\n\n\n\n5. Basic Authentication\n\n\nUser provides username:password in Base64 via Authorization header.\n\n\n❌ Insecure unless used with HTTPS.\n\n\n⚠️ Rarely used anymore — not good for role-based systems or production apps.\n\n\n\n6. ASP.NET Core Identity\nFull-featured user management system (often combined with JWT)\n\n\n✅ Provides login, registration, role management, password hashing, etc.\n\n\n🎯 Good choice if you want to own the user system and manage roles yourself.\n\n\nCan be used with:\n\n\nJWT tokens (custom token generation)\n\n\nCookie auth (not for APIs)\n\n\n\n\n🔧 Use UserManager, RoleManager.\n\n\nExample: Use Identity for creating users and roles, then issue JWTs on login.\n\nSummary Table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMethodStatelessToken-BasedRole SupportIdeal ForJWT Authentication✅✅✅APIs, SPAs (React, etc.)Cookie Authentication❌❌✅Server-side apps onlyOAuth2 + OpenID Connect✅✅✅External login, SSO, enterpriseAPI Key✅❌❌ (manual)Simple apps, service-to-serviceBasic Auth✅❌❌ (manual)Very basic use, not recommendedASP.NET Core Identity❌Optional✅User/Role management\n\nWeb Security and JWT Terms\n🧨 CSP (Content Security Policy)\nDefinition:\nA browser security mechanism that helps prevent XSS attacks by controlling which sources the browser can load content from.\nExample Usage:\nIt can prevent JavaScript from running unless it’s from a trusted source.\nExample CSP header:\nContent-Security-Policy: default-src &#039;self&#039;; script-src &#039;self&#039; trustedscripts.example.com\n\n💥 XSS (Cross-Site Scripting)\nDefinition:\nA vulnerability where an attacker injects malicious JavaScript into a web page that gets executed in a user’s browser.\nWhy It Matters for JWT:\nIf you store JWTs in localStorage, and your app is vulnerable to XSS, the attacker can steal the token and impersonate the user.\nPrevention:\n\n\nNever trust user input (sanitize!)\n\n\nUse CSP headers\n\n\nAvoid inline scripts\n\n\nUse frameworks that auto-escape HTML (like React, Razor)\n\n\n\n📦 Payload (in JWT)\nDefinition:\nThe middle part of a JWT. It contains the claims (user data, permissions, roles, etc.) in a Base64-encoded JSON format.\nExample:\n{\n  &quot;sub&quot;: &quot;1234567890&quot;,\n  &quot;name&quot;: &quot;John Doe&quot;,\n  &quot;role&quot;: &quot;Admin&quot;,\n  &quot;exp&quot;: 1716850984\n}\n⚠️ Note: Payload is not encrypted, just encoded — anyone can read it, but not modify it without invalidating the signature.\n\n✍️ Signature (in JWT)\nDefinition:\nThe third part of the token. It’s a cryptographic hash (HMAC or RSA/ECDSA) of the header and payload, signed with a secret or private key.\nPurpose:\nTo verify that the token hasn’t been tampered with.\nStructure:\nJWT = base64(header) + &#039;.&#039; + base64(payload) + &#039;.&#039; + signature\n\nOnly the server (with the secret key) can validate the signature.\n\n🦠 CSRF (Cross-Site Request Forgery)\nDefinition:\nA vulnerability where an attacker tricks a user’s browser (with a valid session/cookie) into making an unwanted request to your site without the user’s knowledge.\nExample:\nIf you’re logged in and visit a malicious site, that site may submit a POST request using your cookies to perform actions on your behalf.\nWhy It Matters:\n\nIf you store JWTs in HttpOnly cookies, you must guard against CSRF.\n\nDefense:\n\n\nUse SameSite=Strict cookies\n\n\nUse anti-CSRF tokens\n\n\nPrefer Authorization header with tokens (doesn’t auto-send like cookies)\n\n\n\n🧠 Session Overhead\nDefinition:\nThe memory and server resource cost of maintaining a session for each logged-in user on the server.\nWhy It Matters:\n\n\nTraditional cookie-based auth stores session info on the server.\n\n\nWith JWT, the session is stateless (no server memory), reducing overhead and scaling better.\n\n\n\n🔑 Authentication Ecosystem Concepts\n\n🌐 Federated Login\nDefinition:\nUsers log in to your application using another trusted identity provider (IdP), such as:\n\n\nGoogle\n\n\nFacebook\n\n\nMicrosoft\n\n\nGitHub\n\n\nYou delegate authentication to the third party and just receive user info (often as a JWT or OpenID Connect token).\nProtocol Examples:\n\n\nOAuth2\n\n\nOpenID Connect\n\n\n\n🔁 SSO (Single Sign-On)\nDefinition:\nA user logs in once and gains access to multiple systems or applications without logging in again.\nCommon in Enterprises:\n\nLogging into one dashboard gives you access to HR system, email, file storage, etc.\n\nHow It Works:\n\n\nA central identity provider (IdP) issues tokens\n\n\nApplications trust the token and skip login\n\n\nOften uses OAuth2, OpenID Connect, or SAML\n\n\n\n🔄 Summary Table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTermMeaningCSPRestricts sources of scripts/styles to prevent XSSXSSInjected JavaScript that steals data like JWT tokensJWT PayloadJSON with user claims (readable but not secure on its own)JWT SignatureProves the token is untampered (signed by server)CSRFUnauthorized actions using authenticated user’s browser/sessionSession OverheadCost of storing user sessions in memory on the serverFederated LoginLogin using a third-party identity provider (e.g., Google)SSOOne login grants access to multiple trusted systems\nASP.NET Identity vs JWT Authentication\n\n✅ What is ASP.NET Identity?\nASP.NET Identity is a full membership system that:\n\n\nManages users, roles, passwords, claims, tokens, and external logins.\n\n\nStores user data in a database (usually using Entity Framework).\n\n\nWorks well with cookie-based authentication by default.\n\n\nHandles login, logout, registration, password hashing, email confirmation, two-factor auth, etc.\n\n\nDefault storage: SQL Server (via Entity Framework)\n\n🔑 How Authentication Works in ASP.NET Identity (Cookie-Based)\n\n\nLogin request: The user submits a form with username/password.\n\n\nServer validates the credentials using ASP.NET Identity.\n\n\nIf valid, the server issues a cookie (with a session token).\n\n\nThe browser stores this authentication cookie.\n\n\nFor future requests, the browser automatically sends the cookie.\n\n\nThe server validates the cookie (and reads the user session from memory or database).\n\n\n✅ Stateful\n❌ Doesn’t scale well for large APIs unless you add external session storage (like Redis).\n\n🔐 What is JWT Authentication?\nJWT Authentication is:\n\n\nStateless.\n\n\nBased on tokens — not sessions.\n\n\nWorks well for APIs and SPAs/mobile apps.\n\n\nFlow:\n\n\nUser logs in, and if credentials are valid…\n\n\nServer creates a JWT containing user info (e.g., roles).\n\n\nServer signs the token and sends it to the client.\n\n\nClient stores it (e.g., in localStorage or cookies).\n\n\nOn every request, the client sends the JWT in the Authorization header.\n\n\nServer verifies the JWT signature using a secret or key.\n\n\nIf valid → allow access (no server-side session needed).\n\n\n✅ Stateless\n✅ Scales easily\n✅ Good for distributed APIs\n\n📊 Comparison Table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatureASP.NET Identity (Cookie)JWT Authentication (Token-Based)Stateful/StatelessStatefulStatelessStorageCookie on client, session on serverToken on client onlyDefault TransportCookie (auto-sent by browser)Authorization header (manual send)Built-in SupportASP.NET Identity (UI + EF Core)ASP.NET Core + Manual JWT setupScalabilityLimited (server stores session)High (no session to manage)SecurityCookie CSRF riskXSS risk if stored in JS-accessible storageUse CaseWeb apps with UI (MVC, Razor)APIs, SPAs, mobile appsExternal login supportBuilt-inNeeds integrationToken expirationServer-controlled sessionToken has expiration embedded\n\n🚨 Statelessness — What Does It Mean?\n\n\nStateful Authentication: Server stores a session (usually in memory or a database) for each user. The client just stores a cookie with a session ID.\n\n\nWhen user logs in, server keeps a record of that.\n\n\nLogout → delete session.\n\n\n\n\nStateless Authentication (JWT):\n\n\nServer does not remember anything.\n\n\nJWT has all info about the user in itself (claims, roles, expiry).\n\n\nLogout = just delete token on client side (server has no “memory”).\n\n\n\n\n⚠️ You can’t “force logout” someone server-side in pure JWT unless you blacklist tokens manually (or rotate secrets).\n\n💡 Can You Use ASP.NET Identity with JWT?\nYes — ASP.NET Identity can be configured to:\n\n\nAuthenticate user credentials\n\n\nThen issue a JWT instead of using a cookie\n\n\nThis way, you get:\n\n\nASP.NET Identity’s user management\n\n\nJWT’s stateless API authentication\n\n\n\n\nThis is often used in hybrid apps:\n\n\nUse Identity for registration/login\n\n\nUse JWT for frontend and mobile API calls\n\n\nWhat does null! mean?\nIt’s a null-forgiving operator.\nWhen you write:\nstring? maybeNull = null;\nstring definitelyNotNull = null!;  // ← This tells the compiler: “Trust me, it’s not null.”\nYou’re telling the compiler:\n\n“I know this is technically null, but treat it as non-null and don’t warn me.”\n\n\n🧩 Why is this needed?\nC# 8 introduced nullable reference types, where the compiler gives warnings if you assign or use null where it’s not safe.\nFor example:\nstring name = null; // Warning: assigning null to non-nullable reference\nTo silence the warning, you can use null!:\nstring name = null!; // No warning\nBut this is your responsibility: the compiler assumes you’re guaranteeing that it won’t cause a NullReferenceException.\n\n⚠️ When to use null!?\nUse it sparingly and carefully, only when:\n\n\nYou know an object will be initialized later.\n\n\nYou’re working with ORMs like EF Core where properties are set after construction.\n\n\nYou’re dealing with dependency injection and the value is assigned automatically later.\n\n\nExample:\npublic class Account\n{\n    public string PhoneNumber { get; set; } = null!; // EF will populate it\n}\n\n✅ Summary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpressionMeaningnull!”This is null, but treat it as if it’s non-null (trust me).”Use caseAvoiding compiler warnings for nullable reference typesRiskCan lead to runtime NullReferenceException if used incorrectly\n\nLet me know if you want help turning on/off nullable reference types or dealing with EF Core model warnings.\nWhat is a JWT Generator?\nA JWT Generator is a class or service in your backend that:\n\n\nGenerates a signed JWT (JSON Web Token) when a user logs in.\n\n\nEncodes the user’s identity, roles, and other claims.\n\n\nSigns the token with a secret or private key so it can be validated later.\n\n\n\n🔧 Structure of a JWT\nA JWT has 3 parts:\nxxxxx.yyyyy.zzzzz\n\n\nHeader (Base64-encoded JSON):\n{\n  &quot;alg&quot;: &quot;HS256&quot;,\n  &quot;typ&quot;: &quot;JWT&quot;\n}\n\n\nPayload (Base64-encoded JSON):\nContains user data and claims (e.g., user ID, role, expiry).\n{\n  &quot;sub&quot;: &quot;userId123&quot;,\n  &quot;phone&quot;: &quot;0930xxx&quot;,\n  &quot;role&quot;: &quot;Admin&quot;,\n  &quot;exp&quot;: 1717502800\n}\n\n\nSignature:\nHMACSHA256(header + ”.” + payload, secret key)\n\n\n\n✅ What Goes into the Payload?\nInclude things you want to check without querying the DB every time:\n\n\nsub (Subject – usually user ID)\n\n\nphone or username\n\n\nrole (e.g., “Admin”, “User”)\n\n\nexp (expiration timestamp)\n\n\nAny custom claim, like companyId, verified, etc.\n\n\n\n🔐 Signature\nThe signature ensures that the token hasn’t been tampered with. If the signature doesn’t match (due to modification or incorrect secret), the token is invalid.\n\n🧱 Example: JWT Generator in ASP.NET Core\npublic interface IJwtGenerator\n{\n    string GenerateToken(Account account);\n}\npublic class JwtGenerator : IJwtGenerator\n{\n    private readonly IConfiguration _config;\n \n    public JwtGenerator(IConfiguration config)\n    {\n        _config = config;\n    }\n \n    public string GenerateToken(Account account)\n    {\n        var claims = new[]\n        {\n            new Claim(JwtRegisteredClaimNames.Sub, account.Id.ToString()),\n            new Claim(JwtRegisteredClaimNames.PhoneNumber, account.PhoneNumber),\n            new Claim(ClaimTypes.Role, account.Role),\n        };\n \n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config[&quot;Jwt:Key&quot;]!));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n \n        var token = new JwtSecurityToken(\n            issuer: _config[&quot;Jwt:Issuer&quot;],\n            audience: _config[&quot;Jwt:Audience&quot;],\n            claims: claims,\n            expires: DateTime.UtcNow.AddHours(2),\n            signingCredentials: creds\n        );\n \n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n}\n\n🛠 Configuration in appsettings.json\n&quot;Jwt&quot;: {\n  &quot;Key&quot;: &quot;YourSuperSecureSecretKey123!&quot;,\n  &quot;Issuer&quot;: &quot;YourAppName&quot;,\n  &quot;Audience&quot;: &quot;YourFrontendApp&quot;\n}\n\n🧪 Token Validation\nWhen the frontend sends this token on requests (via Authorization: Bearer &lt;token&gt; header), ASP.NET Core automatically validates:\n\n\nSignature (using the same secret)\n\n\nExpiry (exp)\n\n\nAudience, Issuer\n\n\nClaims (like role)\n\n\nThis is done via JwtBearer middleware.\n\n🔐 Roles in the Token?\nYes, you can (and should) include user roles. The backend will automatically enforce [Authorize(Roles = &quot;Admin&quot;)] using that claim.\nBut:\n\n\nDon’t rely only on frontend logic — always protect endpoints on the backend too.\n\n\nFrontend can use roles to hide UI elements, but not for enforcing access.\n\n\n\n🤔 Should You Encrypt the Token?\nNo, standard practice is:\n\n\nDon’t encrypt JWTs — they’re just base64-encoded.\n\n\nDon’t put sensitive data inside.\n\n\nSign them to prevent tampering.\n\n\nSecure the token in frontend (e.g., HttpOnly cookies or localStorage with care).\n\n\n\n✅ Summary of Responsibilities\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponsibilityBackend (JWT Generator)FrontendToken generation✅❌Storing token❌✅ (localStorage / cookie)Sending token❌✅ (Authorization header)Token validation✅ (JwtBearer)❌Role enforcement✅ ([Authorize])✅ (UI-level only)\n\nHow multiple roles in JWT claims work\n\n\nThe JWT claims are basically a list of key-value pairs.\n\n\nFor roles, the key is usually &quot;role&quot; or ClaimTypes.Role.\n\n\nYou add multiple claims with the same key — one for each role.\n\n\nExample:\n{\n  &quot;sub&quot;: &quot;1234567890&quot;,\n  &quot;phone_number&quot;: &quot;123456789&quot;,\n  &quot;role&quot;: &quot;Admin&quot;,\n  &quot;role&quot;: &quot;Editor&quot;,\n  &quot;role&quot;: &quot;User&quot;,\n  &quot;exp&quot;: 1711600000\n}\n\n\nWhen the token is created, it contains multiple &quot;role&quot; entries.\n\n\nOn the backend, ASP.NET Core ClaimsPrincipal reads all of them, so [Authorize(Roles=&quot;Admin,Editor&quot;)] works by checking if any of the roles match.\n\n\n\nHow frontend handles multiple roles in the JWT\n\n\nThe frontend receives the JWT (usually after login).\n\n\nIt decodes the JWT payload (using a library like jwt-decode).\n\n\nIt extracts the roles as an array of strings.\n\n\nExample in React using jwt-decode:\nimport jwtDecode from &#039;jwt-decode&#039;;\n \nconst token = localStorage.getItem(&#039;token&#039;);\nconst decoded = jwtDecode(token);\nconst roles = decoded.role; // roles is usually an array if multiple roles exist\n \nconsole.log(roles); // [&quot;Admin&quot;, &quot;Editor&quot;, &quot;User&quot;]\n\n\nThe frontend can then use these roles to:\n\n\nConditionally render UI components or routes.\n\n\nShow/hide buttons, pages, or features.\n\n\n\n\n\nImportant security note for frontend roles\n\n\nThe frontend can only do UI-level checks based on roles.\n\n\nNever trust frontend role checks to secure data or APIs.\n\n\nThe backend must always verify the token and roles via [Authorize] attributes or middleware.\n\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStepHow it worksJWT creationMultiple &quot;role&quot; claims added to tokenBackend authorizationValidates token and checks if user has required rolesFrontend decodingExtracts role claim(s) as array of stringsFrontend UI controlShows or hides content based on roles"},"02-Project-Based/Session07/Session07-Backend":{"slug":"02-Project-Based/Session07/Session07-Backend","filePath":"02-Project-Based/Session07/Session07 Backend.md","title":"Session07 Backend","links":[],"tags":[],"content":"🛠️ Task Checklist\n🚧 Branching\n\n Create the feature/[name] branch from develop\n\nTask\n\n Task\n📂 Suggested Folder: Domain/Framework/Interfaces/Respositories\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References\nThis file\nAdd a field in Database\n\n Add User field in Roles table using SSMS or Seed data in DbContext file\n Make sure the property PersonId is nullable in Account, so you can add fields related to “Person” later after registration\n\nBranching\n\n Create the feature/authentication branch based on develop\n\nAdjusting Account and Configurations\n\n Add navigation property for AccountRoles in Account\n\npublic virtual ICollection&lt;AccountRole&gt; AccountRoles { get; set; }\n\n Add navigation properties for Account and Role in AccountRole\n\npublic virtual Role Role { get; set; }\npublic virtual Account Account{ get; set; }\n\n Update the entity configuration to reflect relationship mappings:\n\nbuilder.HasOne&lt;Account&gt;(ar =&gt; ar.Account)\n    .WithMany(a =&gt; a.AccountRoles)\n    .HasForeignKey(ar =&gt; ar.AccountId)\n    .OnDelete(DeleteBehavior.Restrict);\n \nbuilder.HasOne&lt;Role&gt;(ar =&gt; ar.Role)\n    .WithMany()\n    .HasForeignKey(ar =&gt; ar.RoleId)\n    .OnDelete(DeleteBehavior.Restrict);\nCreating DTOs\n📂 Suggested Folder: ApplicationLayer/DTOs/[RelatedFolder]\nAccountDto\n\n Create AccountDto to expose relevant account information:\n\npublic class AccountDto\n{\n    public long Id { get; set; }\n    public required string PhoneNumber { get; set; }\n    public required string Password { set; get; }\n    public string? Email { get; set; }\n    public long? PersonId { get; set; }\n    public List&lt;string&gt; Roles { get; set; }\n}\nAuthResponseDto\n\n Define a DTO for authentication responses:\n\npublic class AuthResponseDto\n{\n    public long Id { get; set; }\n    public string Token { get; set; } = null!;\n    public string PhoneNumber { get; set; } = null!;\n    public List&lt;string&gt; Roles { get; set; }\n}\n\n Define a DTO for login requests:\n\npublic class LoginRequestDto\n{\n    public string PhoneNumber { get; set; } = null!;\n    public string Password { get; set; } = null!;\n}\nRegisterRequestDto\n\n Define a DTO for registration with validation attributes:\n\npublic class RegisterRequestDto\n{\n    [Required(ErrorMessage = &quot;Phone number is required.&quot;)]\n    [Phone(ErrorMessage = &quot;Phone number format is invalid.&quot;)]\n    public required string PhoneNumber { get; set; }\n \n    [Required(ErrorMessage = &quot;Password is required.&quot;)]\n    [MinLength(6, ErrorMessage = &quot;Password must be at least 6 characters long.&quot;)]\n    public required string Password { get; set; }\n \n    [Compare(&quot;Password&quot;, ErrorMessage = &quot;Passwords do not match.&quot;)]\n    public required string ConfirmPassword { get; set; }\n}\n🔹 1. What do the annotations like [Required], [Phone], [MinLength], [Compare] on the DTO do?\nThese are Data Annotations from System.ComponentModel.DataAnnotations.\nThey’re used by:\n\n\nThe ASP.NET Core [ApiController] attribute\n\n\nModel binding &amp; automatic validation\n\n\nWhat happens:\nIf your controller is marked with [ApiController], ASP.NET Core will automatically validate the DTO against these annotations before entering your action method.\nExample:\n[ApiController]\npublic class AuthController : ControllerBase\nThen this:\n[HttpPost(&quot;register&quot;)]\npublic async Task&lt;IActionResult&gt; Register(RegisterRequestDto dto)\nIf dto.PhoneNumber is missing, it won’t even run your logic, and will return a 400 Bad Request with validation errors.\n\n“Why are these here if my frontend is separate?”\n\n✅ Answer: They’re still useful:\n\n\nFor security and safety: you must validate on the backend — never trust the frontend.\n\n\nFor auto validation before hitting your logic — saving you boilerplate checks.\n\n\nYou can use them for Swagger/OpenAPI documentation as well.\n\n\nFrontend validation is for user experience, not security.\n\n🔹 2. Where should password requirements be checked? Frontend or backend?\n✅ Both.\n\nFrontend: show real-time UX feedback (“Password must be 6+ characters”).\nBackend: enforce security.\n\nBackend is the source of truth.\nFrontend can be bypassed (e.g., Postman).\nIn the backend, you can either:\n\nUse annotations like [MinLength(6)]\nOr do manual checks:\n\nif (dto.Password.Length &lt; 6)\n    return BadRequest(&quot;Password must be at least 6 characters long.&quot;);\n\n🔹 3. Should confirm password be in the backend?\n✅ Yes — if you’re doing password comparison in backend.\n\n\n[Compare(&quot;Password&quot;)] will validate if ConfirmPassword matches.\n\n\nOtherwise, you’ll need to check manually.\n\n\nYou can skip sending ConfirmPassword to backend and just validate in frontend if you’re confident your frontend handles it.\nBut again: if someone sends malformed input manually (e.g., via Postman), backend should defend.\n💡 Best practice:\n\nValidate ConfirmPassword in frontend (UX)\nDo one last check in backend, or use [Compare] for auto-validation\n\n\n🔹 4. Is it OK to send plain password in request? Or should we hash it on frontend?\n✅ YES — it is OK and standard to send raw password in the login/signup request.\nWhy?\n\n\nPasswords are sent over HTTPS, which encrypts the entire request.\n\n\nHashing on frontend is not secure, because:\n\n\nYour algorithm/salt would be exposed\n\n\nIt defeats the purpose of salting and hashing correctly\n\n\nYou lose control over security management\n\n\n\n\n🔹 5. Error Response from Automatic Model Validation\nIf your DTO looks like this:\npublic class RegisterRequestDto\n{\n    [Required(ErrorMessage = &quot;Phone number is required.&quot;)]\n    [Phone(ErrorMessage = &quot;Phone number format is invalid.&quot;)]\n    public string PhoneNumber { get; set; }\n \n    [Required(ErrorMessage = &quot;Password is required.&quot;)]\n    [MinLength(6, ErrorMessage = &quot;Password must be at least 6 characters long.&quot;)]\n    public string Password { get; set; }\n \n    [Compare(&quot;Password&quot;, ErrorMessage = &quot;Passwords do not match.&quot;)]\n    public string ConfirmPassword { get; set; }\n}\nAnd the frontend sends this:\n{\n  &quot;phoneNumber&quot;: &quot;&quot;,\n  &quot;password&quot;: &quot;123&quot;,\n  &quot;confirmPassword&quot;: &quot;abc&quot;\n}\nThe backend will automatically return:\n{\n  &quot;type&quot;: &quot;tools.ietf.org/html/rfc7231#section-6.5.1&quot;,\n  &quot;title&quot;: &quot;One or more validation errors occurred.&quot;,\n  &quot;status&quot;: 400,\n  &quot;errors&quot;: {\n    &quot;PhoneNumber&quot;: [\n      &quot;Phone number is required.&quot;\n    ],\n    &quot;Password&quot;: [\n      &quot;Password must be at least 6 characters long.&quot;\n    ],\n    &quot;ConfirmPassword&quot;: [\n      &quot;Passwords do not match.&quot;\n    ]\n  }\n}\nThis is thanks to [ApiController] on your controller class. The framework uses the ModelState and returns errors in a structured way.\n\nAdding Mappings\n\n Update MappingProfile with the following mappings:\n\nCreateMap&lt;Account, AccountDto&gt;()\n    .ForMember(dest =&gt; dest.Roles, opt =&gt; opt.MapFrom(src =&gt; src.AccountRoles.Select(x=&gt;x.Role.Title)));\nCreateMap&lt;AccountDto, Account&gt;() \n.ForMember(dest =&gt; dest.AccountRoles, opt =&gt; opt.Ignore());\nAdd Password Hasher Utility\n\n Create a password hashing utility class\n📂 Suggested Folder: ApplicationLayer/Utils/PasswordHasher.cs\n\npublic static class PasswordHasher\n{\n    public static string HashPassword(string password)\n    {\n        byte[] salt = RandomNumberGenerator.GetBytes(16);\n \n        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100000, HashAlgorithmName.SHA256);\n        byte[] hash = pbkdf2.GetBytes(32);\n \n        byte[] hashBytes = new byte[48];\n        Array.Copy(salt, 0, hashBytes, 0, 16);\n        Array.Copy(hash, 0, hashBytes, 16, 32);\n \n        return Convert.ToBase64String(hashBytes);\n    }\n \n    public static bool VerifyPassword(string password, string hashedPassword)\n    {\n        byte[] hashBytes = Convert.FromBase64String(hashedPassword);\n \n        byte[] salt = new byte[16];\n        Array.Copy(hashBytes, 0, salt, 0, 16);\n \n        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100000, HashAlgorithmName.SHA256);\n        byte[] hash = pbkdf2.GetBytes(32);\n \n        for (int i = 0; i &lt; 32; i++)\n        {\n            if (hashBytes[i + 16] != hash[i])\n                return false;\n        }\n \n        return true;\n    }\n}\nModifying Account Repository\n\n Add the following methods in IAccountRepository\n\nTask&lt;Account&gt; GetByPhoneNumberAsync(string phoneNumber);\nTask AddAccountRoleAsync(AccountRole accountRole);\n\n Implement the methods in AccountRepository\n\n public async Task AddAccountRoleAsync(AccountRole accountRole)\n {\n     await DbContext.AccountRoles.AddAsync(accountRole);\n }\n \n public async Task&lt;Account&gt; GetByPhoneNumberAsync(string phoneNumber)\n {\n     var user = await DbContext.Accounts.Include(x =&gt; x.AccountRoles).ThenInclude(x =&gt; x.Role).FirstOrDefaultAsync(x =&gt; x.PhoneNumber == phoneNumber);\n     return user;\n }\nCreating Service\nFix Result.cs Error Method\n\n Update the Error method to include error messages:\n\npublic static Result&lt;T&gt; Error(T data, string errorMessage) =&gt; new() { Status = ResultStatus.Error, Data = data, ErrorMessage = errorMessage };\nCreating IAuthService.cs and AuthService.cs\n\n Define the IAuthService interface\n\npublic interface IAuthService\n{\n    Task&lt;Result&lt;AuthResponseDto&gt;&gt; RegisterAsync(RegisterRequestDto request);\n    Task&lt;Result&lt;AuthResponseDto&gt;&gt; LoginAsync(LoginRequestDto request);\n}\n\n Implement the interface in AuthService.cs\n\nUse this project as a reference:\ngithub.com/MehrdadShirvani/AlibabaClone-Backend/blob/develop/AlibabaClone.Application/Services/AuthService.cs\nRegister IAuthService in Service in Program.cs\n\n Add to Program.cs\n\n//...\nbuilder.Services.AddScoped&lt;IAuthService, AuthService&gt;();\n//...\nAdding JWT\nInstalling Required NuGet Packages\nInstall these packages in the WebApi (Presentation Layer) project:\nMicrosoft.AspNetCore.Authentication.JwtBearer\nMicrosoft.IdentityModel.Tokens\nSystem.IdentityModel.Tokens.Jwt\n\nCreate JWT Configuration Classes\n\n Add JWT section to appsettings.json\n\n&quot;Jwt&quot;: {\n\t&quot;Key&quot;: &quot;[supersecretkeyyoustoresecurely]&quot;,\n\t&quot;Issuer&quot;: &quot;[Issuer]&quot;,\n\t&quot;Audience&quot;: &quot;MyAppUsers&quot;,\n\t&quot;ExpiryMinutes&quot;: 60\n}\nNote that you should fill the values as you wish - these are just samples\n\n Create  JwtSettings and add the following method\n📂 Suggested Folder: WebAPI/Authentication\n\npublic class JwtSettings\n{\n    public string Key { get; set; } = null!;\n    public string Issuer { get; set; } = null!;\n    public string Audience { get; set; } = null!;\n    public int ExpiryMinutes { get; set; }\n}\n\n Create  IJwtGenerator and add the following method\n📂 Suggested Folder: WebAPI/Authentication\n\nstring GenerateToken(AuthResponseDto authResponseDto);\n\n Create  JwtGenerator, implementing IJwtGenerator\n📂 Suggested Folder: WebAPI/Authentication\n\nuse this project as a reference\ngithub.com/MehrdadShirvani/AlibabaClone-Backend/blob/develop/AlibabaClone.WebAPI/Authentication/JwtGenerator.cs\nConfiguring Jwt in Program.cs\n\n Register JwtGenerator service\n\nbuilder.Services.AddScoped&lt;IJwtGenerator, JwtGenerator&gt;();\n\n Bind JwtSettings from configuration\n\nbuilder.Services.Configure&lt;JwtSettings&gt;(builder.Configuration.GetSection(&quot;Jwt&quot;));\n\n Configure JWT authentication\n\nvar jwtSettings = builder.Configuration.GetSection(&quot;Jwt&quot;).Get&lt;JwtSettings&gt;();\nbuilder.Services.AddAuthentication(&quot;Bearer&quot;)\n    .AddJwtBearer(&quot;Bearer&quot;, options =&gt;\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidIssuer = jwtSettings.Issuer,\n \n            ValidateAudience = true,\n            ValidAudience = jwtSettings.Audience,\n \n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key)),\n \n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.Zero\n        };\n    });\n \nbuilder.Services.AddAuthorization();\n \n\n Add app.UseAuthentication before app.UseAuthorization\n\napp.UseAuthentication();\napp.UseAuthorization();\nAdd ApiControllers\n\n\n Create AuthController\n📂 Suggested Folder: WebApi/Controllers/AuthController.cs\n\n\n Add Class and Constructor\n\n\nprivate readonly IAuthService _authService;\nprivate readonly IJwtGenerator _jwtGenerator;\n \npublic AuthController(IAuthService authService, IJwtGenerator jwtGenerator)\n{\n    _authService = authService;\n    _jwtGenerator = jwtGenerator;\n}\n\n Add Register Method\n\npublic async Task&lt;IActionResult&gt; Register(RegisterRequestDto request)\n{\n    var result = await _authService.RegisterAsync(request);\n \n    if (!result.IsSuccess)\n        return BadRequest(result.ErrorMessage);\n \n    var token = _jwtGenerator.GenerateToken(result.Data);\n    var response = new AuthResponseDto\n    {\n        PhoneNumber = result.Data.PhoneNumber,\n        Roles = result.Data.Roles,\n        Token = token\n    };\n \n    return Ok(response);\n}\n\n Add Login Method\n\n [HttpPost(&quot;login&quot;)]\n public async Task&lt;IActionResult&gt; Login(LoginRequestDto request)\n {\n     var result = await _authService.LoginAsync(request);\n \n     if (!result.IsSuccess)\n         return Unauthorized(result.ErrorMessage);\n \n     var token = _jwtGenerator.GenerateToken(result.Data);\n     var response = new AuthResponseDto\n     {\n         PhoneNumber = result.Data.PhoneNumber,\n         Roles = result.Data.Roles,\n         Token = token\n     };\n \n     return Ok(response);\n }\n\n Create AccountController\n📂 Suggested Folder: WebApi/Controllers/AccountController.cs\n\npublic class AccountController : ControllerBase\n{\n    [Authorize(Roles = &quot;User&quot;)]\n    [HttpGet(&quot;profile&quot;)]\n    public IActionResult GetProfile()\n    {\n        return Ok(&quot;Hi there, hello&quot;);\n    }\n}\nMerge\n\n Create a PR and merge the current branch with develop\n"},"02-Project-Based/Session07/Session07-Frontend":{"slug":"02-Project-Based/Session07/Session07-Frontend","filePath":"02-Project-Based/Session07/Session07 Frontend.md","title":"Session07 Frontend","links":[],"tags":[],"content":"Branching\n\n Create the feature/authentication branch based on develop\n\nAdding Models\nCreate three files inside this folder:\n📂 Suggested Folder: shared/models/authentication\n\n AuthResponseDto.ts\n\nexport interface AuthResponseDto {\n  token: string;\n  phoneNumber: string;\n  roles: string[];\n}\n\n LoginRequestDto.ts\n\nexport interface LoginRequestDto {\n  phoneNumber: string;\n  password: string;\n}\n\n RegisterRequestDto.ts\n\nexport interface RegisterRequestDto {\n  phoneNumber: string;\n  password: string;\n  confirmPassword: string;\n}\nAdding Authentication API Calls in agent.ts\n\n Add the Auth object to agent.ts:\n\nconst Auth = {\nregister: (data: RegisterRequestDto) =&gt;\n    request.post&lt;{ token: string }&gt;(&#039;/auth/register&#039;, data),\nlogin: (data: LoginRequestDto) =&gt;\n    request.post&lt;{ token: string }&gt;(&#039;/auth/login&#039;, data),\n};\n\n Ensure agent.ts ends like this:\n\nconst agent = {\n    TransportationSearch,\n    Cities,\n    Auth\n}\nCreating authStore.ts\nSuggested Folder\n📂 Suggested Folder: shared/store/\n\n Create authStore.ts\n\nimport { AuthResponseDto } from &#039;@/shared/models/authentication/AuthResponseDto&#039;;\nimport {create} from &#039;zustand&#039;;\n \ninterface User {\n  phoneNumber: string;\n  roles: string[];\n}\n \n  \n \ninterface AuthState {\n  isLoggedIn: boolean;\n  user: User | null;\n  token: string | null;\n  login: (response: AuthResponseDto) =&gt; void;\n  logout: () =&gt; void;\n  setToken: (token: string) =&gt; void;\n}\n \n  \n \nexport const useAuthStore = create&lt;AuthState&gt;((set) =&gt; ({\n  isLoggedIn: false,\n  user: null,\n  token: null,\n \n \n  login: (response) =&gt;\n  set(() =&gt; ({\n    token: response.token,\n    user: {\n      phoneNumber: response.phoneNumber,\n      roles: response.roles\n    },\n \n    isLoggedIn: true,\n  })),\n \n  logout: () =&gt;\n    set(() =&gt; ({\n      token: null,\n      user: null,\n      isLoggedIn: false,\n    })),\n \n  \n \n  setToken: (token) =&gt;\n    set((state) =&gt; ({\n      token,\n      isLoggedIn: !!token,\n      user: state.user,\n    })),\n}));\nAbout authStore.ts\nThis file defines a centralized authentication state store using Zustand, a minimal and scalable state management library for React. It helps manage login state, user data, and authentication token across your application.\n\n🔹 User Interface\ninterface User {\n  phoneNumber: string;\n  roles: string[];\n}\nThis interface defines the shape of the user object stored in the auth state. It currently includes:\n\nphoneNumber: A string representing the user’s phone number.\nroles: An array representing user roles\n\n\n🔹 AuthState Interface\ninterface AuthState {\n  isLoggedIn: boolean;\n  user: User | null;\n  token: string | null;\n  login: (response: AuthResponseDto) =&gt; void;\n  logout: () =&gt; void;\n  setToken: (token: string) =&gt; void;\n}\nThis defines the overall structure of the authentication store:\n\nisLoggedIn: Indicates whether a user is logged in.\nuser: Stores user-specific data if authenticated; otherwise null.\ntoken: JWT or access token from the server.\nlogin(): Accepts an AuthResponseDto and updates the state.\nlogout(): Clears all authentication-related data.\nsetToken(): Sets the token and toggles login status accordingly.\n\n\n🔹 Zustand Store Definition\nexport const useAuthStore = create&lt;AuthState&gt;((set) =&gt; ({ ... });\nCreates a global auth store using Zustand. create() accepts a function that receives set (used to update state) and returns the initial store state and methods.\n\n🔹 Initial State\nisLoggedIn: false,\nuser: null,\ntoken: null,\nThese lines define the initial, default state for an unauthenticated user.\n\n🔹 login() Method\nlogin: (response) =&gt;\n  set(() =&gt; ({\n    token: response.token,\n    user: {\n      phoneNumber: response.phoneNumber,\n      roles: response.roles\n    },\n    isLoggedIn: true,\n  })),\n\n\nAccepts an AuthResponseDto object after a successful login.\n\n\nExtracts the token, phoneNumber, and roles, and sets them in state.\n\n\nMarks the user as isLoggedIn: true.\n\n\n\n🔹 logout() Method\nlogout: () =&gt;\n  set(() =&gt; ({\n    token: null,\n    user: null,\n    isLoggedIn: false,\n  })),\n\n\nClears all auth-related data (token and user).\n\n\nEffectively logs the user out by setting isLoggedIn to false.\n\n\n\n🔹 setToken() Method\nsetToken: (token) =&gt;\n  set((state) =&gt; ({\n    token,\n    isLoggedIn: !!token,\n    user: state.user,\n  })),\n\n\nUpdates the token in the store.\n\n\nSets isLoggedIn based on whether a non-empty token exists.\n\n\nRetains the current user object.\n\n\n\nAdd LoginModal\n📂 Suggested Folder: shared/features/authentication/modals\nExample\nimport React, { useState } from &quot;react&quot;;\nimport { useAuthStore } from &quot;@/store/authStore&quot;;\nimport agent from &quot;@/shared/api/agent&quot;;\nimport { LoginRequestDto } from &quot;@/shared/models/authentication/LoginRequestDto&quot;;\n \ninterface LoginModalProps {\n  onClose: () =&gt; void;\n}\n \n  \n \nconst LoginModal: React.FC&lt;LoginModalProps&gt; = ({ onClose }) =&gt; {\n  \n  const login = useAuthStore((state) =&gt; state.login);\n \n  const [form, setForm] = useState&lt;LoginRequestDto&gt;({\n    phoneNumber: &quot;&quot;,\n    password: &quot;&quot;,\n  });\n \n  const [error, setError] = useState&lt;string | null&gt;(null);\n \n  const validate = () =&gt; {\n    const phoneRegex = /^(?:\\+98|0)?9\\d{9}$/;\n    if (!phoneRegex.test(form.phoneNumber)) {\n      return &quot;Invalid phone number format&quot;;\n    }\n \n    if (!form.password || form.password.length &lt; 8) {\n      return &quot;Password must be at least 8 characters&quot;;\n    }\n    return null;\n  };\n \n  const handleSubmit = async () =&gt; {\n    const validationError = validate();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n \n    try {\n      const response = await agent.Auth.login(form);\n      login(response);\n      setError(null);\n      onClose();\n    } catch (err: any) {\n      setError(err.response?.message || &quot;Login failed&quot;);\n    }\n  };\n \n  \n \n  return (\n    &lt;div style={styles.overlay}&gt;\n      &lt;div style={styles.modal}&gt;\n        &lt;h2 style={{ marginBottom: &quot;1rem&quot; }}&gt;Login&lt;/h2&gt;\n        &lt;input\n          type=&quot;text&quot;\n          placeholder=&quot;Phone Number&quot;\n          value={form.phoneNumber}\n          onChange={(e) =&gt; setForm({ ...form, phoneNumber: e.target.value })}\n          style={styles.input}\n        /&gt;\n \n        &lt;input\n          type=&quot;password&quot;\n          placeholder=&quot;Password&quot;\n          value={form.password}\n          onChange={(e) =&gt; setForm({ ...form, password: e.target.value })}\n          style={styles.input}\n        /&gt;\n        &lt;button onClick={handleSubmit} style={styles.button}&gt;\n          Login\n        &lt;/button&gt;\n        {error &amp;&amp; (\n          &lt;p style={{ color: &quot;red&quot;, marginTop: &quot;0.5rem&quot;, fontWeight: &quot;bold&quot; }}&gt;\n            {error}\n          &lt;/p&gt;\n        )}\n \n        &lt;button\n          onClick={onClose}\n          style={{\n            ...styles.button,\n            marginTop: &quot;0.5rem&quot;,\n            backgroundColor: &quot;#ccc&quot;,\n            color: &quot;#333&quot;,\n          }}\n        &gt;\n          Cancel\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n \nconst styles: { [key: string]: React.CSSProperties } = {\n\t//ADD STYLES\n};\n \nexport default LoginModal;\nAbout LoginModal\nThis component provides a modal UI that allows users to log in using their phone number and password. It integrates with the authentication store and API to perform login logic and handle errors.\n\n🔹 Props Interface\ninterface LoginModalProps {\n  onClose: () =&gt; void;\n}\n\nonClose: A callback to be called when the modal should be closed (e.g., user clicks “Cancel” or logs in successfully).\n\n\n🔹 Component Setup\nconst LoginModal: React.FC&lt;LoginModalProps&gt; = ({ onClose }) =&gt; { ... };\nDefines a functional React component with the onClose prop destructured.\n🔸 Accessing Auth Store\nconst login = useAuthStore((state) =&gt; state.login);\nRetrieves the login method from Zustand’s authStore so that the global auth state can be updated after successful login.\n🔸 Local Form State\nconst [form, setForm] = useState&lt;LoginRequestDto&gt;({\n  phoneNumber: &quot;&quot;,\n  password: &quot;&quot;,\n});\nInitializes form state with empty values for the phone number and password.\n🔸 Error Handling State\nconst [error, setError] = useState&lt;string | null&gt;(null);\nStores any error messages resulting from validation or login attempt.\n\n🔹 Validation Logic\nconst validate = () =&gt; {\n  const phoneRegex = /^(?:\\+98|0)?9\\d{9}$/;\n  if (!phoneRegex.test(form.phoneNumber)) {\n    return &quot;Invalid phone number format&quot;;\n  }\n \n  if (!form.password || form.password.length &lt; 8) {\n    return &quot;Password must be at least 8 characters&quot;;\n  }\n  return null;\n};\n\nValidates the phone number format (Iranian phone format in this case).\nEnsures password is at least 8 characters long.\nReturns a string error message or null if validation passes.\n\n\n🔹 Submit Handler\nconst handleSubmit = async () =&gt; {\n  const validationError = validate();\n  if (validationError) {\n    setError(validationError);\n    return;\n  }\n \n  try {\n    const response = await agent.Auth.login(form);\n    login(response);\n    setError(null);\n    onClose();\n  } catch (err: any) {\n    setError(err.response?.message || &quot;Login failed&quot;);\n  }\n};\n\nCalls validate() and prevents submission if there’s an error.\nCalls the backend API using agent.Auth.login().\nOn success: updates auth state, clears error, closes modal.\nOn failure: shows error message.\n\n\n🔹 UI Layout\nreturn (\n  &lt;div style={styles.overlay}&gt;\n    &lt;div style={styles.modal}&gt;\n      &lt;h2&gt;Login&lt;/h2&gt;\n      &lt;input ... /&gt;\n      &lt;input ... /&gt;\n      &lt;button onClick={handleSubmit}&gt;Login&lt;/button&gt;\n      {error &amp;&amp; &lt;p&gt;{error}&lt;/p&gt;}\n      &lt;button onClick={onClose}&gt;Cancel&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n);\nElements:\n\n\nPhone Number Input\n\n\nPassword Input\n\n\nLogin Button: Triggers handleSubmit.\n\n\nError Message: Shown only if there’s an error.\n\n\nCancel Button: Triggers onClose callback.\n\n\n\n🔹 Styles Placeholder\nconst styles: { [key: string]: React.CSSProperties } = {\n  // Add modal styles here\n};\nThis placeholder defines inline CSS styles for the modal. Each style (e.g., overlay, modal, input, button) should be defined here.\n\n✅ Summary\nThis modal:\n\n\nProvides a simple, reusable login form.\n\n\nValidates input before calling the API.\n\n\nUpdates global auth state via Zustand.\n\n\nHandles success/failure states.\n\n\nUses modal-friendly inline styles (with room for improvement).\n\n\n\nAdd RegisterModal\n\n Create RegisterModal\n📂 Suggested Folder: shared/features/authentication/modals\n\nimport agent from &quot;@/shared/api/agent&quot;;\nimport { RegisterRequestDto } from &quot;@/shared/models/authentication/RegisterRequestDto&quot;;\nimport { useAuthStore } from &quot;@/store/authStore&quot;;\nimport React, { useState } from &quot;react&quot;;\n \n \ninterface Props {\n  onClose: () =&gt; void;\n}\n \n \nconst RegisterModal: React.FC&lt;Props&gt; = ({ onClose }) =&gt; {\n \n  const [form, setForm] = useState&lt;RegisterRequestDto&gt;({\n    phoneNumber: &quot;&quot;,\n    password: &quot;&quot;,\n    confirmPassword: &quot;&quot;,\n  });\n \n  const [error, setError] = useState&lt;string | null&gt;(null);\n \n  const login = useAuthStore((state) =&gt; state.login);\n  \n  const validate = () =&gt; {\n \n    const { phoneNumber, password, confirmPassword } = form;\n    if (!phoneNumber || !password || !confirmPassword) {\n      return &quot;All fields are required.&quot;;\n    }\n \n    if (!/^\\d{11}$/.test(phoneNumber)) {\n      return &quot;Phone number must be 11 digits.&quot;;\n    }\n \n    if (password.length &lt; 6) {\n      return &quot;Password must be at least 6 characters.&quot;;\n    }\n \n    if (password !== confirmPassword) {\n      return &quot;Passwords do not match.&quot;;\n    }\n \n    return null;\n  };\n \n  \n \n  const handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setForm({ ...form, [e.target.name]: e.target.value });\n  };\n \n  \n \n  const handleSubmit = async (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    setError(null);\n    \n    const validationError = validate();\n \n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n \n  \n \n    try {\n \n      // Use the form as RegisterRequestDto explicitly\n \n      const requestData: RegisterRequestDto = {\n        phoneNumber: form.phoneNumber,\n        password: form.password,\n        confirmPassword: form.confirmPassword,\n      };\n \n  \n \n      const response = await agent.Auth.register(requestData);\n      login(response);\n      setForm({ phoneNumber: &quot;&quot;, password: &quot;&quot;, confirmPassword: &quot;&quot; });\n      onClose();\n    } catch (err: any) {\n      setError(err.response?.message || &quot;Registration failed.&quot;);\n    }\n  };\n \n  return (\n    &lt;div style={styles.overlay}&gt;\n      &lt;div style={styles.modal}&gt;\n        &lt;h2 style={{ marginBottom: &quot;1rem&quot; }}&gt;Register&lt;/h2&gt;\n        &lt;form\n          onSubmit={handleSubmit}\n          style={{ display: &quot;flex&quot;, flexDirection: &quot;column&quot; }}\n        &gt;\n \n          &lt;input\n            type=&quot;text&quot;\n            name=&quot;phoneNumber&quot;\n            value={form.phoneNumber}\n            onChange={handleChange}\n            placeholder=&quot;Phone Number&quot;\n            style={styles.input}\n          /&gt;\n \n          &lt;input\n            type=&quot;password&quot;\n            name=&quot;password&quot;\n            value={form.password}\n            onChange={handleChange}\n            placeholder=&quot;Password&quot;\n            style={styles.input}\n          /&gt;\n \n          &lt;input\n            type=&quot;password&quot;\n            name=&quot;confirmPassword&quot;\n            value={form.confirmPassword}\n            onChange={handleChange}\n            placeholder=&quot;Confirm Password&quot;\n            style={styles.input}\n          /&gt;\n \n          {error &amp;&amp; (\n \n            &lt;p\n              style={{ color: &quot;red&quot;, marginTop: &quot;0.5rem&quot;, fontWeight: &quot;bold&quot; }}\n            &gt;\n              {error}\n            &lt;/p&gt;\n          )}\n \n          &lt;button type=&quot;submit&quot; style={styles.button}&gt;\n            Register\n          &lt;/button&gt;\n \n        &lt;/form&gt;\n \n        &lt;button\n \n          onClick={onClose}\n \n          style={{\n            ...styles.button,\n            marginTop: &quot;0.5rem&quot;,\n            backgroundColor: &quot;#ccc&quot;,\n            color: &quot;#333&quot;,\n          }}\n        &gt;\n          Cancel\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n \n  \n \nconst styles: { [key: string]: React.CSSProperties } = {\n\t//ADD STYLES\n};\n \nexport default RegisterModal;\nAbout RegisterModal\nComponent Structure\n1. Props\ninterface Props {\n  onClose: () =&gt; void;\n}\n\nThe modal only expects one prop: onClose, a function to close the modal (e.g., hide it from the screen).\n\n\n2. State Management\nconst [form, setForm] = useState&lt;RegisterRequestDto&gt;({\n  phoneNumber: &quot;&quot;,\n  password: &quot;&quot;,\n  confirmPassword: &quot;&quot;,\n});\n\nInitializes the form state for inputs, based on the RegisterRequestDto shape.\n\nconst [error, setError] = useState&lt;string | null&gt;(null);\n\nStores any validation or server error message to display in the UI.\n\nconst login = useAuthStore((state) =&gt; state.login);\n\nAccesses the login method from your global auth store, to automatically log in the user after successful registration.\n\n\n3. Validation Logic\nconst validate = () =&gt; {\n  // Checks for empty fields\n  // Validates phone number format (must be 11 digits)\n  // Ensures password length is sufficient\n  // Confirms password and confirmation match\n};\n\nEnsures client-side validation before making a request to the server.\n\n\n4. Input Handling\nconst handleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n  setForm({ ...form, [e.target.name]: e.target.value });\n};\n\nUpdates the correct field in the form object dynamically based on the input name.\n\n\n5. Form Submission\nconst handleSubmit = async (e: React.FormEvent) =&gt; {\n  e.preventDefault();\n  setError(null);\n  const validationError = validate();\n  // If validation passes, submit the data to the backend\n  // If backend response is successful, log in and close modal\n  // If it fails, show error message\n};\n\nPrevents default form submission\nValidates inputs\nSends the data to agent.Auth.register\nOn success: logs in user and clears form\nOn failure: shows error from server\n\n\n6. JSX Render\n&lt;div style={styles.overlay}&gt;...&lt;/div&gt;\n\nModal Overlay: darkened background behind the modal\nModal Box: contains title, form, and buttons\n\nInside &lt;form&gt;:\n\n\nInputs for:\n  - phoneNumber\n  - password\n  - confirmPassword\n\n\nSubmit button for Register\n\n\nError message display (if any)\n\n\nCancel button that calls onClose\n\n\n\nHandle login/logout and register buttons in navbar\n\n implement a way for showing login and register buttons in navbar when user is not signed in\n when clicked, the button should show the related modal, for the user to sign in or register\n\nMerge\n\n Create a PR and merge the current branch with develop\n"},"02-Project-Based/Session08/Session08-Backend":{"slug":"02-Project-Based/Session08/Session08-Backend","filePath":"02-Project-Based/Session08/Session08 Backend.md","title":"Session08 Backend","links":[],"tags":[],"content":"🛠️ Task Checklist\nFixes\n\n\n Check for missing .ValueGeneratedOnAdd() in all entity configurations in Infrastructure/Configurations.\n\n\n Adjust the database setup according to the second version of ERD\n\n\nSome aggregates are added/modified to generate the new database\n\n\nNew ERD: Here\n\n\nNote: Pay attention to the changes in logic and implementation of Person table (Id number is not unique anymore). So remove this code in PersonConfiguration:\nbuilder.HasIndex(p =&gt; p.IdNumber)\n    .IsUnique();\n\n\n\n\n Add actual data in TicketStatus, Gender, TransactionTypes\n\nYou can either add the data in DbContext or the database itself\n\n\n\n Add data in Seat, Person, TicketOrder, Transaction, Ticket for test. It is recommended to write python code for generating data for Seat table, according to the data already stored in Transportation and related Vehicle data. There is also a SeatGenerator in this repository, as well.\n\n\n Fix claim extraction (sub → standardize JWT claim mapping). (IUserContext implementation)\n\n\nFirst, create an interface in Application layer:\npublic interface IUserContext\n{\n    long GetUserId();\n}\nThen, implement it in WebAPI in Auth folder:\npublic class UserContext : IUserContext\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n \n    public UserContext(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n \n    public long GetUserId()\n    {\n        var userIdStr = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        if (long.TryParse(userIdStr, out var userId))\n        {\n            return userId;\n        }\n        throw new InvalidOperationException(&quot;User ID is not available or invalid.&quot;);\n    }\n}\nFinally, register things in Program.cs\n// register user context\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddScoped&lt;IUserContext, UserContext&gt;();\n✅ Profile Page (Account Info Tab)\n\n  Create ProfileDto to represent combined data for account, person, bank detail, balance.\n\npublic class ProfileDto\n{\n    // from account\n    public string AccountPhoneNumber { get; set; }\n    public string Email { get; set; }\n    public decimal Balance { get; set; }\n \n    // from person\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string IdNumber { get; set; }\n    public string PersonPhoneNumber { get; set; }\n    public DateTime? BirthDate { get; set; }\n \n    // from bank-account\n    public string IBAN { get; set; }\n    public string BankAccountNumber { get; set; }\n    public int CardNumber { get; set; }\n}\nYou can also find another version of this DTO in Here\n\n\n Add GetProfileAsync in AccountRepository and expose via AccountController.\n\nFirst, map dto to aggregate\n\nCreateMap&lt;Account, ProfileDto&gt;()\n.ForMember(dest =&gt; dest.PhoneNumber, opt =&gt; opt.MapFrom(src =&gt; src.PhoneNumber))\n.ForMember(dest =&gt; dest.Email, opt =&gt; opt.MapFrom(src =&gt; src.Email))\n.ForMember(dest =&gt; dest.Balance, opt =&gt; opt.MapFrom(src =&gt; src.Balance))\n.ForMember(dest =&gt; dest.FirstName, opt =&gt; opt.MapFrom(src =&gt; src.Person != null ? src.Person.FirstName : &quot;&quot;))\n.ForMember(dest =&gt; dest.LastName, opt =&gt; opt.MapFrom(src =&gt; src.Person != null ? src.Person.LastName : &quot;&quot;))\n.ForMember(dest =&gt; dest.IdNumber, opt =&gt; opt.MapFrom(src =&gt; src.Person != null ? src.Person.IdNumber : &quot;&quot;))\n.ForMember(dest =&gt; dest.BirthDate, opt =&gt; opt.MapFrom(src =&gt; src.Person != null ? src.Person.BirthDate : (DateTime?) null))\n.ForMember(dest =&gt; dest.IBAN, opt =&gt; opt.MapFrom(src =&gt; src.BankAccount != null ? src.BankAccount.IBAN : &quot;&quot;))\n.ForMember(dest =&gt; dest.BankAccountNumber, opt =&gt; opt.MapFrom(src =&gt; src.BankAccount != null ? src.BankAccount.BankAccountNumber : &quot;&quot;))\n.ForMember(dest =&gt; dest.CardNumber, opt =&gt; opt.MapFrom(src =&gt; src.BankAccount != null ? src.BankAccount.CardNumber : &quot;&quot;));\n\nThen, add the equivalent methods for AccountRepository, AccountService and AccountController\n\npublic class AccountRepository : BaseRepository&lt;AlibabaDbContext, Account, long&gt;, IAccountRepository\n{\n    public AccountRepository(AlibabaDbContext context) : base(context)\n    {\n \n    }\n \n    public async Task&lt;Account&gt; GetByPhoneNumberAsync(string phoneNumber)\n    {\n\t    var user = await DbSet.Include(a =&gt; a.AccountRoles).ThenInclude(x =&gt; x.Role).FirstOrDefaultAsync(x =&gt; x.PhoneNumber == phoneNumber);\n\t    return user;\n    }\n \n    public async Task&lt;Account&gt; GetProfileAsync(long accountId)\n    {\n        var profile = await DbSet\n            .Include(a =&gt; a.Person)\n            .Include(a =&gt; a.BankAccount)\n            .FirstOrDefaultAsync(a =&gt; a.Id == accountId);\n \n        return profile;\n    }\n}\n \npublic class AccountService : IAccountService\n{\n    private readonly IAccountRepository _accountRepository;\n    private readonly IMapper _mapper;\n \n    public async Task&lt;Result&lt;ProfileDto&gt;&gt; GetProfileAsync(long accountId)\n    {\n        var result = await _accountRepository.GetProfileAsync(accountId);\n        if (result == null)\n        {\n            return Result&lt;ProfileDto&gt;.NotFound(null);\n        }\n \n        return Result&lt;ProfileDto&gt;.Success(_mapper.Map&lt;ProfileDto&gt;(result));\n    }\n}\n[ApiController]\n[Route(&quot;api/[controller]&quot;)]\npublic class AccountController : ControllerBase\n{\n    private readonly IUserContext _userContext;\n    private readonly IAccountService _accountService;\n \n    public AccountController(IUserContext userContext, IAccountService accountService)\n    {\n        _userContext = userContext;\n        _accountService = accountService;\n    }\n \n    [HttpGet(&quot;profile&quot;)]\n    public async Task&lt;IActionResult&gt; GetProfile()\n    {\n        // get account-id from token\n        long userId = _userContext.GetUserId();\n        // check for user-id to be valid\n        if (userId &lt;= 0)\n        {\n            return Unauthorized();\n        }\n \n        var result = await _accountService.GetProfileAsync(userId);\n        if (result.IsSuccess)\n        {\n            return Ok(result.Data);\n        }\n \n        return result.Status switch\n        {\n            ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n            ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n            ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n            _ =&gt; StatusCode(500, result.ErrorMessage)\n        };\n    }\n}\n\n\nNote: You should add necessary interfaces and implement them\n\n\n Implement:\n\n\n  Edit Email (with validation): EditEmailDto, service method, and controller endpoint.\npublic class EditEmailDto\n{\n    [EmailAddress(ErrorMessage = &quot;Invalid email address format&quot;)]\n    public string NewEmail { get; set; }\n}\n\n\n Edit Password: EditPasswordDto, service and controller.\npublic class EditPasswordDto\n{\n    [Required(ErrorMessage = &quot;Old password is required&quot;)]\n    public string OldPassword { get; set; }\n \n    [Required(ErrorMessage = &quot;New password is required&quot;)]\n    [MinLength(8, ErrorMessage = &quot;At least 8 chars&quot;)]\n    public string NewPassword { get; set; }\n \n    [Compare(&quot;Password&quot;, ErrorMessage = &quot;Password doesn&#039;t match&quot;)]\n    public string ConfirmNewPassword { get; set; }\n}\n\n\n Edit Person Info: PersonDto, and endpoint to upsert personal data.\npublic class PersonDto\n{\n    public long Id { get; set; }\n    public long CreatorId { get; set; }\n \n    [Required(ErrorMessage = &quot;Firstname is required&quot;)]\n    public string FirstName { get; set; }\n \n    [Required(ErrorMessage = &quot;Lastname is required&quot;)]\n    public string LastName { get; set; }\n \n    [Required(ErrorMessage = &quot;National Id number is required&quot;)]\n    [RegularExpression(@&quot;^\\d{10}$&quot;, ErrorMessage = &quot;National ID number must be exactly 10 digits&quot;)]\n    public string IdNumber { get; set; }\n \n    [Required(ErrorMessage = &quot;Gender is required&quot;)]\n    public short GenderId { get; set; }\n \n    [Required(ErrorMessage = &quot;Phone number is required&quot;)]\n    public string PhoneNumber { get; set; }\n \n    [Required(ErrorMessage = &quot;Birth date is required&quot;)]\n    public DateTime BirthDate { get; set; }\n}\n\n\n Edit BankAccountDetail: UpsertBankAccountDetailDto and relevant logic.\npublic class UpsertBankAccountDto\n{\n    [MinLength(24)]\n    [MaxLength(24)]\n    public string? IBAN { get; set; }\n \n    [MinLength(16)]\n    [MaxLength(16)]\n    public string? CardNumber { get; set; }\n \n    [MinLength(8)]\n    public string? BankAccountNumber { get; set; }\n}\n\n\n Add mapping for all Dtos and check related properties like CreatorAccountId.\n\n\n✅ List of Travelers\n\n\n Add GetMyPeople endpoint in AccountController. To do so, first add essential methods in PersonRepository, AccountService and related interfaces.\n\n\n Implement UpsertAccountPerson and UpsertPerson. Note that they should be considered separated.\n\n\npublic async Task&lt;Result&lt;long&gt;&gt; UpsertAccountPersonAsync(long accountId, PersonDto dto)\n{\n    var account = await _accountRepository.GetByIdAsync(accountId);\n    if (account == null)\n    {\n        throw new Exception(&quot;Account not found&quot;);\n    }\n    \n    // if account is not null, update its person\n    Person person;\n    if (account.PersonId.HasValue)\n    {\n        person = await _personRepository.GetByIdAsync(account.PersonId.Value);\n        if (person == null)\n        {\n            return Result&lt;long&gt;.Error(0, &quot;No person found for this account&quot;);\n        }\n \n        _mapper.Map(dto, person);\n        person.CreatorId = account.Id;\n        person.Id = account.PersonId.Value;\n        _personRepository.Update(person);\n    }\n    else\n    {\n        person = _mapper.Map&lt;Person&gt;(dto);\n        person.CreatorId = account.Id;\n        await _personRepository.InsertAsync(person);\n    }\n    await _unitOfWork.CompleteAsync();\n \n    account.PersonId = person.Id;\n    _accountRepository.Update(account);\n    await _unitOfWork.CompleteAsync();\n \n    return Result&lt;long&gt;.Success(person.Id);\n}\n \npublic async Task&lt;Result&lt;long&gt;&gt; UpsertPersonAsync(long accountId, PersonDto dto)\n{\n    var account = await _accountRepository.GetByIdAsync(accountId);\n    if (account == null)\n    {\n        throw new Exception(&quot;Account not found&quot;);\n    }\n \n    Person person = (await _personRepository.FindAsync(p =&gt; p.IdNumber == dto.IdNumber &amp;&amp; p.CreatorId == accountId)).FirstOrDefault();\n    if (person != null)\n    {\n        if (dto.Id &gt; 0 &amp;&amp; dto.Id != person.Id)\n        {\n            return Result&lt;long&gt;.Error(0, &quot;A person with this id number exists&quot;);\n        }\n        _mapper.Map(dto, person);\n        person.CreatorId = accountId;\n        _personRepository.Update(person);\n    }\n    else\n    {\n        person = _mapper.Map&lt;Person&gt;(dto);\n        person.CreatorId = accountId;\n        await _personRepository.InsertAsync(person);\n    }\n    await _unitOfWork.CompleteAsync();\n \n    return Result&lt;long&gt;.Success(person.Id);\n}\n[HttpPost(&quot;account-person&quot;)]\npublic async Task&lt;IActionResult&gt; UpsertAccountPerson([FromBody] PersonDto dto)\n{\n    long accountId = _userContext.GetUserId();\n    if (accountId &lt;= 0)\n    {\n        return Unauthorized();\n    }\n \n    var result = await _personService.UpsertAccountPersonAsync(accountId, dto);\n    return result.Status switch\n    {\n        ResultStatus.Success =&gt; NoContent(),\n        ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n        ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n        ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n        _ =&gt; StatusCode(500, result.ErrorMessage)\n    };\n}\n \n[HttpPost(&quot;person&quot;)]\npublic async Task&lt;IActionResult&gt; UpsertPerson([FromBody] PersonDto dto)\n{\n    long accountId = _userContext.GetUserId();\n    if (accountId &lt;= 0)\n    {\n        return Unauthorized();\n    }\n \n    var result = await _personService.UpsertPersonAsync(accountId, dto);\n    return result.Status switch\n    {\n        ResultStatus.Success =&gt; NoContent(),\n        ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n        ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n        ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n        _ =&gt; StatusCode(500, result.ErrorMessage)\n    };\n}\n✅ My Travels Tab\n\n  Create TicketOrderSummaryDto (includes cities, vehicle name, price, etc.).\n\npublic class TicketOrderSummaryDto\n{\n    public long Id { get; set; }\n    public string SerialNumber { get; set; }\n    public DateTime BoughtAt { get; set; }\n \n    // transaction\n    public decimal Price { get; set; }\n \n    // transportation\n    public DateTime TravelStartDate { get; set; }\n    public DateTime? TravelEndDate { get; set; }\n \n    // city\n    public string FromCity { get; set; }\n    public string ToCity { get; set; }\n \n    // company\n    public string CompanyName { get; set; }\n \n    // vehicle data\n    public short VehicleTypeId { get; set; }\n    public string VehicleName { get; set; }\n}\n\n Add GetTravels in AccountService, and expose GetMyTravels in controller.\n\nFirst, update interfaces and TicketOrderRepository, add the mappings and then go for the other things\nIn AccountService:\npublic async Task&lt;Result&lt;List&lt;TicketOrderSummaryDto&gt;&gt;&gt; GetTravelsAsync(long accountId)\n{\n    var result = await _ticketOrderRepository.GetAllByBuyerId(accountId);\n    if (result == null)\n    {\n        return Result&lt;List&lt;TicketOrderSummaryDto&gt;&gt;.NotFound(null);\n    }\n \n    return Result&lt;List&lt;TicketOrderSummaryDto&gt;&gt;.Success(_mapper.Map&lt;List&lt;TicketOrderSummaryDto&gt;&gt;(result));\n}\nIn AccountController:\n[HttpGet(&quot;my-travels&quot;)]\npublic async Task&lt;IActionResult&gt; GetMyTravels()\n{\n    long buyerId = _userContext.GetUserId();\n    if (buyerId &lt;= 0)\n    {\n        return Unauthorized();\n    }\n \n    var result =  await _accountService.GetTravelsAsync(buyerId);\n    if (result.IsSuccess)\n    {\n        return Ok(result.Data);\n    }\n \n    return result.Status switch\n    {\n        ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n        ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n        ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n        _ =&gt; StatusCode(500, result.ErrorMessage)\n    };\n}\n✅ My Transactions Tab\n\n Create TransactionDto and mapping.\n\npublic class TransactionDto\n{\n    public long Id { get; set; }\n    public short TransactionTypeId { get; set; }\n    public long AccountId { get; set; }\n    public long? TicketOrderId { get; set; }\n    public decimal BaseAmount { get; set; }\n    public decimal FinalAmount { get; set; }\n    public required string SerialNumber { get; set; }\n    public DateTime CreatedAt { get; set; }\n    public string? Description { get; set; }\n    public string TransactionType { get; set; }\n}\n\n  Add method to get transactions by AccountId in TransactionRepository.\n\npublic async Task&lt;List&lt;Transaction&gt;&gt; GetTransactionsByAccountIdAsync(long accountId)\n{\n    var transactions = await DbSet\n        .Include(t =&gt; t.TransactionType)\n        .Include(t =&gt; t.TicketOrder)\n        .Where(t =&gt; t.AccountId == accountId).ToListAsync();\n    return transactions;\n}\n\n  Expose GetMyTransactions in AccountController. It’s obvious you should first add the essential method GetTransactionsAsync in AccountService.\n\n[HttpGet(&quot;my-transactions&quot;)]\npublic async Task&lt;IActionResult&gt; GetMyTransactions()\n{\n    long accountId = _userContext.GetUserId();\n    if (accountId &lt;= 0)\n    {\n        return Unauthorized();\n    }\n \n    var result = await _accountService.GetTransactionsAsync(accountId);\n    if (result.IsSuccess)\n    {\n        return Ok(result.Data);\n    }\n \n    return result.Status switch\n    {\n        ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n        ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n        ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n        _ =&gt; StatusCode(500, result.ErrorMessage)\n    };\n}\n\n  Add modal to simulate balance top-up (manual input).\n\npublic class TopUpDto\n{\n    public decimal Amount { get; set; }\n}\n\n  Add TransactionService and use its method CreateTopUpAsync to create and add a new transaction in AccountService. Then add an endpoint just like before.\n\npublic async Task&lt;Result&lt;long&gt;&gt; TopUpAsync(long accountId, TopUpDto dto)\n{\n    var account = await _accountRepository.GetByIdAsync(accountId);\n    if (account == null)\n    {\n        return Result&lt;long&gt;.Error(0, &quot;Account not found&quot;);\n    }\n \n    account.Deposit(dto.Amount);\n    _accountRepository.Update(account);\n    await _unitOfWork.CompleteAsync();\n \n    var transactionId = await _transactionService.CreateTopUpAsync(accountId, dto.Amount);\n    return Result&lt;long&gt;.Success(transactionId.Data);\n}\nPostman\nConsidering that all endpoints in AccountController require Authorization, You need to test your API in Postman.\n\n\nPostman is a client which lets the user test api professionally.\nYou can download it in this link and get started with it using this video\n🧠 Hints &amp; Notes\n\nCheck the codes as they’re put here before debugging, you can check them with the repositories.\nComplete the task step by step in each endpoint to preserve the principals of Clean Architecture.\n\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References"},"02-Project-Based/Session08/Session08-Frontend":{"slug":"02-Project-Based/Session08/Session08-Frontend","filePath":"02-Project-Based/Session08/Session08 Frontend.md","title":"Session08 Frontend","links":[],"tags":[],"content":"🛠️ Task Checklist\n⚙️ Tooling &amp; Fixes\n\n  Install and configure react-hook-form\n\nnpm install react-hook-form\n\n🔐 Account &amp; Authentication\n\n Use Axios request interceptor to attach token to requests and handle logout logic\n\n// add a request interceptor to include JWT token if available\nagent.interceptors.request.use((config) =&gt; {\n  const token = useAuthStore.getState().token;\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers[&quot;Authorization&quot;] = `Bearer ${token}`;\n  }\n  return config;\n});\n \n// add a response interceptor to handle 401 Unauthorized\nagent.interceptors.response.use(\n  (res) =&gt; res,\n  (error) =&gt; {\n    if (error.response === 401) {\n      useAuthStore.getState().logout();\n      window.location.href = &quot;/login&quot;; // redirect to login\n    }\n    return Promise.reject(error);\n  }\n);\nAPI\n\n Provide a method for each new endpoint implemented in backend\n\nconst Profile = {\n  getProfile: () =&gt; request.get&lt;ProfileDto&gt;(&#039;/account/profile&#039;),\n  editEmail: (data: EditEmailDto) =&gt; request.put&lt;void&gt;(&#039;/account/email&#039;, data),\n  editPassword: (data: EditPasswordDto) =&gt; request.put&lt;void&gt;(&#039;/account/password&#039;, data),\n  upsertAccountPerson: (data: PersonDto) =&gt; request.post&lt;number&gt;(&#039;/account/account-person&#039;, data),\n  upsertPerson: (data: PersonDto) =&gt; request.post&lt;number&gt;(&#039;/account/person&#039;, data),\n  upsertBankDetail: (data: UpsertBankAccountDetailDto) =&gt; request.post&lt;void&gt;(&#039;/account/bank-detail&#039;, data),\n  getMyPeople: () =&gt; request.get&lt;PersonDto[]&gt;(&#039;/account/my-people&#039;),\n  getMyTravels: () =&gt; request.get&lt;TicketOrderSummaryDto[]&gt;(&#039;/account/my-travels&#039;),\n  getMyTransactions: () =&gt; request.get&lt;TransactionDto[]&gt;(&#039;/account/my-transactions&#039;), \n  topUp: (data : topUpDto) =&gt; request.post&lt;number&gt;(&#039;/account/top-up&#039;, data)\n};\n \n🗂️ Additional Profile Tabs (initial setup)\n\n\n  Add empty pages/tabs for:\n\n ProfileSummary\n MyTravels\n MyTransactions\n MyPeople\n\n\n\n Implement ProfilePage using the components created. This is an example of how it can be done:\n\n\nimport InfoAccount from &quot;./InfoAccount&quot;;\nimport InfoPeople from &quot;./InfoPeople&quot;;\nimport InfoTransactions from &quot;./InfoTransactions&quot;;\nimport InfoTravels from &quot;./InfoTravels&quot;;\nimport { useState } from &quot;react&quot;;\n \nconst tabs = [\n  { label: &quot;Account&quot;, component: &lt;InfoAccount /&gt; },\n  { label: &quot;Transactions&quot;, component: &lt;InfoTransactions /&gt; },\n  { label: &quot;Travels&quot;, component: &lt;InfoTravels /&gt; },\n  { label: &quot;People&quot;, component: &lt;InfoPeople /&gt; }\n];\n \nconst Profile = () =&gt; {\n  const [selected, setSelected] = useState(0);\n  return (\n    &lt;div className=&quot;max-w-4xl mx-auto py-8 px-4&quot;&gt;\n      &lt;div className=&quot;flex flex-col md:flex-row gap-8&quot;&gt;\n        &lt;aside className=&quot;md:w-64 w-full bg-white rounded-lg shadow p-4 flex md:flex-col flex-row gap-2 md:gap-0 mb-4 md:mb-0&quot;&gt;\n          {tabs.map((tab, idx) =&gt; (\n            &lt;button\n              key={tab.label}\n              className={`text-right px-4 py-2 rounded transition font-medium text-base md:text-lg w-full ${\n                selected === idx\n                  ? &quot;bg-blue-100 text-blue-700&quot;\n                  : &quot;hover:bg-gray-100 text-gray-700&quot;\n              }`}\n              onClick={() =&gt; setSelected(idx)}\n              type=&quot;button&quot;\n            &gt;\n              {tab.label}\n            &lt;/button&gt;\n          ))}\n        &lt;/aside&gt;\n        &lt;main className=&quot;flex-1 min-w-0&quot;&gt;{tabs[selected].component}&lt;/main&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n \nexport default Profile;\n \n\n\n  Create prototype of ProfilePage and integrate with navbar. (Create a button or link to access ProfilePage, only when user is logged in)\n\n\n Define and adjust routes for profile and its tabs\n\n\nconst AppRoutes = () =&gt; {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;\n      &lt;Route path=&quot;/register&quot; element={&lt;Register /&gt;} /&gt;\n      &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;\n      &lt;Route path=&quot;*&quot; element={&lt;NotFound /&gt;} /&gt;\n    &lt;/Routes&gt;\n  );\n};\n \nexport default AppRoutes;\n \n\n Implement tab handling inside ProfilePage. You can also do it route-based.\n\nProfile Summary\n📦 DTOs / Models\n\n\nAdd models for:\n\n  EditEmailDto\n\nexport interface EditEmailDto {\n    newEmail: string;\n}\n\n  EditPasswordDto\n\nexport interface EditPasswordDto {\n    oldPassword: string;\n    newPassword: string;\n    confirmNewPassword: string;\n}\n\n  PersonDto\n\nexport interface PersonDto {\n    id?: number;\n    creatorAccountId?: number;\n    firstName: string;\n    lastName: string;\n    idNumber: string;\n    genderId: number;\n    phoneNumber: string;\n    birthDate: string;\n}\n\n  ProfileDto\n\nexport interface ProfileDto {\n    accountPhoneNumber: string;\n    email: string;\n    balance: number;\n \n    firstName: string;\n    lastName: string;\n    idNumber: string;\n    personPhoneNumber: string;\n    birthDate: Date | string | null;\n \n    iban: string;\n    bankAccountNumber: string;\n    cardNumber: string;\n}\n\n UpsertBankAccountDetailDto\n\nexport interface UpsertBankAccountDto {\n    iban?: string;\n    bankAccountNumber?: string;\n    cardNumber?: string;\n}\n\n\n Implement the process of showing and editing the data. To do so, you can use modal components and set their functionality in the pages.\n\n\n🧍 List of Travelers\n\n  Implement ListOfTravelers page for showing, editing, and adding new people. You can use the same modal used for UpsertAccountPerson.\n\n💳 Transactions Module\n\n Add TransactionDto model\n\nexport interface TransactionDto {\n    id: number;\n    transactionTypeId: number;\n    accountId: number;\n    ticketOrderId?: number;\n    baseAmount: number;\n    finalAmount: number;\n    serialNumber: string;\n    createdAt: Date | string;\n    description?: string;\n    transactionType: string;\n}\n\n  Implement MyTransactions page\nNote: It is recommended to add a component to be displayed as a card, including the table of information, then use it in the page of MyTransactions\n\n🚆 Travel Module\n\n Add TicketOrderSummaryDto model\n\nexport interface TicketOrderSummaryDto {\n    id: number;\n    serialNumber: string;\n    boughtAt: Date | string;\n \n    price: number;\n \n    travelStartDate: Date | string;\n    travelEndDate: Date | string;\n \n    fromCity: string;\n    toCity: string;\n \n    companyName: string;\n \n    vehicleTypeId: number;\n    vehicleName: string;\n}\n\n Implement MyTravels page. Note that this page can be similarly implemented by a card.\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References"},"02-Project-Based/Session09/Session09-Additional-Info":{"slug":"02-Project-Based/Session09/Session09-Additional-Info","filePath":"02-Project-Based/Session09/Session09 Additional Info.md","title":"Session09 Additional Info","links":[],"tags":[],"content":"⚠ Important Tip\nIf your agent.ts uses useAuthStore().token at the top level, remember:\n\nOn very first load, Zustand will rehydrate from storage after initial render, so token may be null until rehydration is done.\nFix: either delay access until after hasHydrated, or refactor agent to inject token per request.\n\nTo safely handle concurrency in your CreateTicketOrderAsync method — particularly for seat reservation on the same Transportation — you need to prevent race conditions where two users might reserve the same seat or oversell capacity.\nThis is a classic critical section problem, and you can solve it using application-level locking, database-level locking, or both.\n\n✅ Recommended: Database-level concurrency control + optional distributed lock\n👇 Here’s what you should do:\n\n✅ 1. Use pessimistic concurrency (row-level locking) on the Transportation row\nWhy?\nYou need to lock the transportation row to prevent multiple reservations from modifying the related seats/capacity at the same time.\nHow?\nUse EF Core’s raw SQL or transaction-scoped SELECT … FOR UPDATE (which translates to SQL row locks):\nusing var transaction = await _context.Database.BeginTransactionAsync(IsolationLevel.Serializable);\n \nvar transportation = await _context.Transportations\n    .FromSqlRaw(&quot;SELECT * FROM Transportations WITH (UPDLOCK, ROWLOCK) WHERE Id = {0}&quot;, dto.TransportationId)\n    .FirstOrDefaultAsync();\n\n\nUPDLOCK: prevents others from reading for update\n\n\nROWLOCK: locks only the specific row\n\n\n\nIf using PostgreSQL or MySQL, you’d use FOR UPDATE instead.\n\n\n✅ 2. Alternatively, use distributed locking if you have multiple app instances\nUse something like:\n\n\nRedis distributed lock\n\n\nSQL application locks (sp_getapplock)\n\n\nSemaphoreSlim static lock (only for single-instance apps — not safe in web farms)\n\n\nExample using sp_getapplock (SQL Server):\nEXEC sp_getapplock @Resource = &#039;lock_transportation_123&#039;, @LockMode = &#039;Exclusive&#039;, @LockTimeout = 10000;\nEF version:\nawait _dbContext.Database.ExecuteSqlRawAsync(\n    $&quot;EXEC sp_getapplock @Resource = &#039;transportation_lock_{dto.TransportationId}&#039;, @LockMode = &#039;Exclusive&#039;, @LockTimeout = 10000;&quot;);\n✅ This will ensure only one thread gets to proceed per TransportationId.\n\n✅ 3. Wrap the reservation logic in a transaction\nusing var transaction = await _context.Database.BeginTransactionAsync(IsolationLevel.Serializable);\n \n// locking query here\n// seat validation\n// insert tickets\n// save ticket order\n// commit\n \nawait _unitOfWork.SaveChangesAsync();\nawait transaction.CommitAsync();\nUse IsolationLevel.Serializable or RepeatableRead if you’re not doing explicit locking.\n\n✅ 4. Add a unique constraint on SeatId + TransportationId (if not already)\nTo enforce uniqueness at DB level and prevent race conditions from succeeding:\nALTER TABLE Tickets ADD CONSTRAINT UQ_Tickets_Seat_Transport UNIQUE (SeatId, TicketStatusId)\nWHERE TicketStatusId != 3; -- exclude cancelled\nOr make a logic-safe alternative depending on your schema.\n\n✅ Final version: Summary of changes\nIn your service:\nusing var transaction = await _dbContext.Database.BeginTransactionAsync(IsolationLevel.Serializable);\n \n// Optional: Lock the transportation row to prevent race\nawait _dbContext.Database.ExecuteSqlRawAsync(\n    $&quot;EXEC sp_getapplock @Resource = &#039;transportation_lock_{dto.TransportationId}&#039;, @LockMode = &#039;Exclusive&#039;, @LockTimeout = 10000;&quot;);\n \n// Re-fetch transportation + tickets\nvar transportation = await _transportationRepository.GetByIdWithTickets(dto.TransportationId);\n \n// Validate seats\nvar seatCheck = ValidateTransportationAndSeats(transportation, dto.Travelers);\nif (!string.IsNullOrEmpty(seatCheck)) return Result&lt;long&gt;.Error(0, seatCheck);\n \n// Proceed with reservation\n...\n \nawait _unitOfWork.SaveChangesAsync();\nawait transaction.CommitAsync();\n\n🧠 Summary Table\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrategyPrevents Race?Web-farm SafeRecommended Forsp_getapplock✅ Yes✅ YesSQL Server web appsEF raw SQL WITH (UPDLOCK)✅ Yes✅ YesSQL Server monolithsSemaphoreSlim✅ Yes❌ NoLocal-only appsFOR UPDATE✅ Yes✅ YesPostgreSQL, MySQL\n\nLet me know your DB provider and environment (single-instance or multi-instance), and I can generate exact code tailored for that.\nPerfect — you’re absolutely right to want the whole process to be atomic:\n→ Seat allocation,\n→ Ticket creation,\n→ Balance checking &amp; payment,\n→ Transaction creation,\n→ Traveler creation/upsert, etc.\nThis needs more than just database-level locks. You want to serialize execution for the same transportation to avoid concurrency conflicts — across the entire flow, not just the DB writes.\n\n✅ Your Goal\n\nFor a given TransportationId, only one call to CreateTicketOrderAsync should execute at a time, regardless of app instance or user.\n\nThis includes logic outside EF (like payment, seat assignment, person creation, etc.).\n\n🛠️ The Right Solution: Distributed Application Locking\nUse SQL Server’s sp_getapplock to lock by TransportationId\nWhy?\n\n\nIt locks application-level logic, not just SQL rows\n\n\nIt works across threads, processes, and even app servers\n\n\nIt ensures only one process can work on that transportation at a time\n\n\n\n✅ How to Implement in Your Method\n🔒 Step 1: Lock by Transportation ID\nAdd this at the start of your method:\nawait _dbContext.Database.ExecuteSqlRawAsync(\n    $&quot;EXEC sp_getapplock @Resource = &#039;transportation_lock_{dto.TransportationId}&#039;, &quot; +\n    &quot;@LockMode = &#039;Exclusive&#039;, @LockTimeout = 10000;&quot;);\nThis ensures that only one call per transportation runs at a time.\nIf a second request tries to lock the same ID, it waits up to 10 seconds.\n\n🔁 Step 2: Begin EF Transaction\nThis will include all EF operations in a single atomic unit:\nusing var transaction = await _dbContext.Database.BeginTransactionAsync();\n\n🧠 Step 3: Keep the Full Logic As Is, But Within Transaction\nLike this:\npublic async Task&lt;Result&lt;long&gt;&gt; CreateTicketOrderAsync(long accountId, CreateTicketOrderDto dto)\n{\n    // 🔒 Lock to prevent concurrency per transportation\n    await _dbContext.Database.ExecuteSqlRawAsync(\n        $&quot;EXEC sp_getapplock @Resource = &#039;transportation_lock_{dto.TransportationId}&#039;, &quot; +\n        &quot;@LockMode = &#039;Exclusive&#039;, @LockTimeout = 10000;&quot;);\n \n    // 🧾 Begin transaction\n    using var transaction = await _dbContext.Database.BeginTransactionAsync();\n \n    // 💰 Load account and transportation\n    var account = await _accountRepository.GetByIdAsync(accountId);\n    if (account == null) return Result&lt;long&gt;.Error(0, &quot;Account not found&quot;);\n \n    var transportation = await _transportationRepository.GetByIdAsync(dto.TransportationId);\n    if (transportation == null) return Result&lt;long&gt;.Error(0, &quot;Transportation not found&quot;);\n \n    // 💵 Check balance\n    var price = transportation.BasePrice * dto.Travelers.Count;\n    if (account.CurrentBalance &lt; price)\n        return Result&lt;long&gt;.Error(0, &quot;Not enough money&quot;);\n \n    // ✅ Validate seat availability\n    var seatCheck = ValidateTransportationAndSeats(transportation, dto.Travelers);\n    if (!string.IsNullOrEmpty(seatCheck))\n        return Result&lt;long&gt;.Error(0, seatCheck);\n \n    // 🪑 Assign seats (if dynamic logic)\n    await AssignSeatsIfDynamic(transportation.VehicleId, dto.Travelers);\n \n    // 👤 Upsert travelers (can also use same transaction)\n    await UpsertTravelers(account.Id, dto.Travelers);\n \n    // 🎟️ Create ticket order\n    var ticketOrder = new TicketOrder\n    {\n        BuyerId = account.Id,\n        CreatedAt = DateTime.UtcNow,\n        Description = &quot;&quot;,\n        SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n        TransportationId = dto.TransportationId,\n    };\n    await _ticketOrderRepository.AddAsync(ticketOrder);\n \n    // 🎫 Add tickets\n    foreach (var traveler in dto.Travelers)\n    {\n        var ticket = new Ticket\n        {\n            CreatedAt = DateTime.UtcNow,\n            Description = traveler.Description,\n            SeatId = traveler.SeatId!.Value,\n            SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n            TicketOrder = ticketOrder,\n            TicketStatusId = 1,\n            TravelerId = traveler.Id,\n        };\n        await _ticketRepository.AddAsync(ticket);\n    }\n \n    // 💳 Commit everything\n    await _unitOfWork.SaveChangesAsync();\n \n    // 💸 Withdraw money and create transaction\n    await _accountService.PayForTicketOrderAsync(account.Id, ticketOrder.Id, price);\n \n    // ✅ Commit transaction\n    await transaction.CommitAsync();\n \n    return Result&lt;long&gt;.Success(ticketOrder.Id);\n}\n\n🧱 Summary of Protection\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStepProtected?HowPrevent concurrent seat assignment✅sp_getapplock per TransportationIdPrevent concurrent DB changes✅EF DbTransactionPrevent double-spend✅Balance check inside the same lock + transactionEnsure traveler upserts/tickets are safe✅Wrapped in same transaction\n\n⚠️ Important Note\nMake sure all the operations (AssignSeatsIfDynamic, UpsertTravelers, etc.):\n\n\nUse the same DbContext/UnitOfWork\n\n\nDon’t commit changes prematurely (no SaveChangesAsync() before you’re ready to commit the whole transaction)\n\n\n\n✅ Optional (Safety): Add retry logic\nIn case of a deadlock or lock timeout, you might want to retry the whole operation once.\n\nLet me know if you want me to extract this into a reusable helper like:\nawait _appLockService.ExecuteWithLockAsync($&quot;transportation_lock_{dto.TransportationId}&quot;, async () =&gt; {\n    // your reservation logic\n});\nThat would clean things up nicely.\nSure. Let’s break down everything you need to know about transactions in Entity Framework Core (EF Core) — especially for your case where you’re doing complex operations that must all succeed or fail together.\n\n🧾 What is a Transaction?\nA transaction is a unit of work that is treated as a single, indivisible operation. Either all of it succeeds (committed), or none of it does (rolled back).\n🧠 Properties of a transaction (ACID):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPropertyMeaningAtomicityAll steps succeed or none doConsistencyDB remains valid before and afterIsolationTransactions don’t interfere with each otherDurabilityOnce committed, data is persisted permanently\n\n✅ Why You Need Transactions\nIn your case, you’re:\n\n\nAssigning seats\n\n\nCreating or updating people\n\n\nCreating a TicketOrder\n\n\nCreating multiple Tickets\n\n\nUpdating account balance &amp; transaction history\n\n\nAll of these must either:\n\n\nComplete fully and safely, or\n\n\nFail entirely, with no partial data left behind.\n\n\n\n🧰 Transaction in EF Core: Full Example\n🔧 Step-by-step Example:\npublic async Task&lt;Result&lt;long&gt;&gt; CreateTicketOrderAsync(long accountId, CreateTicketOrderDto dto)\n{\n    // Begin EF Core transaction\n    using var transaction = await _dbContext.Database.BeginTransactionAsync();\n \n    try\n    {\n        // Load required entities\n        var account = await _accountRepository.GetByIdAsync(accountId);\n        if (account == null)\n            return Result&lt;long&gt;.Error(0, &quot;Account not found&quot;);\n \n        var transportation = await _transportationRepository.GetByIdAsync(dto.TransportationId);\n        if (transportation == null)\n            return Result&lt;long&gt;.Error(0, &quot;Transportation not found&quot;);\n \n        var price = transportation.BasePrice * dto.Travelers.Count;\n        if (account.CurrentBalance &lt; price)\n            return Result&lt;long&gt;.Error(0, &quot;Not enough money&quot;);\n \n        // Validate seat assignment\n        var seatCheck = ValidateTransportationAndSeats(transportation, dto.Travelers);\n        if (!string.IsNullOrEmpty(seatCheck))\n            return Result&lt;long&gt;.Error(0, seatCheck);\n \n        await AssignSeatsIfDynamic(transportation.VehicleId, dto.Travelers);\n        await UpsertTravelers(account.Id, dto.Travelers);\n \n        // Create ticket order\n        var ticketOrder = new TicketOrder\n        {\n            BuyerId = account.Id,\n            CreatedAt = DateTime.UtcNow,\n            SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n            TransportationId = dto.TransportationId,\n        };\n        await _ticketOrderRepository.AddAsync(ticketOrder);\n \n        foreach (var traveler in dto.Travelers)\n        {\n            await _ticketRepository.AddAsync(new Ticket\n            {\n                CreatedAt = DateTime.UtcNow,\n                Description = traveler.Description,\n                SeatId = traveler.SeatId.Value,\n                SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n                TicketOrder = ticketOrder,\n                TicketStatusId = 1,\n                TravelerId = traveler.Id,\n            });\n        }\n \n        // Save changes\n        await _unitOfWork.SaveChangesAsync();\n \n        // Withdraw money from account\n        await _accountService.PayForTicketOrderAsync(account.Id, ticketOrder.Id, price);\n \n        // Commit transaction\n        await transaction.CommitAsync();\n \n        return Result&lt;long&gt;.Success(ticketOrder.Id);\n    }\n    catch (Exception ex)\n    {\n        // Rollback if anything failed\n        await transaction.RollbackAsync();\n        return Result&lt;long&gt;.Error(0, &quot;Reservation failed: &quot; + ex.Message);\n    }\n}\n\n🔄 Isolation Levels (Advanced)\nYou can specify isolation level when beginning a transaction:\nusing var transaction = await _dbContext.Database.BeginTransactionAsync(IsolationLevel.Serializable);\nCommon levels:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIsolation LevelDescriptionUse CaseReadCommitted (default)No dirty readsUsually enoughRepeatableReadPrevents non-repeatable readsSeat assignment logicSerializableFull isolation (slower, safer)Financial or reservation systems\n\n🧩 When SaveChangesAsync() Commits vs. Not\nCalling SaveChangesAsync() does not commit the outer transaction — it just writes pending changes to the database.\nThe real commit happens only when you call:\nawait transaction.CommitAsync();\nIf anything fails before that, the changes are not persisted.\n\n✅ Best Practices for Transactions in EF Core\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBest PracticeWhyKeep transactions shortLocks and contention increase with timeCatch exceptions and rollbackPrevent dirty/incomplete dataUse only one DbContext inside the transactionEF tracks entities via one unit of workDon’t call SaveChanges too earlyMay break the atomicityUse appropriate isolation levelBased on your concurrency needsConsider retry policy for transient errorsEspecially in distributed systems\n\n❗ Common Pitfalls\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMistakeProblemMixing DbContext instances inside one transactionBreaks consistencyCommitting too earlyLater failure still leaves partial dataForgetting rollback in catchLeaves transaction open or inconsistentAsync code outside transaction scopeCould break atomicity or introduce race\n\n🧠 Summary: Transaction Essentials\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConceptDescriptionBeginTransactionAsync()Starts a manual transactionSaveChangesAsync()Writes changes but doesn’t commit outer transactionCommitAsync()Finalizes all DB changesRollbackAsync()Reverts all changes since the transaction beganScopeAll EF/DB actions done within the transaction block\n\nIf you’d like, I can create a generic transaction helper, or even make this a middleware or interceptor, depending on how reusable you want this to be.\nLet me know!\nGreat! These questions show deep thinking about how transactions and locks actually work in EF Core and layered architecture. Let’s answer them one by one with real clarity and direction.\n\n❓ 1. “I have this method in my TicketOrderService, and I don’t have access to _dbContext.”\n✅ Solution:\nIf you’re using Repository + UnitOfWork pattern, your UnitOfWork should expose a method to access the underlying DbContext or allow you to start a transaction.\n👉 Extend your IUnitOfWork interface like this:\npublic interface IUnitOfWork\n{\n    Task&lt;int&gt; SaveChangesAsync();\n    Task&lt;IDbContextTransaction&gt; BeginTransactionAsync(IsolationLevel level = IsolationLevel.ReadCommitted);\n    DbContext Context { get; } // optional\n}\nAnd in your implementation:\npublic class UnitOfWork : IUnitOfWork\n{\n    private readonly AppDbContext _context;\n \n    public UnitOfWork(AppDbContext context) =&gt; _context = context;\n \n    public Task&lt;int&gt; SaveChangesAsync() =&gt; _context.SaveChangesAsync();\n \n    public Task&lt;IDbContextTransaction&gt; BeginTransactionAsync(IsolationLevel level = IsolationLevel.ReadCommitted)\n        =&gt; _context.Database.BeginTransactionAsync(level);\n \n    public DbContext Context =&gt; _context;\n}\n✅ Then in your TicketOrderService:\nusing var transaction = await _unitOfWork.BeginTransactionAsync();\n// your operations\nawait _unitOfWork.SaveChangesAsync();\nawait transaction.CommitAsync();\nThis keeps your Service clean and architecture-respecting.\n\n❓ 2. “How does the transaction hold stuff? Wouldn’t unitOfWork.SaveChangesAsync() just save everything?”\n🔍 Clarification:\n\n\nSaveChangesAsync() writes the changes to the database, but…\n\n\nIf you’re in a transaction, the database holds those changes in a temporary, invisible state until you explicitly call:\n\n\nawait transaction.CommitAsync();\n💡 If you don’t commit, or you rollback, then those changes are discarded, even if you called SaveChangesAsync().\n👇 Timeline of how EF works in a transaction:\n\n\nEF tracks entities in memory.\n\n\nYou call SaveChangesAsync().\n\n\nChanges are written to the DB — but:\n\n\nIf inside a transaction, they are not visible to others yet.\n\n\nThey are held until CommitAsync().\n\n\n\n\nIf you call RollbackAsync(), all writes are undone.\n\n\n\n❓ 3. “How would the lock know that the work with that transportation is finished?”\n🔒 About sp_getapplock:\nThis SQL Server feature locks a named resource (like transportation_lock_123) for the duration of the current SQL connection and transaction.\nHere’s how it works:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nActionResultYou call sp_getapplockSQL Server grants an exclusive lock for the resourceYou complete the transaction (commit or rollback)Lock is automatically releasedYour connection is closed or disposedLock is released\n🔍 So you don’t need to manually release the lock.\nJust make sure:\n\n\nThe lock and transaction use the same connection\n\n\nYou commit or rollback after the work is done\n\n\n✅ EF Core handles all that automatically when using Database.BeginTransactionAsync().\n\n✅ Final Advice Recap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestionAnswerI don’t have access to _dbContextExpose BeginTransactionAsync on your IUnitOfWorkHow does transaction matter if I save mid-way?It isolates changes — no one sees them until committedHow does lock get released?Automatically when transaction completes or connection closes\n\nLet me know if you want:\n\n\nSample UnitOfWork and Repository setup for full support\n\n\nA lock + transaction helper method\n\n\nUnit tests to simulate concurrent reservations\n\n\nYou’re doing great — this is how robust, real-world software gets built.\nYou’ve unpacked crucial concerns around transactions, unit-of-work (UoW), and application-wide consistency. Here’s a polished breakdown with clear answers and guidance:\n\n✅ 1. Is it okay to use both Transactions and Unit of Work?\n\n\nYes, absolutely. UoW is a design pattern that groups multiple repository operations into one logical unit, while a transaction ensures these operations either all succeed or all fail atomically (antondevtips.com).\n\n\nIn EF Core, the DbContext itself implements UoW, collecting changes in memory until SaveChangesAsync() is called (reddit.com).\n\n\nWhen you execute multiple SaveChanges, or include non-repository logic (e.g., balance updates, payment creation, seat locking), explicit transactions ensure the entire flow remains atomic .\n\n\n\n✅ 2. How exactly to open/close transactions? Where to be careful?\n✨ Use EF to manage transactions in your UoW:\n\n\nExtend your IUnitOfWork to include transaction methods:\nTask&lt;IDbContextTransaction&gt; BeginTransactionAsync(IsolationLevel level = ReadCommitted);\nTask&lt;int&gt; SaveChangesAsync();\n\n\nIn your service, do:\nusing var tx = await _unitOfWork.BeginTransactionAsync();\ntry {\n  // perform all operations (seat locks, entity changes, balance, tickets)\n  await _unitOfWork.SaveChangesAsync();\n  await tx.CommitAsync();\n} catch {\n  await tx.RollbackAsync();\n  throw;\n}\n\n\nKnow the boundaries: Keep the transaction as short as possible. Open it before critical operations and close it after the final CommitAsync().\n\n\n\n💡 Use (IsolationLevel.Serializable) for scenarios like seat reservation where concurrent writes must be prevented (milanjovanovic.tech, learn.microsoft.com).\n\n\n✅ 3. Why did things “work” without explicit transactions?\n\n\nSimple SaveChanges calls act like atomic units—if they fail, nothing is saved. With just one SaveChanges call, EF wraps it in a default transaction (stackoverflow.com).\n\n\nHowever, as soon as your workflow involves multiple SaveChanges, external services, or cross-repository updates, the default behavior is no longer sufficient. A failure midway could leave your data in a partial state.\n\n\nThat’s where explicit transaction scopes come in—to guarantee everything is batched and rolled back if any part fails (antondevtips.com).\n\n\n\n🧠 TL;DR Summary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConceptPurposeWhen NeededUnit of WorkOrganizes multiple EF operations into one commitAlways used with EF DbContextImplicit transactionEF wraps each SaveChanges automaticallyOk for single SaveChanges callsExplicit transactionManually control commit/rollback across many operationsNeeded when multiple SaveChanges, external services, concurrency, etc.IsolationLevel.SerializableHighest locking level to prevent concurrent conflictsUse for critical resource locks (e.g., seat booking)Be carefulKeep transactions short to avoid locks and deadlocksAvoid long-running operations inside the transaction\n\nIf you want, I can provide:\n\n\nCode templates for UoW with transaction management\n\n\nInterceptor or decorator to automate transaction handling in your services\n\n\nConcurrency demos to test seat reservation under load\n\n\nJust say the word!\nAbsolutely! Let’s clarify both of your statements with authoritative sources:\n\n1. If I haven’t called BeginTransaction and call SaveChanges, will changes be saved?\n✅ Yes. EF Core automatically wraps every SaveChanges() call in its own transaction. This means:\n\nIf all operations succeed, the data is saved.\nIf anything fails, the entire set is rolled back, leaving the DB unchanged. citeturn0search0turn0search9\n\n🔁 So even without explicitly starting a transaction, SaveChanges() ensures atomicity for that batch of changes.\n\n2. If I have called BeginTransaction, and then call SaveChanges, do changes go to the DB immediately?\n✅ Yes, but context matters. When you wrap operations in an explicit transaction:\n\nEach SaveChanges() writes within that transaction.\nHowever, none of these writes become visible to other connections until you call Commit().\n\nEF also uses savepoints internally (for multiple SaveChanges() calls) to enable partial rollbacks without rolling back the entire transaction. citeturn0search0turn0search2turn0search3\n\n🧩 In Plain English\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScenarioSaveChanges OnlyBeginTransaction + SaveChangesNo transactionAuto-wrapped in its own transaction–immediate.—With explicit transactionWrites are within the transaction, not yet committed.✔Rollback before commitNot possible. SaveChanges is final.✔ Rolls everything back.\n\n✅ TL;DR\n\n✅ Without BeginTransaction: SaveChanges() is atomic per call—commits or rolls back automatically.\n✅ With BeginTransaction: SaveChanges() writes into the transaction, but the changes are held until you call Commit(); Rollback() discards them all.\n\n\nWant some ready-to-use code to introduce BeginTransaction() into your UnitOfWork and services? Just let me know and I’ll supply a clean implementation!"},"02-Project-Based/Session09/Session09-Backend":{"slug":"02-Project-Based/Session09/Session09-Backend","filePath":"02-Project-Based/Session09/Session09 Backend.md","title":"Session09 Backend","links":[],"tags":[],"content":"Session 9 - Ticket Reservation\nAs this order is comming to an end, we are completing the functionality of application with the vital feature of reserving tickets\nMiscellaneous / Fixes\n\n Fix GUID generation and async handling in ticket creation. (Use Guid.NewGuid() instead of new Guid())\n\nSerialNumber = Guid.NewGuid().ToString(&quot;N&quot;)\n\n Make SerialNumber, TicketOrderId, BaseAmount publicly settable in DTOs if they’re private.\n Check Transaction and make sure SerialNumber is not a required property.\n\nBranching\n\n Create the feature/ticket-reservation branch based on develop\n\nTicket Ordering System\n🧱 Domain and Infrastructure Setup\n\n Check out new ERD: Here\n Add migrations for the above database changes.\n\n🧑‍💼 Path to Service Layer\n\n Create DTOs CreateTravellerTicketDto and CreateTicketOrderDto and the mappings:\n\npublic class CreateTravellerTicketDto\n{\n    public long Id { get; set; }\n    public long CreatorId { get; set; }\n \n    [Required(ErrorMessage = &quot;First name is required&quot;)]\n    public required string FirstName { get; set; }\n \n    [Required(ErrorMessage = &quot;Last name is required&quot;)]\n    public required string LastName { get; set; }\n \n    [Required(ErrorMessage = &quot;Id number is required&quot;)]\n    [RegularExpression(@&quot;^\\d{10}$&quot;, ErrorMessage = &quot;National ID number must be exactly 10 digits&quot;)]\n    public required string IdNumber { get; set; }\n \n    [Required(ErrorMessage = &quot;Gender should be identified&quot;)]\n    public required short GenderId { get; set; }\n \n    [Required(ErrorMessage = &quot;Phone number is required&quot;)]\n    [Phone(ErrorMessage = &quot;Invalid phone number format&quot;)]\n    public required string PhoneNumber { get; set; }\n \n    [Required(ErrorMessage = &quot;Birth date is required&quot;)]\n    public DateTime BirthDate { get; set; }\n \n    public long? SeatId { get; set; }\n    public bool IsVIP { get; set; }\n    public string? Description { get; set; }\n}\npublic class CreateTicketOrderDto\n{\n    public long TransportationId { get; set; }\n    public List&lt;CreateTravellerTicketDto&gt; MyProperty { get; set; }\n}\n \nNote: If you have the Coupon feature in your project, then add a CouponCode property in CreateTicketOrderDto.\n\n Modify SeatRepository to add method GetSeatsByVehicleIdAsync\n\npublic Task&lt;List&lt;Seat&gt;&gt; GetSeatsByVehicleIdAsync(long vehicleId)\n{\n    var seats = DbSet\n        .Include(s =&gt; s.Vehicle)\n        .Include(s =&gt; s.Tickets).ThenInclude(t =&gt; t.Traveler)\n        .Where(s =&gt; s.VehicleId == vehicleId).ToListAsync();\n    return seats;\n}\n\n Add Enum for TicketStatus, VehicleType and TransactionType\n\npublic enum TicketStatusEnum\n{\n    Reserved = 1,\n    Paid = 2,\n    CancelledByUser = 3,\n    CancelledBySystem = 4,\n    Used = 5,\n    Expired = 6\n}\npublic enum VehicleTypeEnum\n{\n    Airplane = 1,\n    Train = 2,\n    Bus = 3\n}\npublic enum TransactionTypeEnum\n{\n    Deposit = 1,\n    Withdraw = 2\n}\n\n Add the lock-service to lock the transportation through reservation, then register it:\n\npublic class TransportationLockService : ITransportationLockService\n{\n    private readonly ConcurrentDictionary&lt;long, SemaphoreSlim&gt; _locks = new();\n \n    public async Task&lt;IDisposable&gt; AcquireLockAsync(long transportationId)\n    {\n        var semaphore = _locks.GetOrAdd(transportationId, new SemaphoreSlim(1, 1));\n        await semaphore.WaitAsync();\n        return new Releaser(() =&gt; semaphore.Release());\n    }\n \n    private class Releaser : IDisposable\n    {\n        private readonly Action _release;\n \n        public Releaser(Action release)\n        {\n            _release = release;\n        }\n \n        public void Dispose()\n        {\n            _release();\n        }\n    }\n}\n\n Add method CreateAsync in TransportationService\n\npublic async Task&lt;Result&lt;long&gt;&gt; CreateAsync(long accountId, TransactionDto dto)\n{\n    Transaction transaction = new();\n    _mapper.Map(dto, transaction);\n    transaction.AccountId = accountId;\n \n    await _transactionRepository.InsertAsync(transaction);\n    await _unitOfWork.CompleteAsync();\n    return Result&lt;long&gt;.Success(transaction.Id);\n}\n\n Add method PayForTicketOrderAsync in AccountService\n\npublic async Task&lt;Result&lt;long&gt;&gt; PayForTicketOrderAsync(long accountId, long ticketOrderId, decimal baseAmount, decimal finalAmount)\n{\n    var account = await _accountRepository.GetByIdAsync(accountId);\n    if (account == null)\n    {\n        return Result&lt;long&gt;.Error(0, &quot;Account not found&quot;);\n    }\n \n    if (account.Balance &lt; finalAmount)\n    {\n        return Result&lt;long&gt;.Error(0, &quot;Not enough money&quot;);\n    }\n \n    account.Withdraw(finalAmount);\n    _accountRepository.Update(account);\n    await _unitOfWork.CompleteAsync();\n \n    TransactionDto dto = new()\n    {\n        CreatedAt = DateTime.UtcNow,\n        Description = &quot;Payment for ticket order #&quot; + ticketOrderId + &quot; at &quot; + DateTime.UtcNow,\n        BaseAmount = baseAmount,\n        FinalAmount = finalAmount,\n        SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n        TicketOrderId = ticketOrderId,\n        TransactionTypeId = (int)TransactionTypeEnum.Withdraw,\n        TransactionType = TransactionTypeEnum.Withdraw.ToString()\n    };\n \n    return await _transactionService.CreateAsync(accountId, dto);\n}\n\n Create ITicketOrderService, TicketOrderService and implement CreateTicketOrderAsync\n\npublic async Task&lt;Result&lt;long&gt;&gt; CreateTicketOrderAsync(long accountId, CreateTicketOrderDto dto)\n{\n    // get the account\n    var account = await _accountRepository.GetByIdAsync(accountId);\n    if (account == null)\n    {\n        return Result&lt;long&gt;.Error(0, &quot;Account not found&quot;);\n    }\n \n    // get the transportation\n    var transportation = await _transportationRepository.GetByIdAsync(dto.TransportationId);\n    if (transportation == null)\n    {\n        return Result&lt;long&gt;.Error(0, &quot;Transportation not found&quot;);\n    }\n \n    // lock the transportation through reservation\n    using (await _transportationLockService.AcquireLockAsync(dto.TransportationId))\n    {\n        var baseAmount = transportation.BasePrice * dto.Travellers.Count;\n        if (account.Balance &lt; baseAmount)\n        {\n            return Result&lt;long&gt;.Error(0, &quot;Not enough money&quot;);\n        }\n        // check validity of transportation\n        var checkSeats = ValidateTransportationAndSeats(transportation, dto.Travellers);\n        if (!string.IsNullOrEmpty(checkSeats))\n        {\n            return Result&lt;long&gt;.Error(0, checkSeats);\n        }\n \n        var finalAmount = baseAmount;\n        await AssignSeatsIfDynamic(transportation.VehicleId, dto.Travellers);\n        await UpsertTravellers(accountId, dto.Travellers);\n \n        // add the ticket order by the info we have\n        TicketOrder ticketOrder = new()\n        {\n            BuyerId = accountId,\n            CreatedAt = DateTime.UtcNow,\n            Description = &quot;&quot;,\n            SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n            TransportationId = dto.TransportationId\n        };\n        await _ticketOrderRepository.InsertAsync(ticketOrder);\n        \n        foreach (var traveller in dto.Travellers)\n        {\n            if (!traveller.SeatId.HasValue)\n            {\n                return Result&lt;long&gt;.Error(0, &quot;Seat ID is required for each traveller&quot;);\n            }\n \n            Ticket ticket = new()\n            {\n                CreatedAt = DateTime.UtcNow,\n                Description = traveller.Description,\n                SeatId = traveller.SeatId.Value,\n                SerialNumber = Guid.NewGuid().ToString(&quot;N&quot;),\n                TicketOrder = ticketOrder,\n                TicketStatusId = 1,\n                TravelerId = traveller.Id,\n            };\n            await _ticketRepository.InsertAsync(ticket);\n        }\n \n        await _unitOfWork.CompleteAsync();\n        await _accountService.PayForTicketOrderAsync(account.Id, ticketOrder.Id,\n            baseAmount, finalAmount);\n        return Result&lt;long&gt;.Success(ticketOrder.Id);\n    }\n}\n\n Register TicketOrderService in DI container.\n\n🎯 Controller Layer\n\n Create TicketOrderController with the endpoint POST /CreateTicketOrder\n\n[ApiController]\n[Route(&quot;api/[controller]&quot;)]\n[Authorize(Roles = &quot;User&quot;)]\npublic class TicketOrderController : ControllerBase\n{\n    private readonly IUserContext _userContext;\n    private readonly ITicketOrderService _ticketOrderService;\n \n    public TicketOrderController(IUserContext userContext,\n        ITicketOrderService ticketOrderService)\n    {\n        _userContext = userContext;\n        _ticketOrderService = ticketOrderService;\n    }\n \n    [HttpPost(&quot;create-order&quot;)]\n    public async Task&lt;IActionResult&gt; CreateTicketOrder([FromBody] CreateTicketOrderDto dto)\n    {\n        long accountId = _userContext.GetUserId();\n        // check for account-id to be valid\n        if (accountId &lt;= 0)\n        {\n            return Unauthorized();\n        }\n \n        var result = await _ticketOrderService.CreateTicketOrderAsync(accountId, dto);\n        if (result.IsSuccess)\n        {\n            return Ok(result.Data);\n        }\n \n        return result.Status switch\n        {\n            ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n            ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n            ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n            _ =&gt; StatusCode(500, result.ErrorMessage)\n        };\n    }\n}\n🗃️ Repository Layer\nImplement there methods in TicketOrderRepository and its interface\n\n FindAndLoadAllDetails\n\npublic Task&lt;TicketOrder?&gt; FindAndLoadAllDetailsAsync(long id)\n{\n    var ticketOrder = DbSet\n        .Include(to =&gt; to.Transportation).ThenInclude(t =&gt; t.FromLocation).ThenInclude(fl =&gt; fl.City)\n        .Include(to =&gt; to.Transportation).ThenInclude(t =&gt; t.ToLocation).ThenInclude(tl =&gt; tl.City)\n        .Include(to =&gt; to.Tickets).ThenInclude(t =&gt; t.Traveler)\n        .Where(to =&gt; to.Id == id).FirstOrDefaultAsync();\n \n    return ticketOrder;\n}\n\n GetAllByBuyerId\n\npublic async Task&lt;List&lt;TicketOrder&gt;&gt; GetAllByBuyerId(long buyerId)\n{\n    var ticketOrders = await DbSet\n        .Include(to =&gt; to.Transaction)\n        .Include(to =&gt; to.Transportation).ThenInclude(t =&gt; t.FromLocation)\n        .Include(to =&gt; to.Transportation).ThenInclude(t =&gt; t.ToLocation)\n        .Include(to =&gt; to.Transportation).ThenInclude(t =&gt; t.Company)\n        .Include(to =&gt; to.Transportation).ThenInclude(t =&gt; t.Vehicle)\n        .Where(to =&gt; to.BuyerId == buyerId).ToListAsync();\n    return ticketOrders;\n}\nTransportation and Seat Selection\n\n Add TransportationSeatDto.\n\npublic class TransportationSeatDto\n{\n    public long Id { get; set; }\n    public int Row { get; set; }\n    public int Column { get; set; }\n    public bool IsVIP { get; set; }\n    public bool IsAvailable { get; set; }\n    public string? Description { get; set; }\n    public bool IsReserved { get; set; }\n    public short? GenderId { get; set; }\n}\n\n Add mapping from Seat to TransportationSeatDto.\n\nCreateMap&lt;Seat, TransportationSeatDto&gt;()\n    .ForMember(dest =&gt; dest.IsReserved, opt =&gt; opt.MapFrom(src =&gt; src.Tickets.Any(t =&gt; t.TicketStatusId == (int)TicketStatusEnum.Reserved)))\n    .ForMember(dest =&gt; dest.GenderId, opt =&gt; opt.MapFrom(src =&gt; src.Tickets.Any(t =&gt; t.TicketStatusId == (int)TicketStatusEnum.Reserved) ?\n    src.Tickets.First(t =&gt; t.TicketStatusId == (int)TicketStatusEnum.Reserved).Traveler.GenderId : (short?)null));\n\n Add method GetSeatsByVehicleId in ISeatRepository and implement it.\n\npublic Task&lt;List&lt;Seat&gt;&gt; GetSeatsByVehicleIdAsync(long vehicleId)\n{\n    var seats = DbSet\n        .Include(s =&gt; s.Vehicle)\n        .Include(s =&gt; s.Tickets).ThenInclude(t =&gt; t.Traveler)\n        .Where(s =&gt; s.VehicleId == vehicleId).ToListAsync();\n    return seats;\n}\n\n Add GetTransportationSeatsAsync in ITransportationService and implement.\n\npublic async Task&lt;Result&lt;List&lt;TransportationSeatDto&gt;&gt;&gt; GetTransportationSeatsAsync(long transportationId)\n{\n    var transportation = await _transportationRepository.GetByIdAsync(transportationId);\n\tif (transportation == null)\n\t{\n\t\treturn Result&lt;List&lt;TransportationSeatDto&gt;&gt;.Error(null, &quot;Transportation not found&quot;); \n\t}\n \n\tvar seats = await _seatRepository.GetSeatsByVehicleIdAsync(transportation.VehicleId);\n\tif (seats == null || seats.Count != 0)\n\t{\n\t\treturn Result&lt;List&lt;TransportationSeatDto&gt;&gt;.Success(_mapper.Map&lt;List&lt;TransportationSeatDto&gt;&gt;(seats));\n\t}\n \n\treturn Result&lt;List&lt;TransportationSeatDto&gt;&gt;.NotFound(null);\n}\n\n Add GetTransportationSeats endpoint in TransportationController.\n\n[HttpGet(&quot;{transportationId}/seats&quot;)]\npublic async Task&lt;IActionResult&gt; GetTransportationSeats(long transportationId)\n{\n\tvar result = await _transportationService.GetTransportationSeatsAsync(transportationId);\n    if (result.IsSuccess)\n    {\n\t\treturn Ok(result.Data);\n    }\n \n    return result.Status switch\n    {\n        ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n        ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n        ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n        _ =&gt; StatusCode(500, result.ErrorMessage)\n    };\n}\n\n Ensure RemainingCapacity is treated as calculated (ignored in EF, removed from schema).\n\npublic int RemainingCapacity =&gt; Vehicle.Capacity -\n\tTicketOrders?.SelectMany(to =&gt; to.Tickets)\n\t.Count(t =&gt; t.TicketStatusId == 1) ?? 0;\n✅ Ticket Review &amp; Confirmation\n\n Make sure you have TravlerTicketDto, mapped to “ with the details\n\npublic class TravellerTicketDto\n{\n    public long Id { get; set; }\n    public required string SerialNumber { get; set; }\n    public required string TravellerName { get; set; }\n    public DateTime BirthDate { get; set; }\n    public required string SeatNumber { get; set; }\n    public required string TicketStatus { get; set; }\n    public string? CompanionName { get; set; }\n    public string? Description { get; set; }\n}\nCreateMap&lt;Ticket, TravellerTicketDto&gt;()\n    .ForMember(dest =&gt; dest.Id, opt =&gt; opt.MapFrom(src =&gt; src.Id))\n    .ForMember(dest =&gt; dest.TravellerName, opt =&gt; opt.MapFrom(src =&gt; src.Traveler != null ? $&quot;{src.Traveler.FirstName} {src.Traveler.LastName}&quot; : &quot;&quot;))\n    .ForMember(dest =&gt; dest.SerialNumber, opt =&gt; opt.MapFrom(src =&gt; src.SerialNumber))\n    .ForMember(dest =&gt; dest.TicketStatus, opt =&gt; opt.MapFrom(src =&gt; src.TicketStatus.Ttile))\n    .ForMember(dest =&gt; dest.CompanionName, opt =&gt; opt.MapFrom(src =&gt; src.Companion != null ? $&quot;{src.Companion.FirstName} {src.Companion.LastName}&quot; : &quot;&quot;))\n    .ForMember(dest =&gt; dest.Description, opt =&gt; opt.MapFrom(src =&gt; src.Description));\n\n Implement GetTicketOrderDetails endpoint to fetch ticket summary, make sure to create required methods as well\n\n[HttpGet(&quot;my-travels/{ticketOrderId}&quot;)]\npublic async Task&lt;IActionResult&gt; GetTravelDetails(long ticketOrderId)\n{\n    long accountId = _userContext.GetUserId();\n    if (accountId &lt;= 0)\n    {\n        return Unauthorized();\n    }\n \n    var result = await _accountService.GetTicketOrderDetailsAsync(accountId, ticketOrderId);\n    if (result.IsSuccess)\n    {\n        return Ok(result.Data);\n    }\n \n    return result.Status switch\n    {\n        ResultStatus.Unauthorized =&gt; Unauthorized(result.ErrorMessage),\n        ResultStatus.NotFound =&gt; NotFound(result.ErrorMessage),\n        ResultStatus.ValidationError =&gt; BadRequest(result.ErrorMessage),\n        _ =&gt; StatusCode(500, result.ErrorMessage)\n    };\n}\npublic async Task&lt;Result&lt;List&lt;TravellerTicketDto&gt;&gt;&gt; GetTicketOrderDetailsAsync(long accoundId, long ticketOrderid)\n{\n    var result = await _ticketRepository.GetTicketsByTicketOrderId(ticketOrderid);\n    if (result != null)\n    {\n        if (result.Count &gt; 0 &amp;&amp; result.First().TicketOrder.BuyerId != accoundId)\n        {\n            return Result&lt;List&lt;TravellerTicketDto&gt;&gt;.Error(null, &quot;Account unauthorized&quot;);\n        }\n \n        return Result&lt;List&lt;TravellerTicketDto&gt;&gt;.Success(_mapper.Map&lt;List&lt;TravellerTicketDto&gt;&gt;(result));\n    }\n \n    return Result&lt;List&lt;TravellerTicketDto&gt;&gt;.NotFound(null);\n}\npublic async Task&lt;List&lt;Ticket&gt;&gt; GetTicketsByTicketOrderId(long ticketOrderId)\n{\n    var tickets = await DbSet\n        .Include(t =&gt; t.Traveler)\n        .Include(t =&gt; t.TicketStatus)\n        .Include(t =&gt; t.Companion)\n        .Include(t =&gt; t.Seat)\n        .Include(t =&gt; t.TicketOrder)\n        .Where(t =&gt; t.TicketOrderId == ticketOrderId).ToListAsync();\n    return tickets;\n}\nMerge\n\n Create a PR and merge the current branch with develop\n"},"02-Project-Based/Session09/Session09-Frontend":{"slug":"02-Project-Based/Session09/Session09-Frontend","filePath":"02-Project-Based/Session09/Session09 Frontend.md","title":"Session09 Frontend","links":[],"tags":[],"content":"Reservation System Development Guide - Session 10\nThis guide helps developers understand how to implement, update, and maintain the ticket reservation system. It summarizes changes from commits and provides step-by-step actions, grouped by feature area.\ngithub.com/MehrdadShirvani/AlibabaClone-Frontend/commits/develop/\nFixes and Missing Things from Session 08\nAuthentication &amp; Protected Routes\n\n Add session persistence in authStore to store token more persistently\n\nimport { create } from &quot;zustand&quot;;\nimport { createJSONStorage, persist } from &quot;zustand/middleware&quot;;\nimport { AuthResponseDto } from &quot;@/shared/models/authentication/AuthResponseDto&quot;;\n \ninterface AuthState {\n  user: AuthResponseDto | null;\n  login: (user: AuthResponseDto) =&gt; void;\n  logout: () =&gt; void;\n}\n \nexport const useAuthStore = create&lt;AuthState&gt;()(\n  persist(\n    (set) =&gt; ({\n      user: null,\n      login: (user: AuthResponseDto) =&gt; set({ user }),\n      logout: () =&gt; set({ user: null }),\n    }),\n    {\n      name: &quot;auth-storage&quot;, // storage key in localStorage\n      storage: createJSONStorage(() =&gt; localStorage),\n    }\n  )\n);\n \nProfile and User Info Enhancements\n\n Fix and align birthDate types in PersonDto, TransportationSearchResult, and ListOfTravelers. Make sure to use Date | string data type for them\n\nBranching\n\n Create the feature/themes branch based on develop\n\n🎨 Theming and UI Styling\n\n Install and import preline\n\nnpm install preline\n\n Add theme colors and global styles (index.css). Take a look at their Documentation\n Add ThemeSwitcher and integrate it into the navbar\n If you decide to do this part after implementing pages, make sure to add theme support to the following components:\n\n  transportationCard, transportationSearchForm, ReviewAndConfirm\n  All modals: LoginModal, RegisterModal, SelectFromPeopleModal\n  Profile section: ProfilePage, ProfileSummary, PersonalInformation, AccountInfo, PersonalAccountInfo, BankAccountDetails, MyTravels, MyTransactions, ListOfTravelers\n  Reservation views and components\n\n\n\nMerge\n\n Create a PR and merge the current branch with develop\n\nBranching for reservation\n\n Create the feature/ticket-reservation branch based on develop\n\nBackend Agent Methods\n\n Add CreateTicketOrderDto and CreateTravelerTicketDto. Check backend endpoints for the dtos you need for this session\n Add TransportationSeatDto\n Add related methods in TicketOrder and add it to agent\n\nconst TicketOrder = {\n  create: (data : CreateTicketOrderDto) =&gt; request.post&lt;number&gt;(&#039;/ticketOrder/create&#039;, data),\n  downloadPdf: (ticketOrderId : number) =&gt; request.get&lt;Blob&gt;(`/ticketOrder/${ticketOrderId}/pdf`, {\n      responseType: &#039;blob&#039;,\n    }),\n}\nReservation Process &amp; Step Management\n\n Implement useReservationStore using zustand to manage reservation state\n\nimport { PersonDto } from &#039;@/shared/models/account/PersonDto&#039;;\nimport { CreateTravelerTicketDto } from &#039;@/shared/models/ticketOrder/createTravelerTicketDto&#039;;\nimport { TransportationSearchResult } from &#039;@/shared/models/transportation/transportationSearchResult&#039;;\nimport { create } from &#039;zustand&#039;;\n \nconst defaultTraveler: CreateTravelerTicketDto = {\n  id: 0,\n  creatorAccountId: 0,\n  firstName: &#039;&#039;,\n  lastName: &#039;&#039;,\n  genderId: 0,\n  birthDate: &#039;&#039;,\n  idNumber: &#039;&#039;,\n  phoneNumber: &#039;&#039;,\n  englishFirstName: &#039;&#039;,\n  englishLastName: &#039;&#039;,\n  isVIP: false,\n  seatId: null,\n  description: &#039;&#039;,\n};\n \ntype ReservationStep = &quot;transportation&quot; | &quot;travelers&quot; | &quot;review&quot; | &quot;payment&quot; | &quot;success&quot;;\n \ninterface ReservationState {\n  transportation: TransportationSearchResult | null;\n  travelers: CreateTravelerTicketDto[];\n  ticketOrderId: number;\n  couponCode: string | null;\n  paymentInfo: any;\n  people: PersonDto[],\n  currentStep: ReservationStep,\n  isConfirmed: boolean,\n  isPayed: boolean,\n  isTravelerPartDone: boolean, \n  addTraveler: (traveler: CreateTravelerTicketDto) =&gt; void;\n  setTravelers: (travelers: CreateTravelerTicketDto[]) =&gt; void;\n  updateTraveler: (index: number, traveler: CreateTravelerTicketDto) =&gt; void;\n  removeTraveler: (index: number) =&gt; void;\n  setTicketOrderId: (newId: number) =&gt; void;\n  setTransportation: (transportation: TransportationSearchResult) =&gt; void;\n  setCouponCode: (code: string | null) =&gt; void;\n  setPaymentInfo: (info: any) =&gt; void;\n  setPeople: (people: PersonDto[]) =&gt; void;\n \n  setCurrentStep: (step: ReservationStep) =&gt; void;\n  setIsConfirmed: (value: boolean) =&gt; void;\n  setIsPayed: (value: boolean) =&gt; void;\n  setIsTravelerPartDone: (value: boolean) =&gt; void;\n \n  resetReservation: () =&gt; void;\n}\n \nexport const useReservationStore = create&lt;ReservationState&gt;((set) =&gt; ({\n  transportation: null,\n  people: [],\n  travelers: [defaultTraveler],\n  couponCode: null,\n  paymentInfo: null,\n  ticketOrderId : 0,\n  currentStep: &quot;transportation&quot;,\n  isConfirmed: false,\n  isPayed : false,\n  isTravelerPartDone : false,\n  setTicketOrderId: (newId) =&gt; set(() =&gt;({\n      ticketOrderId : newId\n  })),\n  addTraveler: (traveler) =&gt; set((state) =&gt; ({ travelers: [...state.travelers, traveler] })),\n  setTravelers: (newTravelers) =&gt; set(() =&gt; ({\n    travelers : newTravelers\n  })),\n  setPeople: (newPeople) =&gt; set(() =&gt; ({\n    people : newPeople\n  })),\n  updateTraveler: (index, traveler) =&gt;\n    set((state) =&gt; {\n      const updated = [...state.travelers];\n      updated[index] = traveler;\n      return { travelers: updated };\n    }),\n \n  removeTraveler: (index) =&gt;\n    set((state) =&gt; {\n      if (state.travelers.length &lt;= 1) return state;\n      const updated = [...state.travelers];\n      updated.splice(index, 1);\n      return { travelers: updated };\n    }),\n \n  setTransportation: (theTransportation) =&gt; set({ transportation: theTransportation }),\n  setCouponCode: (code) =&gt; set({ couponCode: code }),\n  setPaymentInfo: (info) =&gt; set({ paymentInfo: info }),\n  setCurrentStep: (step) =&gt; set({ currentStep: step }),\n \n  resetReservation: () =&gt;\n    set({\n      transportation: null,\n      travelers: [],\n      ticketOrderId: 0,\n      couponCode: null,\n      paymentInfo: null,\n      people: [],\n      currentStep: &quot;transportation&quot;,\n      isConfirmed: false,\n      isPayed: false,\n      isTravelerPartDone: false\n    }),\n    \n  setIsConfirmed: (value) =&gt; set(() =&gt; ({\n    isConfirmed : value\n  })),\n  setIsPayed: (value) =&gt; set(() =&gt; ({\n    isPayed : value\n  })),\n  setIsTravelerPartDone: (value) =&gt; set(() =&gt; ({\n    isTravelerPartDone : value\n  })),\n}));\n\n\n Create step-based routing using ReservationLayout. Step-based routing, in the context of contact centers or workflow management, refers to a method of directing work items (like customer service calls or support tickets) to the most appropriate agent or resource based on a series of predefined steps or conditions.\n\n\n Add routing for reservation steps in App.tsx\n\n\n Add StepIndicator component to show step progress visually (optional)\n\n Add stepGuard logic to prevent accessing future steps prematurely\n Add logic to skip back only if previous steps are completed\n\n\n\n Create TravelerForm to gather passenger info, with the possibility to load data from the related people of the account.\n\n\n Create TravelerDetailsForm to gather passengers info with TravelerForm integration\n\n\n Create ReviewAndConfirm page to review selections\n\n\n Create PaymentForm for transaction process\n\n\n Create TicketIssued page for confirmation\n\n\n  Add validation to show error if seatId is missing\n\n\nSeat Selection\n\n Add DTO:\n\nexport interface transportationSeatDto{\n    id : number,\n    vehicleId : number,\n    row : number,\n    column : number,\n    isVIP : boolean,\n    isAvailable : boolean,\n    description : string | null,\n    isReserved : boolean,\n    genderId : number | null\n}\n\n Add getSeats() method to agent.ts\n Add SeatGridSelector component for graphical seat layout in TravelerDetailForm and integrate it with traveler list, only for Buses\n Modify TransportationCard to integrate with seat selection\n Add SeatOnlyGridSeatMap for simpler seat-only display\n\nCoupon Integration\n\n Add CouponValidationRequestDto and DiscountDto\n Add validateCoupon() method to agent.ts\n Update useReservationStore to include CouponCode\n Ensure CreateTicketOrderDto uses CouponCode instead of couponId\n Connect coupon validation flow in ReviewAndConfirm\n\nSearch, Filter, and Sort Functionality\n\n Add filters (company) and sorting (time or price) UI to SearchResultPage\n Add company logo support in result cards and filters\n Add previous/next day buttons for time navigation\n Add remaining capacity check to transportation cards\n Add refund policy info display\n Implement showing seat map in TransportaionCard using ReadOnlySeatMap\n\n📎 Notes\n\nEnsure you run a full theme test after UI changes.\nTest step transitions with various invalid scenarios.\nConfirm persistent session and coupon behavior across refreshes.\nValidate all filters, sort, and search navigation works.\nTest seat selection and proper rendering of rotated layouts.\n\nMerge\n\n Create a PR and merge the current branch with develop\n"},"02-Project-Based/Session10/Docker-–-Overview":{"slug":"02-Project-Based/Session10/Docker-–-Overview","filePath":"02-Project-Based/Session10/Docker – Overview.md","title":"Docker – Overview","links":[],"tags":[],"content":"What is Docker?\nDocker is a platform that allows you to package applications with all their dependencies into a standardized unit called a container. These containers are portable, isolated, and consistent across environments.\n\nWhat is a Container?\nA container is a lightweight, standalone executable package that includes everything needed to run an application: code, runtime, libraries, and configurations.\nContainers are stored in container repositories:\n\nPublic repositories: Docker Hub\nPrivate repositories: Used by organizations for internal deployments\n\n\nWhy Containers?\nBefore Containers:\n\nDevelopers shared artifacts (e.g., .jar files) with setup instructions.\nOperators had to install dependencies manually.\nSetup was error-prone and inconsistent across OS environments.\n\nWith Containers:\n\nEverything is bundled together and works the same everywhere.\nNo need to install dependencies manually.\nRuns in its own isolated environment.\nEasy to version, share, and deploy (just one command).\nMultiple versions of the same app can run simultaneously.\n\n\nImage vs. Container\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTermDescriptionImageA snapshot or package (the blueprint). Immutable.ContainerA running instance of an image. Has its own file system, environment, and process.Running an image creates a container.\n\nDocker vs Virtual Machine\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeatureDockerVirtual MachineVirtualizesApplication layerFull OS kernelStartup timeSecondsMinutesSizeMBsGBsIsolationOS-levelHardware-levelPerformanceNear-nativeHeavier overheadHost dependencyShares host kernelHas its own kernel\nDocker runs natively on Linux; on Windows/macOS it uses Docker Desktop, which runs Linux under WSL2 or HyperKit.\n\nDocker Architecture\nLayers of a Docker Image:\n\nBase Layer: Usually a minimal Linux distribution (e.g., alpine)\nApplication Layer: Your app and its dependencies\n\nEach image is made of layers stacked on top of each other.\n\nDocker Installation\nTo use Docker on:\n\nLinux: Install Docker engine directly.\nWindows/macOS: Use Docker Desktop, which includes WSL2 integration or virtualization backend.\n\n\nDocker Commands: Basics\n# Run a container from an image\ndocker run image-name\n \n# List running containers\ndocker ps\n \n# List all containers (running and stopped)\ndocker ps -a\n \n# Stop a running container\ndocker stop CONTAINER_ID\n \n# Start a stopped container\ndocker start CONTAINER_ID\nPort Binding\ndocker run -p HOST_PORT:CONTAINER_PORT image-name\nThis binds a container’s port to a specific port on your machine.\n\nDebugging Containers\n# View logs\ndocker logs CONTAINER_ID\n \n# Start a container with detached mode and port\ndocker run -d -p 3000:3000 image-name\n \n# Open an interactive shell inside a running container\ndocker exec -it CONTAINER_ID /bin/bash\nYou can assign names to containers using --name.\n\nDocker Networking\nConcept:\nContainers can communicate with each other over a virtual network.\n# List networks\ndocker network ls\n \n# Create a new network\ndocker network create my-network\n \n# Run container in a network\ndocker run --net my-network ...\nExample: MongoDB + Mongo Express on same network can communicate via service name.\n\nDocker WSL2 Error (Windows)\nIssue:\nFailed to configure network (networkingMode Nat)...\n\nFix:\nCreate or edit the file at:\nC:\\Users\\LENOVO\\.wslconfig\n\nAdd:\n[wsl2]\nnetworkingMode=None\n\nThen restart Docker Desktop.\n\nDocker Compose\nDocker Compose lets you define and run multi-container apps using YAML.\nExample:\nversion: &#039;3&#039;\nservices:\n  app:\n    image: my-app\n    ports:\n      - &quot;3000:3000&quot;\n    environment:\n      - NODE_ENV=production\n \n  mongodb:\n    image: mongo\n    ports:\n      - &quot;27017:27017&quot;\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=secret\nCommands:\ndocker-compose -f docker-compose.yml up\ndocker-compose down\n\nAll services run in the same default Docker network.\nIndentation in YAML is critical.\n\n\nDockerfile\nA Dockerfile is a script used to build Docker images.\nExample:\nFROM node:18\n \nENV NODE_ENV=production\n \n# Inside container\nRUN mkdir -p /home/app\n \n# Copy from host into container\nCOPY ./home/app /home/app\n \nWORKDIR /home/app\n \nCMD [&quot;node&quot;, &quot;server.js&quot;]\nBuild with:\ndocker build -t my-node-app .\nThen run it with:\ndocker run -p 3000:3000 my-node-app"},"02-Project-Based/Session10/VPS":{"slug":"02-Project-Based/Session10/VPS","filePath":"02-Project-Based/Session10/VPS.md","title":"VPS","links":[],"tags":[],"content":"ASP.NET CORE Setup →\n\nMake sure everything works and builds successfully\nSetUp :\n\nadd env files to git ignore\nCreate env file\ninstall DotNetEnv\nAdd\n\n\n\nDotNetEnv.Env.Load();\n\n  5. Update stuff:\n\nvar connectionString = Environment.GetEnvironmentVariable(&quot;CONNECTION_STRING&quot;);\n...\nbuilder.Services.Configure&lt;JwtSettings&gt;(options =&gt;\n{\n  options.Key = Environment.GetEnvironmentVariable(&quot;JWT_KEY&quot;);\n  options.Issuer = Environment.GetEnvironmentVariable(&quot;JWT_ISSUER&quot;);\n  options.Audience = Environment.GetEnvironmentVariable(&quot;JWT_AUDIENCE&quot;);\n  options.ExpiryMinutes = int.Parse(Environment.GetEnvironmentVariable(&quot;JWT_EXPIRY_MINUTES&quot;) ?? &quot;60&quot;);\n});\n\nJwtSettings jwtSettings = new JwtSettings\n{\n  Key = Environment.GetEnvironmentVariable(&quot;JWT_KEY&quot;),\n  Issuer = Environment.GetEnvironmentVariable(&quot;JWT_ISSUER&quot;),\n  Audience = Environment.GetEnvironmentVariable(&quot;JWT_AUDIENCE&quot;),\n  ExpiryMinutes = int.Parse(Environment.GetEnvironmentVariable(&quot;JWT_EXPIRY_MINUTES&quot;) ?? &quot;60&quot;),\n};\n\n\nvar corsOrigin = Environment.GetEnvironmentVariable(&quot;CORS_ORIGIN&quot;);\nbuilder.Services.AddCors(options =&gt;\n{\n  options.AddPolicy(&quot;Frontend&quot;, policy =&gt;\n  {\n      policy.WithOrigins(corsOrigin)\n      .AllowAnyHeader()\n      .AllowAnyMethod();\n  });\n});\n\nCORS_ORIGIN=http://localhost:5173\nCONNECTION_STRING=Server=SERVER;Database=DB;Trusted_Connection=True;TrustServerCertificate=True\nJWT_KEY=KEY\nJWT_ISSUER=ISSUER\nJWT_AUDIENCE=MyAppUsers\nJWT_EXPIRY_MINUTES=360 \n\n\nUpdate README and tell about environment variables\n\n\nHow is this dockerfile created?\nHow is it updated? with push and stuff?\nWhat about CORS? how do I know which port?\nWhat about connection string? in appsettings, how is that gonna be set?\nHow is it gonna be running all the time?\n\nHow to have seed data?\nHow is the database created?\nHow is it updated?\nDo I upload a backup, script?\nIs it done with migrations?\n\nWhat is the address in the frontend api is set?"},"02-Project-Based/Wrapping-up":{"slug":"02-Project-Based/Wrapping-up","filePath":"02-Project-Based/Wrapping up.md","title":"Wrapping up","links":[],"tags":[],"content":"Fix\nBackend\n\n Fix stuff that are not according to Clean Architecture\n Use ENUMs and other things we have not used yet\n\n Gender\n TransactionType\n TicketStatus\n Role\n LocationType\n VehicleType\n\n\n Do not accept data in Error and other stuff in Result\n Using services in other services?\n fix: make lookup tables(Gender, Role, LocationType, TransactionType, TicketStatus, VehicleType) id not not auto generated\n validators\n factories\n dependency extension\n locking ticketOrder create method\n API Versioning\n\nFrontend\n\n Folder strcuture\n Error Handling\n UI design at some parts\n\nSeed Data\nDockerizing and Deployment\nReformatting and Completing Documents\n\n Figure out a format\n Review old docs\n Complete new ones\n Write Read ME for GitHub\n\nGoing Public\n\n How much?\n What to do?\n What about other people wanting to join?\n"},"Folder-Strucutre":{"slug":"Folder-Strucutre","filePath":"Folder-Strucutre.md","title":"Folder-Strucutre","links":[],"tags":[],"content":"theOrderOfThePhoenix/\n├── 01-Introductory-Sessions/\n│\n├── 02-Project-Based-Sessions/\n│\n├── Assets\n└── References.md"},"Introductory-Session-Template":{"slug":"Introductory-Session-Template","filePath":"Introductory Session Template.md","title":"Introductory Session Template","links":[],"tags":[],"content":"[Title of the Session]\n📝 Overview\nIn this session, we’ll cover the following concepts:\n\nTopic 1\nTopic 2\nBasic Practice if any\n\n📚 Topics Covered\n✅ HTML\n\nLearn how to structure your webpage using HTML\n🔗 w3schools HTML\n\n✅ CSS\n\nLearn to style the page\n🔗 w3schools CSS\n\n✅ JavaScript\n\nBasics of interaction and scripting\n🔗 w3schools JavaScript\n\n📌 Notes\n\nCollected from various sources including W3Schools and ChatGPT\n\n\nInline notes or summaries\nConcept explanations\n\n🧪 Practice\n\n Create a basic webpage using HTML and CSS\n Add a simple JS alert on button click\n\n🙏 Acknowledgments\nSources:\n\nw3schools.com\nChatGPT conversations (2025 sessions)\n"},"Project-Based-Session-Template":{"slug":"Project-Based-Session-Template","filePath":"Project-Based Session Template.md","title":"Project-Based Session Template","links":[],"tags":[],"content":"Backend – [Session Title]\n🛠️ Task Checklist\n🚧 Branching\n\n Create the feature/[name] branch from develop\n\nTask\n\n Task\n📂 Suggested Folder: Domain/Framework/Interfaces/Respositories\n\n🧠 Hints &amp; Notes\n🙌 Acknowledgements\n\nChatGPT for snippet refinement and explanations\n\n🔍 References"},"index":{"slug":"index","filePath":"index.md","title":"Home","links":["01-Introductory-Sessions/Session00/Session00-Notes","01-Introductory-Sessions/Session01/Session01-Notes","01-Introductory-Sessions/Session02/Session02-Notes","01-Introductory-Sessions/Session03/Session03-Notes","01-Introductory-Sessions/Session04/Session04-Notes","01-Introductory-Sessions/Session05/Session05-Notes","01-Introductory-Sessions/Session06/Session06-Notes","01-Introductory-Sessions/Session07/Session07-Notes","02-Project-Based/Session00/Session00-Architecture","02-Project-Based/Session01/Session01-Additional-Info","02-Project-Based/Session01/Session01-Backend","02-Project-Based/Session02/Session02-Additional-Info","02-Project-Based/Session02/Session02-Backend","02-Project-Based/Session03/Session03-Additional-Info","02-Project-Based/Session03/Session03-Backend","02-Project-Based/Session04/Session04-Additional-Info","02-Project-Based/Session04/Session04-Backend","02-Project-Based/Session05/Session05-Additional-Info","02-Project-Based/Session05/Session05-Backend","02-Project-Based/Session05/Session05-Frontend","02-Project-Based/Session06/Session06-Additional-Info","02-Project-Based/Session06/Session06-Frontend","02-Project-Based/Session07/Session07-Additional-Info","02-Project-Based/Session07/Session07-Backend","02-Project-Based/Session07/Session07-Frontend","02-Project-Based/Session08/Session08-Backend","02-Project-Based/Session08/Session08-Frontend","02-Project-Based/Session09/Session09-Additional-Info","02-Project-Based/Session09/Session09-Backend","02-Project-Based/Session09/Session09-Frontend","02-Project-Based/Session10/Docker-–-Overview"],"tags":[],"content":"🐦‍🔥 Order of the Phoenix — Website Development\n📌 About the Project\nThis repository contains documents, resources, and projects created during the first phase of the Order of the Phoenix initiative — a self-organized learning movement started by a group of computer science students.\nWhat began as an effort to escape a passive academic environment evolved into a collaborative learning experiment — building a solid foundation in modern web development and culminating in the development of a Transportation Management System inspired by platforms like Booking.com and Alibaba.ir.\nThe goal wasn’t just to learn a technology; it was to foster self-driven learning, teamwork, and real-world problem-solving.\n📚 Introductory Sessions\nThe first part of the program focused on equipping everyone with fundamental web development and solid software architecture principles.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSessionNotes00Session00 Notes01Session01 Notes02Session02 Notes03Session03 Notes04Session04 Notes05Session05 Notes06Session06 Notes07Session07 Notes\n🗺️ Roadmap of What We Learned\n\n🌐 Web Fundamentals — HTTP, REST, and the client-server model\n🧩 MVC (Model-View-Controller) — basics of application structuring\n⚙️ Web API Development — designing and consuming APIs\n🚀 ASP.NET Core Basics — setting up and building modern backends\n🛠️ Dependency Injection (DI) —\n\nWhy DI is crucial for maintainability &amp; testability\nUnderstanding ASP.NET Core service lifetimes (Transient, Scoped, Singleton)\n\n\n🏗️ Design Patterns —\n\nRepository Pattern for data abstraction\nUnit of Work for transaction management\nFactory &amp; Builder for complex object creation\n\n\n🏛️ Clean Architecture Fundamentals —\n\nSeparating Domain, Application, and Infrastructure layers\nDesigning business rules independent of frameworks\n\n\n\nThese sessions ensured that all participants, regardless of prior experience, could contribute to a real-world, well-architected project.\n💻 Project-Based Sessions\nOnce the fundamentals were solid, we moved to building a real project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSessionNotes00Session00 Architecture01Session01 Additional InfoSession01 Backend02Session02 Additional InfoSession02 Backend03Session03 Additional InfoSession03 Backend04Session04 Additional InfoSession04 Backend05Session05 Additional InfoSession05 BackendSession05 Frontend06Session06 Additional InfoSession06 Frontend07Session07 Additional InfoSession07 BackendSession07 Frontend08Session08 BackendSession08 Frontend09Session09 Additional InfoSession09 BackendSession09 Frontend10Docker – Overview\n📝 Planning Phase\n\n✅ Selected the project collaboratively (Transportation Management System)\n✅ Designed a detailed ERD (Entity Relationship Diagram), identifying entities, aggregates, and relationships\n✅ Wrote full documentation — requirements, use cases, and architecture diagrams\n\n🔨 Implementation Phase\nEach member implemented their own version of the project, following Clean Architecture guidelines while experimenting with different approaches.\n🔗 Backend — Transportation Management API\nA Clean Architecture-based backend designed to be modular, testable, and scalable.\nKey Highlights:\n\nDomain Layer 🏛️\n\nDefined entities\nApplied domain rules to ensure data consistency\n\n\nApplication Layer ⚙️\n\nContained service classes (e.g., TicketOrderService, AccountService) that orchestrated business logic.\nServices handled validation, entity manipulation, and coordination between repositories.\nMapped DTOs to entities for input/output separation.\n\n\nInfrastructure Layer 🗄️\n\nImplemented Repository &amp; Unit of Work patterns using Entity Framework Core.\nDatabase interactions abstracted behind interfaces.\n\n\nPresentation Layer 🌐\n\nASP.NET Core RESTful Web API\n\n\n\nWhy Clean Architecture?\n\nClear dependency direction (outer layers depend only on inner ones).\nEasier testing (business logic independent of frameworks).\nHigh maintainability and scalability.\n\n🎨 Frontend — Transportation Management Web App\nA modern, component-driven frontend built with React + TypeScript, designed with a focus on clarity, modularity, and maintainability.\n\nState Management 🧩\n\nManaged predictably using Zustand, organized into well-defined slices for clear separation of concerns.\nPromotes ease of composition and scalability as the app grows.\n\n\nAPI Communication 🔗\n\nAll HTTP requests routed through a centralized Axios instance.\nHandles global error interception, authentication headers, and response transformations consistently.\n\n\nUI Components 🎨\n\nBuilt with TailwindCSS using a modular, reusable component approach.\nEncourages visual consistency and speeds up UI development.\n\n\nRouting &amp; Navigation 🗺️\n\nReact Router DOM for nested and dynamic routing.\nClear and scalable navigation flow for multi-step processes (e.g., ticket reservation).\n\n\nData Flow 🔄\n\nStrict unidirectional data flow, making interactions between components, state, and services predictable and easy to debug.\n\n\nUser Experience ✨\n\nA simple but modern UI optimized for clarity and responsiveness, simulating real-world use cases with a clean architecture mindset.\n\n\n\n👥 Projects by Members\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMemberProjectsMehrdad Shirvani 🐙 GitHubBackend API • Frontend Web AppAli Taherzadeh   🐙 GitHubBackend API • Frontend Web AppAmin Ghoorchian 🐙 GitHubBackend API • Frontend Web App\n🙏 Acknowledgements\nA heartfelt thanks to:\n\nAll members who dedicated their time and energy, despite busy schedules\nThe core team who stayed committed through challenges\nEveryone who believed in creating a culture of self-driven, high-quality software development\n\n🚀 Aspirations for the Project\nThis is just the beginning. Our future goals:\n\nPublishing all documents and ERDs publicly for others to learn from\nGrowing this into a community-driven tradition of collaboration and solving real problems\n\n”🔥 May this small spark inspire greater movements.”\n\nGraph View Index (auto-links)\nSession00 Architecture\nSession01 Additional Info\nSession01 Backend\nSession02 Additional Info\nSession02 Backend\nSession03 Additional Info\nSession03 Backend\nSession04 Additional Info\nSession04 Backend\nSession05 Additional Info\nSession05 Backend\nSession05 Frontend\nSession06 Additional Info\nSession06 Frontend\nSession07 Additional Info\nSession07 Backend\nSession07 Frontend\nSession08 Backend\nSession08 Frontend\nSession09 Additional Info\nSession09 Backend\nSession09 Frontend\nDocker – Overview\nSession00 Notes\nSession01 Notes\nSession02 Notes\nSession03 Notes\nSession04 Notes\nSession05 Notes\nSession06 Notes\nSession07 Notes\n"}}